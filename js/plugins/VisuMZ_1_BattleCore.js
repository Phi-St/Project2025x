//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.80;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.80] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Angle
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x1e608f=_0x1a44;(function(_0x35f3da,_0x169e60){const _0x4e696e=_0x1a44,_0xeba1a3=_0x35f3da();while(!![]){try{const _0x487f5e=parseInt(_0x4e696e(0x5a6))/0x1+-parseInt(_0x4e696e(0xb80))/0x2+-parseInt(_0x4e696e(0x8f9))/0x3+-parseInt(_0x4e696e(0x522))/0x4*(parseInt(_0x4e696e(0x971))/0x5)+parseInt(_0x4e696e(0x793))/0x6+-parseInt(_0x4e696e(0xa79))/0x7+parseInt(_0x4e696e(0x9f6))/0x8*(parseInt(_0x4e696e(0xa25))/0x9);if(_0x487f5e===_0x169e60)break;else _0xeba1a3['push'](_0xeba1a3['shift']());}catch(_0x344b90){_0xeba1a3['push'](_0xeba1a3['shift']());}}}(_0x1999,0x2e8f0));var label=_0x1e608f(0xce2),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x1e608f(0x9f1)](function(_0x925576){const _0x1c7b8e=_0x1e608f;return _0x925576['status']&&_0x925576[_0x1c7b8e(0x51f)][_0x1c7b8e(0xc3d)]('['+label+']');})[0x0];VisuMZ[label][_0x1e608f(0x4a9)]=VisuMZ[label][_0x1e608f(0x4a9)]||{},VisuMZ[_0x1e608f(0x47c)]=function(_0x2a8ed9,_0x4a8d78){const _0x430eb3=_0x1e608f;for(const _0x485bee in _0x4a8d78){if(_0x430eb3(0xa9d)!=='rIzba'){if(_0x485bee[_0x430eb3(0x97b)](/(.*):(.*)/i)){if(_0x430eb3(0x198)!==_0x430eb3(0x737)){const _0x1ad7cb=String(RegExp['$1']),_0x5bfd44=String(RegExp['$2'])['toUpperCase']()[_0x430eb3(0x2a9)]();let _0x3666c4,_0x3ee7fa,_0x14df96;switch(_0x5bfd44){case _0x430eb3(0xb4a):_0x3666c4=_0x4a8d78[_0x485bee]!==''?Number(_0x4a8d78[_0x485bee]):0x0;break;case'ARRAYNUM':_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON['parse'](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa[_0x430eb3(0x725)](_0x146cf2=>Number(_0x146cf2));break;case _0x430eb3(0xad4):_0x3666c4=_0x4a8d78[_0x485bee]!==''?eval(_0x4a8d78[_0x485bee]):null;break;case _0x430eb3(0x8da):_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON['parse'](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa['map'](_0x54acc1=>eval(_0x54acc1));break;case _0x430eb3(0xbce):_0x3666c4=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):'';break;case _0x430eb3(0x7d7):_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa[_0x430eb3(0x725)](_0x405d75=>JSON[_0x430eb3(0x771)](_0x405d75));break;case'FUNC':_0x3666c4=_0x4a8d78[_0x485bee]!==''?new Function(JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee])):new Function(_0x430eb3(0x8e3));break;case _0x430eb3(0xa28):_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa['map'](_0x3273c6=>new Function(JSON['parse'](_0x3273c6)));break;case _0x430eb3(0xd22):_0x3666c4=_0x4a8d78[_0x485bee]!==''?String(_0x4a8d78[_0x485bee]):'';break;case _0x430eb3(0x7e8):_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa[_0x430eb3(0x725)](_0x5b4e64=>String(_0x5b4e64));break;case _0x430eb3(0x39e):_0x14df96=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):{},_0x2a8ed9[_0x1ad7cb]={},VisuMZ[_0x430eb3(0x47c)](_0x2a8ed9[_0x1ad7cb],_0x14df96);continue;case _0x430eb3(0xc21):_0x3ee7fa=_0x4a8d78[_0x485bee]!==''?JSON[_0x430eb3(0x771)](_0x4a8d78[_0x485bee]):[],_0x3666c4=_0x3ee7fa[_0x430eb3(0x725)](_0x310222=>VisuMZ[_0x430eb3(0x47c)]({},JSON[_0x430eb3(0x771)](_0x310222)));break;default:continue;}_0x2a8ed9[_0x1ad7cb]=_0x3666c4;}else{const _0x1f6b76=_0x24ea1d[_0x430eb3(0x32d)],_0x3c01f2=_0x430eb3(0x29e);this[_0x430eb3(0x15e)](_0x1f6b76,_0x3c01f2);}}}else _0x3f6c63[_0x430eb3(0xce2)][_0x430eb3(0xd88)][_0x430eb3(0x2d7)](this),this['attachSpritesToDistortionSprite']();}return _0x2a8ed9;},(_0x35edfe=>{const _0x5757c0=_0x1e608f,_0x2c6002=_0x35edfe[_0x5757c0(0x6aa)];for(const _0x19f9e6 of dependencies){if(!Imported[_0x19f9e6]){alert(_0x5757c0(0x9db)['format'](_0x2c6002,_0x19f9e6)),SceneManager[_0x5757c0(0x3ea)]();break;}}const _0x36c401=_0x35edfe['description'];if(_0x36c401[_0x5757c0(0x97b)](/\[Version[ ](.*?)\]/i)){if(_0x5757c0(0x782)===_0x5757c0(0x782)){const _0x362830=Number(RegExp['$1']);_0x362830!==VisuMZ[label]['version']&&(alert(_0x5757c0(0xafd)[_0x5757c0(0x92f)](_0x2c6002,_0x362830)),SceneManager[_0x5757c0(0x3ea)]());}else _0x52483f[_0x5757c0(0x798)]&&_0x5ba2dd[_0x5757c0(0x798)]();}if(_0x36c401['match'](/\[Tier[ ](\d+)\]/i)){const _0x58748a=Number(RegExp['$1']);_0x58748a<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x5757c0(0x92f)](_0x2c6002,_0x58748a,tier)),SceneManager['exit']()):tier=Math[_0x5757c0(0x127)](_0x58748a,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x5757c0(0x4a9)],_0x35edfe[_0x5757c0(0x54c)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x50cfb2){const _0x437b3e=_0x1e608f;let _0x513e00=[];for(const _0x37e11b of _0x50cfb2){'LOjir'===_0x437b3e(0xa8b)?_0x260c94[_0x437b3e(0xcdf)]():_0x513e00=_0x513e00[_0x437b3e(0xbe2)](VisuMZ[_0x437b3e(0xd63)](_0x37e11b));}return _0x513e00[_0x437b3e(0x9f1)](_0x6b2aea=>_0x6b2aea);},VisuMZ['ConvertActionSequenceTarget']=function(_0x10f2ad){const _0x3a9033=_0x1e608f,_0x1a2d3c=BattleManager[_0x3a9033(0xcca)]()[_0x3a9033(0x9f1)](_0x1b418f=>_0x1b418f&&_0x1b418f[_0x3a9033(0x5d6)]()),_0x190345=BattleManager[_0x3a9033(0x7cb)],_0x1014b3=BattleManager[_0x3a9033(0xa40)],_0x5b2498=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x3a9033(0xc06)](0x0):_0x1a2d3c;_0x10f2ad=_0x10f2ad[_0x3a9033(0x377)]()['trim']();if(_0x10f2ad==='user')return[_0x190345];else{if(_0x10f2ad==='current\x20target'){if(_0x3a9033(0xb9a)===_0x3a9033(0xa21))this['refresh']();else return[_0x1014b3];}else{if(_0x10f2ad==='prev\x20target'){if(_0x1014b3){if(_0x3a9033(0xb6a)===_0x3a9033(0x219)){if(!_0x49cc4c['isSideView']())return;const _0x400c2d=this[_0x3a9033(0x8dd)]();if(!_0x400c2d)return;if(_0x21dc2f)this[_0x3a9033(0x3c0)](_0x1be9e8+_0x400c2d[_0x3a9033(0x8d8)],_0x1c318e+_0x400c2d[_0x3a9033(0x171)],![]);_0x1119dd+=_0x400c2d['_homeX'],_0x4e1323+=_0x400c2d['_homeY'],_0x400c2d[_0x3a9033(0xcf8)](_0x6952da,_0xa029bf,_0x5ed971,_0x233963),this['_forcedHomeX']=_0xb281cd,this[_0x3a9033(0xa20)]=_0x55157f;}else{const _0x2f4e90=_0x5b2498['indexOf'](_0x1014b3);return _0x2f4e90>=0x0?[_0x5b2498[_0x2f4e90-0x1]||_0x1014b3]:[_0x1014b3];}}}else{if(_0x10f2ad===_0x3a9033(0x527)){if(_0x3a9033(0x437)!=='mwgsw')this['_forcedBattleLayout']=_0x3a9033(0x44e);else{if(_0x1014b3){if(_0x3a9033(0x753)!==_0x3a9033(0xbb4)){const _0x1cda44=_0x5b2498[_0x3a9033(0x8fc)](_0x1014b3);return _0x1cda44>=0x0?[_0x5b2498[_0x1cda44+0x1]||_0x1014b3]:[_0x1014b3];}else _0x23a818*=this[_0x3a9033(0x8b4)]()['pha'];}}}else{if(_0x10f2ad==='all\x20targets'){if(_0x3a9033(0xa8f)!==_0x3a9033(0xa8f))this['applyBattleCoreJS'](_0x3a9033(0xcf4),_0x1fc5b9,0x0,!![]),_0x4290cb[_0x3a9033(0xce2)][_0x3a9033(0x757)][_0x3a9033(0x2d7)](this,_0x5e93ba),this[_0x3a9033(0x488)](_0x3a9033(0xd00),_0x42eb23,this[_0x3a9033(0xd52)]||0x0,!![]),this['applyResultSwitches'](_0x4f54d6);else return _0x5b2498;}else{if(_0x10f2ad===_0x3a9033(0x43a))return[_0x190345][_0x3a9033(0xbe2)](_0x5b2498);else{if(_0x10f2ad===_0x3a9033(0x3d1)){if(_0x3a9033(0xacf)===_0x3a9033(0xacf))return _0x1a2d3c['filter'](_0x524ece=>_0x524ece!==_0x190345&&!_0x5b2498['includes'](_0x524ece)&&_0x524ece['notFocusValid']());else this[_0x3a9033(0x78e)]=_0x38f1ad[_0x3a9033(0x6c2)]>=0x0?0x2:0x3,this['createDigits'](_0x4fd9f7['mpDamage']);}else{if(_0x10f2ad==='special'){if(_0x3a9033(0x53b)!==_0x3a9033(0x53b)){if(this[_0x3a9033(0x4cd)]['length']>0x0){const _0x2ee028=this[_0x3a9033(0x4cd)][_0x3a9033(0x97d)](),_0x2eee9a=_0x2ee028[0x0];return _0x2eee9a[_0x3a9033(0x49d)]=_0x2eee9a[_0x3a9033(0x49d)]||[],_0x2eee9a[_0x3a9033(0x49d)][0x0]=_0x2ee028[0x1],_0x2eee9a;}else return this[_0x3a9033(0x5ba)][_0x3a9033(0x97d)]();}else return[VisuMZ['GetActionSequenceSpecialTarget']()];}else{if(_0x10f2ad[_0x3a9033(0x97b)](/SPECIAL (.*)>/i)){const _0x2add58=String(RegExp['$1'])[_0x3a9033(0x783)](',')['map'](_0x5ccc46=>_0x5ccc46[_0x3a9033(0x2a9)]());return[VisuMZ[_0x3a9033(0x7ac)](_0x2add58)];}}}}}}}}}if(_0x190345){if(_0x10f2ad===_0x3a9033(0x7fe)){if(_0x3a9033(0x5e9)===_0x3a9033(0xd0e))this[_0x3a9033(0x9b0)]=new _0x4ffe9a(),this[_0x3a9033(0x9b0)]['filters']=[new _0x4787aa[(_0x3a9033(0x93b))][(_0x3a9033(0x915))]()],this['_cursorArea'][_0x3a9033(0x5b8)]=new _0x412fb5(),this[_0x3a9033(0x9b0)][_0x3a9033(0xc35)](this[_0x3a9033(0xb60)],this[_0x3a9033(0xb60)]),this[_0x3a9033(0x9a5)](this[_0x3a9033(0x9b0)]);else return _0x190345[_0x3a9033(0x406)]()[_0x3a9033(0x588)]();}else{if(_0x10f2ad===_0x3a9033(0x2aa))return _0x190345[_0x3a9033(0x406)]()[_0x3a9033(0x588)]()[_0x3a9033(0x9f1)](_0x3514a0=>_0x3514a0!==_0x190345);else{if(_0x10f2ad===_0x3a9033(0xca8))return _0x190345['friendsUnit']()['aliveMembers']()[_0x3a9033(0x9f1)](_0x312c20=>_0x312c20!==_0x1014b3);else{if(_0x10f2ad==='dead\x20friends')return _0x190345[_0x3a9033(0x406)]()[_0x3a9033(0x79c)]();else{if(_0x10f2ad['match'](/FRIEND INDEX (\d+)/i)){const _0xf5df9c=Number(RegExp['$1']);return[_0x190345[_0x3a9033(0x406)]()[_0x3a9033(0xb81)]()[_0xf5df9c]];}}}}}if(_0x10f2ad==='alive\x20opponents'){if('CYtir'===_0x3a9033(0xc15))return _0x190345[_0x3a9033(0x8a4)]()[_0x3a9033(0x588)]();else{this[_0x3a9033(0x8f5)](_0xf41645)[_0x3a9033(0x97b)](/\\I\[(\d+)\]/i);const _0x2e144c=_0x492cda(_0x5d97d6['$1'])||0x0,_0x1ade15=this[_0x3a9033(0x9c1)](_0x40c150),_0x1f1b7d=_0x1ade15['x']+_0x109a45[_0x3a9033(0x14d)]((_0x1ade15[_0x3a9033(0x78f)]-_0xa35751[_0x3a9033(0x202)])/0x2),_0x5aaecb=_0x1ade15['y']+(_0x1ade15[_0x3a9033(0x96b)]-_0x42378b['iconHeight'])/0x2;this[_0x3a9033(0xc52)](_0x2e144c,_0x1f1b7d,_0x5aaecb);}}else{if(_0x10f2ad==='alive\x20opponents\x20not\x20target')return _0x190345[_0x3a9033(0x8a4)]()[_0x3a9033(0x588)]()[_0x3a9033(0x9f1)](_0x4baba4=>_0x4baba4!==_0x1014b3);else{if(_0x10f2ad===_0x3a9033(0x88b)){if('mUkkI'!=='VqHBI')return _0x190345[_0x3a9033(0x8a4)]()['deadMembers']();else this['subject']()&&this[_0x3a9033(0x8b4)]()['canAttack']()?_0xe56721[_0x3a9033(0xce2)][_0x3a9033(0xa1c)][_0x3a9033(0x2d7)](this):this['clear']();}else{if(_0x10f2ad[_0x3a9033(0x97b)](/OPPONENT INDEX (\d+)/i)){const _0x1987e0=Number(RegExp['$1']);return[_0x190345[_0x3a9033(0x8a4)]()['members']()[_0x1987e0]];}}}}}if(_0x10f2ad===_0x3a9033(0xcdc))return $gameParty['aliveMembers']();else{if(_0x10f2ad===_0x3a9033(0xa84))return $gameParty['aliveMembers']()[_0x3a9033(0x9f1)](_0x2acb81=>_0x2acb81!==_0x190345);else{if(_0x10f2ad===_0x3a9033(0x4fa)){if(_0x3a9033(0x94c)!==_0x3a9033(0x4d4))return $gameParty[_0x3a9033(0x588)]()[_0x3a9033(0x9f1)](_0x3d1b68=>_0x3d1b68!==_0x1014b3);else this['_currentAngle']=_0x57b90d,this[_0x3a9033(0x2c7)]&&(this[_0x3a9033(0xbd5)]=0x0,this[_0x3a9033(0x7b7)]=0x0);}else{if(_0x10f2ad==='dead\x20actors')return $gameParty[_0x3a9033(0x79c)]();else{if(_0x10f2ad[_0x3a9033(0x97b)](/ACTOR INDEX (\d+)/i)){if(_0x3a9033(0xc2e)==='BzJXg'){const _0x1e014c=_0x1193d6[_0x3a9033(0x89b)],_0x3608c1=_0x2bf50d['x'],_0x48d632=_0x4e49ad['y'],_0x25d69f=new _0x3eb209(_0x1e014c,_0x3608c1,_0x48d632);_0x4e24a3[_0x3a9033(0x4e1)]&&_0x25d69f['hide'](),this[_0x3a9033(0x374)][_0x3a9033(0xb79)](_0x25d69f);}else{const _0x7204df=Number(RegExp['$1']);return[$gameParty[_0x3a9033(0xb81)]()[_0x7204df]];}}else{if(_0x10f2ad[_0x3a9033(0x97b)](/ACTOR ID (\d+)/i)){const _0x51afec=Number(RegExp['$1']);return[$gameActors[_0x3a9033(0x532)](_0x51afec)];}}}}}}if(_0x10f2ad===_0x3a9033(0x9ec))return $gameTroop[_0x3a9033(0x588)]();else{if(_0x10f2ad===_0x3a9033(0xc56))return _0x3a9033(0xb94)!=='tUXwi'?$gameTroop['aliveMembers']()[_0x3a9033(0x9f1)](_0x121074=>_0x121074!==_0x190345):this[_0x3a9033(0x4e2)](_0x1f8301);else{if(_0x10f2ad===_0x3a9033(0x22c))return $gameTroop['aliveMembers']()[_0x3a9033(0x9f1)](_0x15e0b5=>_0x15e0b5!==_0x1014b3);else{if(_0x10f2ad===_0x3a9033(0x18b))return $gameTroop[_0x3a9033(0x79c)]();else{if(_0x10f2ad['match'](/ENEMY INDEX (\d+)/i)){const _0x15a5c8=Number(RegExp['$1']);return[$gameTroop[_0x3a9033(0xb81)]()[_0x15a5c8]];}else{if(_0x10f2ad[_0x3a9033(0x97b)](/ENEMY ID (\d+)/i)){if('DaxtP'!==_0x3a9033(0x130)){const _0x39374b=Number(RegExp['$1']);return $gameTroop[_0x3a9033(0x588)]()[_0x3a9033(0x9f1)](_0x5137f7=>_0x5137f7['enemyId']()===_0x39374b);}else _0x57710a[_0x3a9033(0xce2)]['Window_BattleLog_performDamage'][_0x3a9033(0x2d7)](this,_0x322f38),this[_0x3a9033(0xd30)]();}}}}}}if(_0x10f2ad===_0x3a9033(0xc17))return _0x1a2d3c[_0x3a9033(0x9f1)](_0x2147b0=>_0x2147b0[_0x3a9033(0x205)]());else{if(_0x10f2ad===_0x3a9033(0x7e2))return _0x1a2d3c['filter'](_0xa7b0b9=>_0xa7b0b9['isAlive']()&&_0xa7b0b9!==_0x190345);else{if(_0x10f2ad==='alive\x20battlers\x20not\x20target')return _0x1a2d3c[_0x3a9033(0x9f1)](_0x50b9e6=>_0x50b9e6[_0x3a9033(0x205)]()&&_0x50b9e6!==_0x1014b3);else{if(_0x10f2ad===_0x3a9033(0x72e))return _0x1a2d3c[_0x3a9033(0x9f1)](_0x351a80=>_0x351a80[_0x3a9033(0xbdc)]());}}}return[];},VisuMZ[_0x1e608f(0xc53)]=function(){const _0x229491=_0x1e608f;return BattleManager[_0x229491(0xa40)];},VisuMZ[_0x1e608f(0x7ac)]=function(_0x37533d){const _0x2f13b1=_0x1e608f;return BattleManager[_0x2f13b1(0xa40)];},PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x785),_0x1fcf0f=>{const _0x11b9db=_0x1e608f;if(!SceneManager[_0x11b9db(0x5f2)]())return;VisuMZ[_0x11b9db(0x47c)](_0x1fcf0f,_0x1fcf0f);const _0x5ab9c0=$gameTemp[_0x11b9db(0x68b)](),_0x4c7a01=BattleManager['_action'],_0x4842f7=BattleManager[_0x11b9db(0x7cb)],_0x5024a0=BattleManager[_0x11b9db(0x8b7)]?BattleManager[_0x11b9db(0x8b7)][_0x11b9db(0xc06)](0x0):[],_0x2ecccd=BattleManager[_0x11b9db(0xa66)];if(!_0x5ab9c0||!_0x4c7a01||!_0x4842f7)return;if(!_0x4c7a01[_0x11b9db(0xa0b)]())return;if(_0x1fcf0f[_0x11b9db(0x7c4)])_0x2ecccd[_0x11b9db(0xa22)](_0x4842f7,_0x4c7a01[_0x11b9db(0xa0b)]());if(_0x1fcf0f[_0x11b9db(0x1b9)]){if(_0x11b9db(0x1ff)!==_0x11b9db(0x1ff)){if(_0x58ce07['_autoBattle'])return![];return _0x3e7f04[_0x11b9db(0xce2)][_0x11b9db(0x4a9)]['Enemy'][_0x11b9db(0x690)];}else _0x2ecccd[_0x11b9db(0xb79)](_0x11b9db(0x4c9),_0x4842f7,_0x5024a0,!![]);}if(_0x1fcf0f[_0x11b9db(0x1af)])_0x2ecccd['push'](_0x11b9db(0x834),_0x4842f7,_0x4c7a01);if(_0x1fcf0f[_0x11b9db(0xb7f)])_0x2ecccd[_0x11b9db(0xb79)]('waitForMovement');if(_0x1fcf0f[_0x11b9db(0x973)])_0x2ecccd[_0x11b9db(0xb79)]('performCastAnimation',_0x4842f7,_0x4c7a01);if(_0x1fcf0f['WaitForAnimation'])_0x2ecccd[_0x11b9db(0xb79)](_0x11b9db(0xce4));_0x5ab9c0[_0x11b9db(0x7b2)](_0x11b9db(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xcc5),_0x5bd6a9=>{const _0x3b5d6e=_0x1e608f;if(!SceneManager[_0x3b5d6e(0x5f2)]())return;VisuMZ[_0x3b5d6e(0x47c)](_0x5bd6a9,_0x5bd6a9);const _0x3bb8a7=$gameTemp['getLastPluginCommandInterpreter'](),_0x3a5db3=BattleManager['_action'],_0x54c935=BattleManager[_0x3b5d6e(0x7cb)],_0x9d10cb=BattleManager[_0x3b5d6e(0x8b7)]?BattleManager[_0x3b5d6e(0x8b7)][_0x3b5d6e(0xc06)](0x0):[],_0x3b2108=BattleManager[_0x3b5d6e(0xa66)],_0x3bcb46=_0x5bd6a9['DualWield']??![];if(!_0x3bb8a7||!_0x3a5db3||!_0x54c935)return;if(!_0x3a5db3[_0x3b5d6e(0xa0b)]())return;let _0x3d38a6=_0x3bcb46?_0x3b2108[_0x3b5d6e(0x1e4)](_0x54c935):0x1;for(let _0x2bdf8e=0x0;_0x2bdf8e<_0x3d38a6;_0x2bdf8e++){_0x3bcb46&&_0x54c935[_0x3b5d6e(0x28c)]()&&_0x3b2108[_0x3b5d6e(0xb79)](_0x3b5d6e(0xaa8),_0x54c935,_0x2bdf8e);if(_0x5bd6a9['PerformAction'])_0x3b2108[_0x3b5d6e(0xb79)](_0x3b5d6e(0x695),_0x54c935,_0x3a5db3);if(_0x5bd6a9[_0x3b5d6e(0x6ef)]>0x0)_0x3b2108['push']('waitCount',_0x5bd6a9[_0x3b5d6e(0x6ef)]);if(_0x5bd6a9['ActionAnimation'])_0x3b2108['push'](_0x3b5d6e(0xbc2),_0x54c935,_0x9d10cb,_0x3a5db3[_0x3b5d6e(0xa0b)]()['animationId']);if(_0x5bd6a9[_0x3b5d6e(0xbae)])_0x3b2108['push'](_0x3b5d6e(0xce4));for(const _0x30e135 of _0x9d10cb){if(!_0x30e135)continue;if(_0x5bd6a9[_0x3b5d6e(0xcb2)])_0x3b2108['push'](_0x3b5d6e(0xc63),_0x54c935,_0x30e135);}}_0x3bcb46&&_0x54c935[_0x3b5d6e(0x28c)]()&&_0x3b2108['push'](_0x3b5d6e(0x3a9),_0x54c935);if(_0x5bd6a9[_0x3b5d6e(0x1b9)])_0x3b2108[_0x3b5d6e(0xb79)](_0x3b5d6e(0x4c9),_0x54c935,_0x9d10cb,![]);_0x3bb8a7[_0x3b5d6e(0x7b2)](_0x3b5d6e(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Set_TargetActionSet',_0x529399=>{const _0xdf2807=_0x1e608f;if(!SceneManager[_0xdf2807(0x5f2)]())return;VisuMZ[_0xdf2807(0x47c)](_0x529399,_0x529399);const _0xbed0f1=$gameTemp[_0xdf2807(0x68b)](),_0x50da55=BattleManager[_0xdf2807(0xa4d)],_0x14d445=BattleManager[_0xdf2807(0x7cb)],_0x3082d1=BattleManager['_allTargets']?BattleManager[_0xdf2807(0x8b7)]['slice'](0x0):[],_0x5f325e=BattleManager['_logWindow'],_0x5bacd4=_0x529399[_0xdf2807(0x905)]??![];if(!_0xbed0f1||!_0x50da55||!_0x14d445)return;if(!_0x50da55['item']())return;let _0x3fac14=_0x5bacd4?_0x5f325e['getDualWieldTimes'](_0x14d445):0x1;for(let _0x19b278=0x0;_0x19b278<_0x3fac14;_0x19b278++){if(_0xdf2807(0x420)!==_0xdf2807(0x420))_0x2f7608=_0x4eb74f['CastCertain'];else for(const _0x57dbc1 of _0x3082d1){if(!_0x57dbc1)continue;_0x5bacd4&&_0x14d445[_0xdf2807(0x28c)]()&&_0x5f325e[_0xdf2807(0xb79)](_0xdf2807(0xaa8),_0x14d445,_0x19b278);if(_0x529399[_0xdf2807(0x544)])_0x5f325e['push'](_0xdf2807(0x695),_0x14d445,_0x50da55);if(_0x529399[_0xdf2807(0x2a3)]>0x0)_0x5f325e[_0xdf2807(0xb79)]('waitCount',_0x529399[_0xdf2807(0x2a3)]);if(_0x529399['ActionAnimation'])_0x5f325e[_0xdf2807(0xb79)](_0xdf2807(0xbc2),_0x14d445,[_0x57dbc1],_0x50da55[_0xdf2807(0xa0b)]()[_0xdf2807(0x6d2)]);if(_0x529399['WaitCount2']>0x0)_0x5f325e[_0xdf2807(0xb79)]('waitCount',_0x529399['WaitCount2']);if(_0x529399[_0xdf2807(0xcb2)])_0x5f325e[_0xdf2807(0xb79)](_0xdf2807(0xc63),_0x14d445,_0x57dbc1);}}if(_0x5bacd4&&_0x14d445[_0xdf2807(0x28c)]()){if('UOQAg'!==_0xdf2807(0x81a))_0x5f325e[_0xdf2807(0xb79)](_0xdf2807(0x3a9),_0x14d445);else{if(!_0x4309ed[_0xdf2807(0xbe1)][_0xdf2807(0x12b)][_0xdf2807(0x2d7)](this,_0x52b0f8))return!![];if(!_0x5e4402[_0xdf2807(0xbe1)][_0xdf2807(0x844)][_0xdf2807(0x2d7)](this,_0x46e80d))return!![];if(!_0xd650e0[_0xdf2807(0xbe1)][_0xdf2807(0x625)][_0xdf2807(0x2d7)](this,_0x57fa2b))return!![];}}if(_0x529399[_0xdf2807(0x1b9)])_0x5f325e[_0xdf2807(0xb79)](_0xdf2807(0x4c9),_0x14d445,_0x3082d1,![]);_0xbed0f1[_0xdf2807(0x7b2)]('battlelog');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Set_FinishAction',_0x3895bb=>{const _0x2848d4=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3895bb,_0x3895bb);const _0x5633c5=$gameTemp[_0x2848d4(0x68b)](),_0x4e6daf=BattleManager[_0x2848d4(0xa4d)],_0x369266=BattleManager[_0x2848d4(0x7cb)],_0x186a82=BattleManager[_0x2848d4(0x8b7)]?BattleManager[_0x2848d4(0x8b7)][_0x2848d4(0xc06)](0x0):[],_0x10a3ee=BattleManager['_logWindow'];if(!_0x5633c5||!_0x4e6daf||!_0x369266)return;if(!_0x4e6daf[_0x2848d4(0xa0b)]())return;if(_0x3895bb['ApplyImmortal'])_0x10a3ee[_0x2848d4(0xb79)]('applyImmortal',_0x369266,_0x186a82,![]);if(_0x3895bb['WaitForNewLine'])_0x10a3ee[_0x2848d4(0xb79)](_0x2848d4(0x932));if(_0x3895bb[_0x2848d4(0x292)])_0x10a3ee[_0x2848d4(0xb79)](_0x2848d4(0x381));if(_0x3895bb[_0x2848d4(0x2c8)])_0x10a3ee[_0x2848d4(0xb79)]('clear');if(_0x3895bb[_0x2848d4(0x911)])_0x10a3ee[_0x2848d4(0xb79)](_0x2848d4(0xac4),_0x369266);if(_0x3895bb['WaitForMovement'])_0x10a3ee['push']('waitForMovement');_0x5633c5[_0x2848d4(0x7b2)](_0x2848d4(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x92b),_0x1a2360=>{const _0x2e0afa=_0x1e608f;if(!SceneManager[_0x2e0afa(0x5f2)]())return;if(!Imported[_0x2e0afa(0x6d5)])return;VisuMZ['ConvertParams'](_0x1a2360,_0x1a2360);const _0x29508c=$gameTemp[_0x2e0afa(0x68b)](),_0x457779=_0x1a2360[_0x2e0afa(0x5b7)];if(!_0x29508c)return;$gameScreen[_0x2e0afa(0x2d6)](_0x1a2360[_0x2e0afa(0xa93)],_0x1a2360[_0x2e0afa(0x39d)],_0x1a2360[_0x2e0afa(0x9a8)]);if(_0x457779)_0x29508c[_0x2e0afa(0x7b2)](_0x2e0afa(0x5d0));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xcd4),_0x1fe302=>{const _0x4d58f4=_0x1e608f;if(!SceneManager[_0x4d58f4(0x5f2)]())return;if(!Imported[_0x4d58f4(0x6d5)])return;VisuMZ[_0x4d58f4(0x47c)](_0x1fe302,_0x1fe302);const _0x27c548=$gameTemp[_0x4d58f4(0x68b)](),_0x2ef6d6=_0x1fe302[_0x4d58f4(0x5b7)];if(!_0x27c548)return;$gameScreen[_0x4d58f4(0x2d6)](0x0,_0x1fe302['Duration'],_0x1fe302[_0x4d58f4(0x9a8)]);if(_0x2ef6d6)_0x27c548[_0x4d58f4(0x7b2)](_0x4d58f4(0x5d0));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x987),_0x8b4022=>{const _0x48af96=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x48af96(0x6d5)])return;const _0x132a1b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x132a1b)return;_0x132a1b['setWaitMode'](_0x48af96(0x5d0));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x746),_0x11f208=>{const _0xe2ab5=_0x1e608f;if(!SceneManager[_0xe2ab5(0x5f2)]())return;VisuMZ[_0xe2ab5(0x47c)](_0x11f208,_0x11f208);const _0x1db5c9=$gameTemp[_0xe2ab5(0x68b)](),_0x439cbc=BattleManager[_0xe2ab5(0xa4d)],_0xe07ff4=BattleManager['_subject'],_0x34b664=VisuMZ[_0xe2ab5(0x599)](_0x11f208[_0xe2ab5(0x6d6)]),_0x2653c8=_0x11f208[_0xe2ab5(0x9af)],_0xd1be8d=BattleManager[_0xe2ab5(0xa66)];if(!_0x1db5c9||!_0x439cbc||!_0xe07ff4)return;if(!_0x439cbc[_0xe2ab5(0xa0b)]())return;let _0x13477d=_0x439cbc[_0xe2ab5(0xa0b)]()['animationId'];if(_0x13477d<0x0)_0x13477d=_0xe07ff4[_0xe2ab5(0x881)]();$gameTemp[_0xe2ab5(0x156)](_0x34b664,_0x13477d,_0x2653c8);if(_0x11f208[_0xe2ab5(0xbae)]){if('PmWNM'!==_0xe2ab5(0x8d9))_0x1db5c9[_0xe2ab5(0x7b2)](_0xe2ab5(0xc2a));else{const _0xf96fb7=this[_0xe2ab5(0x784)]();_0x4051f6=_0xf96fb7[_0x2301d2]?_0xf96fb7[_0x214150][_0xe2ab5(0xb9c)]:0x0;}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x1a6),_0x1c16c9=>{const _0x5b6b85=_0x1e608f;if(!SceneManager[_0x5b6b85(0x5f2)]())return;VisuMZ['ConvertParams'](_0x1c16c9,_0x1c16c9);const _0x4a204d=$gameTemp[_0x5b6b85(0x68b)](),_0x52ebab=BattleManager[_0x5b6b85(0x7cb)],_0x3cb770=VisuMZ[_0x5b6b85(0x599)](_0x1c16c9[_0x5b6b85(0x6d6)]),_0x57a98d=_0x1c16c9[_0x5b6b85(0x9af)],_0x2768b8=BattleManager[_0x5b6b85(0xa66)];if(!_0x4a204d||!_0x52ebab)return;const _0x4cb68a=_0x52ebab[_0x5b6b85(0x881)]();$gameTemp[_0x5b6b85(0x156)](_0x3cb770,_0x4cb68a,_0x57a98d),_0x1c16c9[_0x5b6b85(0xbae)]&&_0x4a204d[_0x5b6b85(0x7b2)](_0x5b6b85(0xc2a));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x241),_0x1c4d9e=>{const _0x59ecd0=_0x1e608f;if(!SceneManager[_0x59ecd0(0x5f2)]())return;VisuMZ[_0x59ecd0(0x47c)](_0x1c4d9e,_0x1c4d9e);const _0x29b346=_0x516119[_0x59ecd0(0x55b)](_0x1c4d9e[_0x59ecd0(0x64a)]);if(_0x29b346<=0x0)return;const _0x89ca22=$gameTemp['getLastPluginCommandInterpreter'](),_0x516119=BattleManager[_0x59ecd0(0x7cb)],_0x5dfe90=VisuMZ[_0x59ecd0(0x599)](_0x1c4d9e[_0x59ecd0(0x6d6)]),_0x487491=_0x1c4d9e['Mirror'],_0x5ee6d0=BattleManager['_logWindow'];if(!_0x89ca22||!_0x516119)return;$gameTemp[_0x59ecd0(0x156)](_0x5dfe90,_0x29b346,_0x487491);if(_0x1c4d9e['WaitForAnimation']){if(_0x59ecd0(0x1d8)===_0x59ecd0(0x1d8))_0x89ca22[_0x59ecd0(0x7b2)]('battleAnimation');else{if(_0x5ed271['_autoBattle']&&!_0x1d8582['autoBattleUseSkills'])return this[_0x59ecd0(0x5cb)]();else{return _0x3d82f6[_0x59ecd0(0xce2)]['Game_Actor_makeActionList'][_0x59ecd0(0x2d7)](this);;}}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Animation_BalloonAnimation',_0x4d82e3=>{const _0x2d22f0=_0x1e608f;if(!SceneManager[_0x2d22f0(0x5f2)]())return;VisuMZ[_0x2d22f0(0x47c)](_0x4d82e3,_0x4d82e3);const _0x218092=$gameTemp[_0x2d22f0(0x68b)](),_0x5ba51e=VisuMZ[_0x2d22f0(0x599)](_0x4d82e3[_0x2d22f0(0x6d6)]),_0x31a88d=_0x4d82e3[_0x2d22f0(0x28e)];let _0x4bf33f=0x0;switch(_0x31a88d['toUpperCase']()[_0x2d22f0(0x2a9)]()){case'!':case'EXCLAMATION':_0x4bf33f=0x1;break;case'?':case'QUESTION':_0x4bf33f=0x2;break;case _0x2d22f0(0x1ca):case _0x2d22f0(0x5f7):case _0x2d22f0(0xa75):case _0x2d22f0(0x119):case _0x2d22f0(0xc34):_0x4bf33f=0x3;break;case _0x2d22f0(0x3c5):case _0x2d22f0(0xa26):_0x4bf33f=0x4;break;case _0x2d22f0(0x9d3):_0x4bf33f=0x5;break;case _0x2d22f0(0x591):_0x4bf33f=0x6;break;case _0x2d22f0(0xd16):case _0x2d22f0(0xabe):case _0x2d22f0(0x3f9):_0x4bf33f=0x7;break;case _0x2d22f0(0x633):case'...':_0x4bf33f=0x8;break;case _0x2d22f0(0x703):case'BULB':case _0x2d22f0(0x5f1):case _0x2d22f0(0xd19):case'LIGHTBULB':_0x4bf33f=0x9;break;case'Z':case'ZZ':case _0x2d22f0(0xc97):case _0x2d22f0(0x1ef):_0x4bf33f=0xa;break;case'USER-DEFINED\x201':_0x4bf33f=0xb;break;case _0x2d22f0(0x5ab):_0x4bf33f=0xc;break;case _0x2d22f0(0x287):_0x4bf33f=0xd;break;case _0x2d22f0(0x62b):_0x4bf33f=0xe;break;case'USER-DEFINED\x205':_0x4bf33f=0xf;break;}for(const _0x460d83 of _0x5ba51e){if(!_0x460d83)continue;$gameTemp[_0x2d22f0(0x320)](_0x460d83,_0x4bf33f);}_0x4d82e3[_0x2d22f0(0x976)]&&_0x218092&&(_0x218092[_0x2d22f0(0x380)](0x1),_0x218092[_0x2d22f0(0x7b2)](_0x2d22f0(0x3c1)));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xcee),_0x285e08=>{const _0x25fda9=_0x1e608f;if(!SceneManager[_0x25fda9(0x5f2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x25fda9(0x47c)](_0x285e08,_0x285e08);const _0x20ffd3=$gameTemp[_0x25fda9(0x68b)](),_0x37e7e3=VisuMZ[_0x25fda9(0x599)](_0x285e08[_0x25fda9(0x6d6)]),_0x9891=_0x285e08[_0x25fda9(0x3ac)];for(const _0x4171f8 of _0x37e7e3){if(!_0x4171f8)continue;$gameTemp['requestBattleBalloon'](_0x4171f8,[_0x9891]);}if(_0x285e08[_0x25fda9(0x976)]&&_0x20ffd3){if(_0x25fda9(0x516)===_0x25fda9(0x516))_0x20ffd3[_0x25fda9(0x380)](0x1),_0x20ffd3[_0x25fda9(0x7b2)](_0x25fda9(0x3c1));else return this['skillItemWindowRectBorderStyle']();}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xd55),_0x14805d=>{const _0x41ce87=_0x1e608f;if(!SceneManager[_0x41ce87(0x5f2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x41ce87(0x47c)](_0x14805d,_0x14805d);const _0x593510=$gameTemp[_0x41ce87(0x68b)](),_0x4c210d=VisuMZ[_0x41ce87(0x599)](_0x14805d[_0x41ce87(0x6d6)]),_0x8712f4=Math[_0x41ce87(0xb27)](Number(_0x14805d[_0x41ce87(0xc7e)]||0x0),Number(_0x14805d[_0x41ce87(0x3c6)]||0x0)),_0x4fba53=Math['max'](Number(_0x14805d[_0x41ce87(0xc7e)]||0x0),Number(_0x14805d[_0x41ce87(0x3c6)]||0x0)),_0x4e1d50=[];for(let _0x24113a=_0x8712f4;_0x24113a<=_0x4fba53;_0x24113a++){_0x4e1d50[_0x41ce87(0xb79)](_0x24113a);}for(const _0x35bfa0 of _0x4c210d){if(_0x41ce87(0x6ea)===_0x41ce87(0x6ea)){if(!_0x35bfa0)continue;$gameTemp[_0x41ce87(0x320)](_0x35bfa0,_0x4e1d50);}else{const _0x7c77af=_0x572b65['actor']();if(_0x7c77af&&_0x7c77af[_0x41ce87(0x8dd)])_0x7c77af[_0x41ce87(0x8dd)]()[_0x41ce87(0x56f)]();_0x3c9133[_0x41ce87(0xce2)][_0x41ce87(0x68a)]['call'](this);}}_0x14805d[_0x41ce87(0x976)]&&_0x593510&&(_0x593510[_0x41ce87(0x380)](0x1),_0x593510[_0x41ce87(0x7b2)](_0x41ce87(0x3c1)));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa29),_0x2a79b8=>{const _0x3d9c57=_0x1e608f;if(!SceneManager[_0x3d9c57(0x5f2)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x3d9c57(0x47c)](_0x2a79b8,_0x2a79b8);const _0x111808=$gameTemp[_0x3d9c57(0x68b)](),_0x26f867=VisuMZ[_0x3d9c57(0x599)](_0x2a79b8[_0x3d9c57(0x6d6)]),_0x51537f=_0x2a79b8[_0x3d9c57(0x9c4)];for(const _0x507f69 of _0x26f867){if(!_0x507f69)continue;$gameTemp[_0x3d9c57(0x320)](_0x507f69,_0x51537f);}_0x2a79b8['WaitComplete']&&_0x111808&&(_0x111808['wait'](0x1),_0x111808['setWaitMode'](_0x3d9c57(0x3c1)));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x185),_0x4e982c=>{const _0x41539f=_0x1e608f;if(!SceneManager[_0x41539f(0x5f2)]())return;VisuMZ[_0x41539f(0x47c)](_0x4e982c,_0x4e982c);const _0x2c4fa2=$gameTemp['getLastPluginCommandInterpreter'](),_0x197681=BattleManager[_0x41539f(0xa4d)],_0x1f144a=_0x4e982c[_0x41539f(0x9af)],_0x877c24=VisuMZ[_0x41539f(0x599)](_0x4e982c[_0x41539f(0x6d6)]);if(!_0x2c4fa2||!_0x197681)return;if(!_0x197681['item']())return;for(const _0x587185 of _0x877c24){if(!_0x587185)continue;_0x587185[_0x41539f(0x91c)](_0x197681,_0x1f144a);}if(_0x4e982c['WaitForAnimation'])_0x2c4fa2[_0x41539f(0x7b2)](_0x41539f(0xc2a));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x445),_0x28a40e=>{const _0x52c135=_0x1e608f;VisuMZ[_0x52c135(0x47c)](_0x28a40e,_0x28a40e);const _0x152b3b=$gameTemp[_0x52c135(0x68b)](),_0x48e653=VisuMZ[_0x52c135(0x599)](_0x28a40e[_0x52c135(0x6d6)]),_0x2f9f97=_0x28a40e[_0x52c135(0xc23)];if(!_0x2f9f97)return;for(const _0x502e66 of _0x48e653){if(_0x52c135(0xd3f)!==_0x52c135(0x708)){if(!_0x502e66)continue;if(!_0x502e66['isActor']())continue;_0x502e66['setBattlePortrait'](_0x2f9f97);}else return this[_0x52c135(0xa5d)]&&this[_0x52c135(0xa5d)][_0x52c135(0x300)]();}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xcaa),_0x61405c=>{const _0x56247b=_0x1e608f;if(!SceneManager[_0x56247b(0x5f2)]())return;VisuMZ[_0x56247b(0x47c)](_0x61405c,_0x61405c);const _0x11c4e1=$gameTemp['getLastPluginCommandInterpreter'](),_0x2a8696=BattleManager['_subject'],_0x3f6285=VisuMZ['CreateActionSequenceTargets'](_0x61405c[_0x56247b(0x6d6)]),_0x5a5b8a=_0x61405c[_0x56247b(0x9af)];if(!_0x11c4e1||!_0x2a8696)return;const _0x30e0f2=$dataSkilles[_0x2a8696[_0x56247b(0xade)]()],_0x1966ae=_0x30e0f2['animationId'];$gameTemp[_0x56247b(0x156)](_0x3f6285,_0x1966ae,_0x5a5b8a),_0x61405c[_0x56247b(0xbae)]&&(_0x56247b(0x510)===_0x56247b(0x85e)?_0x564f25['prototype'][_0x56247b(0x387)]['call'](this,_0x513409):_0x11c4e1['setWaitMode']('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x283),_0x5fc50=>{const _0xcfa67b=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5fc50,_0x5fc50);const _0x318a2b=$gameTemp['getLastPluginCommandInterpreter'](),_0x4431d6=VisuMZ[_0xcfa67b(0x599)](_0x5fc50[_0xcfa67b(0x6d6)]),_0x1c36eb=Number(_0x5fc50[_0xcfa67b(0x394)]||0x1),_0x3c64ff=$dataItems[_0x1c36eb],_0x5699f0=_0x5fc50[_0xcfa67b(0x9af)];if(!_0x318a2b)return;if(!_0x3c64ff)return;let _0x414986=_0x3c64ff[_0xcfa67b(0x6d2)];$gameTemp[_0xcfa67b(0x156)](_0x4431d6,_0x414986,_0x5699f0),_0x5fc50['WaitForAnimation']&&_0x318a2b[_0xcfa67b(0x7b2)]('battleAnimation');}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x954),_0x34c1db=>{const _0x27bf13=_0x1e608f;if(!SceneManager['_scene'])return;if(!SceneManager[_0x27bf13(0x327)]['_spriteset'])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x27bf13(0x47c)](_0x34c1db,_0x34c1db);const _0x456384=$gameTemp['getLastPluginCommandInterpreter'](),_0x4ea164=Math[_0x27bf13(0x1a5)](_0x34c1db[_0x27bf13(0x274)]),_0x121164=Math[_0x27bf13(0x1a5)](_0x34c1db['pointY']);$gameTemp[_0x27bf13(0x1d4)](_0x4ea164,_0x121164,_0x34c1db[_0x27bf13(0xb88)],_0x34c1db[_0x27bf13(0x9af)],_0x34c1db['Mute']),_0x34c1db['WaitComplete']&&_0x456384&&('RRyML'!==_0x27bf13(0x8ef)?this[_0x27bf13(0x6c9)]('wait'):(SceneManager[_0x27bf13(0x327)]['_spriteset'][_0x27bf13(0xd80)](),_0x456384[_0x27bf13(0x7b2)](_0x27bf13(0xc2a))));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Animation_ShowAnimation',_0x4836c4=>{const _0x422eab=_0x1e608f;if(!SceneManager[_0x422eab(0x5f2)]())return;VisuMZ[_0x422eab(0x47c)](_0x4836c4,_0x4836c4);const _0x8a24eb=$gameTemp[_0x422eab(0x68b)](),_0x43ea93=VisuMZ[_0x422eab(0x599)](_0x4836c4[_0x422eab(0x6d6)]),_0x2f1a02=_0x4836c4[_0x422eab(0xb88)],_0x13cc4d=_0x4836c4[_0x422eab(0x9af)];if(!_0x8a24eb)return;$gameTemp[_0x422eab(0x156)](_0x43ea93,_0x2f1a02,_0x13cc4d);if(_0x4836c4['WaitForAnimation'])_0x8a24eb[_0x422eab(0x7b2)](_0x422eab(0xc2a));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x818),_0x4a2be6=>{const _0x5baae3=_0x1e608f;if(!SceneManager[_0x5baae3(0x5f2)]())return;VisuMZ[_0x5baae3(0x47c)](_0x4a2be6,_0x4a2be6);const _0x24dad8=$gameTemp[_0x5baae3(0x68b)](),_0x160b52=VisuMZ[_0x5baae3(0x599)](_0x4a2be6[_0x5baae3(0x6d6)]),_0x502289=Number(_0x4a2be6[_0x5baae3(0x769)]||0x1),_0x2149fd=$dataSkills[_0x502289],_0x48f02f=_0x4a2be6['Mirror'];if(!_0x24dad8)return;if(!_0x2149fd)return;let _0x4fae00=_0x2149fd[_0x5baae3(0x6d2)];$gameTemp[_0x5baae3(0x156)](_0x160b52,_0x4fae00,_0x48f02f),_0x4a2be6[_0x5baae3(0xbae)]&&_0x24dad8['setWaitMode'](_0x5baae3(0xc2a));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Animation_WaitForAnimation',_0x49e560=>{const _0x335c3e=_0x1e608f;if(!SceneManager[_0x335c3e(0x5f2)]())return;const _0x2f6638=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2f6638)return;_0x2f6638[_0x335c3e(0x7b2)](_0x335c3e(0xc2a));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_BattleLog_AddText',_0x49c978=>{const _0x4ac917=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4ac917(0x47c)](_0x49c978,_0x49c978);const _0x1e339f=BattleManager[_0x4ac917(0xa66)],_0x261eec=_0x49c978[_0x4ac917(0x5be)]&&Imported[_0x4ac917(0xb6d)];_0x1e339f[_0x4ac917(0xac5)](_0x49c978[_0x4ac917(0x38a)]),_0x261eec&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x4ac917(0x95e)](_0x49c978[_0x4ac917(0x38a)]||'',_0x49c978[_0x4ac917(0x178)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa3a),_0x542cb5=>{const _0x3bead4=_0x1e608f;if(!SceneManager['isSceneBattle']())return;const _0x5446b8=BattleManager[_0x3bead4(0xa66)];_0x5446b8[_0x3bead4(0x639)]();}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x60a),_0x2d7aa6=>{const _0x39bc1a=_0x1e608f;if(!SceneManager[_0x39bc1a(0x5f2)]())return;const _0x1d8010=$gameTemp[_0x39bc1a(0x68b)](),_0x4108e6=BattleManager[_0x39bc1a(0xa4d)],_0x4e91ee=BattleManager['_subject'],_0x34bf8a=BattleManager[_0x39bc1a(0xa66)];if(!_0x1d8010||!_0x4108e6||!_0x4e91ee)return;if(!_0x4108e6[_0x39bc1a(0xa0b)]())return;_0x34bf8a['displayAction'](_0x4e91ee,_0x4108e6['item']()),_0x1d8010[_0x39bc1a(0x7b2)](_0x39bc1a(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xb58),_0x2b0744=>{const _0x28a83f=_0x1e608f;if(!SceneManager[_0x28a83f(0x5f2)]())return;const _0x5abdce=BattleManager[_0x28a83f(0xa66)];_0x5abdce['popBaseLine']();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x72b),_0xc22058=>{const _0x7664c3=_0x1e608f;if(!SceneManager[_0x7664c3(0x5f2)]())return;const _0x3c70be=BattleManager[_0x7664c3(0xa66)];_0x3c70be[_0x7664c3(0x7e7)]();}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_BattleLog_Refresh',_0x2eb51a=>{const _0x1ccbcd=_0x1e608f;if(!SceneManager[_0x1ccbcd(0x5f2)]())return;const _0xcf3e14=BattleManager[_0x1ccbcd(0xa66)];_0xcf3e14['refresh']();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_BattleLog_UI',_0x5dbc4c=>{const _0x6a1d6e=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6a1d6e(0x47c)](_0x5dbc4c,_0x5dbc4c),SceneManager[_0x6a1d6e(0x327)][_0x6a1d6e(0x30f)](_0x5dbc4c['ShowHide']);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa1d),_0x1e3df3=>{const _0xdb832=_0x1e608f;if(!SceneManager[_0xdb832(0x5f2)]())return;const _0x37335c=$gameTemp['getLastPluginCommandInterpreter']();_0x37335c[_0xdb832(0x7b2)](_0xdb832(0xb8d));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x27b),_0x15a9ac=>{const _0xecd279=_0x1e608f;if(!SceneManager[_0xecd279(0x5f2)]())return;const _0x32608a=$gameTemp[_0xecd279(0x68b)](),_0x2a661b=BattleManager[_0xecd279(0xa66)];_0x2a661b[_0xecd279(0x932)](),_0x32608a['setWaitMode'](_0xecd279(0xb8d));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Camera_Clamp',_0x53c1fe=>{const _0x29f1b5=_0x1e608f;if(!SceneManager[_0x29f1b5(0x5f2)]())return;if(!Imported[_0x29f1b5(0x6d5)])return;VisuMZ[_0x29f1b5(0x47c)](_0x53c1fe,_0x53c1fe);const _0xe9c368=$gameScreen[_0x29f1b5(0x84e)]();_0xe9c368['cameraClamp']=_0x53c1fe[_0x29f1b5(0x284)];}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x332),_0x3a1114=>{const _0x1305bd=_0x1e608f;if(!SceneManager[_0x1305bd(0x5f2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1305bd(0x47c)](_0x3a1114,_0x3a1114);const _0x2f5b7f=$gameTemp[_0x1305bd(0x68b)](),_0x2bacdf=_0x3a1114[_0x1305bd(0x752)];$gameScreen['setBattleCameraPoint'](_0x3a1114[_0x1305bd(0x8e0)],_0x3a1114[_0x1305bd(0x235)],_0x3a1114[_0x1305bd(0x39d)],_0x3a1114[_0x1305bd(0x9a8)]);if(_0x2bacdf)_0x2f5b7f[_0x1305bd(0x7b2)](_0x1305bd(0x594));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_FocusTarget',_0x2339b1=>{const _0x5c3d97=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5c3d97(0x6d5)])return;VisuMZ[_0x5c3d97(0x47c)](_0x2339b1,_0x2339b1);const _0x560a88=$gameTemp[_0x5c3d97(0x68b)](),_0xa247fa=VisuMZ[_0x5c3d97(0x599)](_0x2339b1['Targets']),_0x2223e6=_0x2339b1[_0x5c3d97(0x752)];$gameScreen[_0x5c3d97(0x572)](_0xa247fa,_0x2339b1['Duration'],_0x2339b1[_0x5c3d97(0x9a8)]);if(_0x2223e6)_0x560a88[_0x5c3d97(0x7b2)](_0x5c3d97(0x594));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_Offset',_0x145842=>{const _0x56d523=_0x1e608f;if(!SceneManager[_0x56d523(0x5f2)]())return;if(!Imported[_0x56d523(0x6d5)])return;VisuMZ['ConvertParams'](_0x145842,_0x145842);const _0x45a2e3=$gameTemp[_0x56d523(0x68b)](),_0xaefe64=_0x145842[_0x56d523(0x752)];$gameScreen[_0x56d523(0x91f)](_0x145842[_0x56d523(0x4df)],_0x145842['OffsetY'],_0x145842[_0x56d523(0x39d)],_0x145842[_0x56d523(0x9a8)]);if(_0xaefe64)_0x45a2e3['setWaitMode'](_0x56d523(0x594));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x33a),_0x2677b8=>{const _0x5e96b7=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e96b7(0x6d5)])return;VisuMZ['ConvertParams'](_0x2677b8,_0x2677b8);const _0x1600f5=$gameTemp[_0x5e96b7(0x68b)](),_0x568995=_0x2677b8[_0x5e96b7(0x29f)],_0x3615e6=_0x2677b8['ResetOffset'],_0x449d21=_0x2677b8['WaitForCamera'];if(_0x568995){const _0x3ee347=Math[_0x5e96b7(0x1a5)](Graphics[_0x5e96b7(0x78f)]/0x2),_0x4e33c3=Math[_0x5e96b7(0x1a5)](Graphics[_0x5e96b7(0x96b)]/0x2);$gameScreen[_0x5e96b7(0x58f)](_0x3ee347,_0x4e33c3,_0x2677b8['Duration'],_0x2677b8[_0x5e96b7(0x9a8)]);}_0x3615e6&&$gameScreen[_0x5e96b7(0x91f)](0x0,0x0,_0x2677b8[_0x5e96b7(0x39d)],_0x2677b8[_0x5e96b7(0x9a8)]);if(_0x449d21)_0x1600f5[_0x5e96b7(0x7b2)](_0x5e96b7(0x594));}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0xc84),_0x4ce4db=>{const _0x46e6c0=_0x1e608f;if(!SceneManager[_0x46e6c0(0x5f2)]())return;if(!Imported[_0x46e6c0(0x6d5)])return;const _0x50f715=$gameTemp[_0x46e6c0(0x68b)]();if(!_0x50f715)return;_0x50f715['setWaitMode'](_0x46e6c0(0x594));}),VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb19)]=function(_0x290152){const _0x24ffba=_0x1e608f;_0x290152['portraitFilename']='';const _0xfbb919=VisuMZ[_0x24ffba(0x651)][_0x24ffba(0xb19)](_0x290152),_0x57d9f9=VisuMZ[_0x24ffba(0x599)](_0x290152[_0x24ffba(0x6d6)])[0x0]||null;if(_0x57d9f9){_0xfbb919[_0x24ffba(0xa3c)]=_0x57d9f9[_0x24ffba(0x39f)](),_0xfbb919[_0x24ffba(0x6d3)]=_0x57d9f9[_0x24ffba(0xa95)](),_0xfbb919[_0x24ffba(0x559)]=_0x57d9f9[_0x24ffba(0xa7a)](),_0xfbb919[_0x24ffba(0x1b7)]=_0x57d9f9[_0x24ffba(0x8b5)]();if(_0x57d9f9[_0x24ffba(0xbab)]()){_0x57d9f9[_0x24ffba(0x3ce)]()&&(_0xfbb919[_0x24ffba(0x81e)]=!_0xfbb919[_0x24ffba(0x81e)]);_0x57d9f9['flipVisualCutinVert']()&&(_0xfbb919[_0x24ffba(0xbdd)]=!_0xfbb919[_0x24ffba(0xbdd)]);_0xfbb919['portraitType']===_0x24ffba(0x434)&&(_0xfbb919[_0x24ffba(0x81e)]=!_0xfbb919['portraitFlipHorz']);if(_0x290152[_0x24ffba(0x9cd)][_0x24ffba(0x542)]){if(_0x24ffba(0x70a)===_0x24ffba(0x70a))_0xfbb919[_0x24ffba(0xcc6)]*=-0x1;else{if(_0x4f71d6[_0x24ffba(0xce2)]['Settings'][_0x24ffba(0x151)]['ReflectPlayback']){const _0x285390=_0x38f7c4[_0x24ffba(0xa0b)]();this[_0x24ffba(0xb79)](_0x24ffba(0xbc2),_0x496633,[_0x3dfd09],_0x285390['animationId']);}}}_0x290152[_0x24ffba(0x9cd)][_0x24ffba(0xa97)]&&(_0xfbb919[_0x24ffba(0x56c)]*=-0x1),_0xfbb919[_0x24ffba(0x894)]+=_0x290152[_0x24ffba(0x9cd)][_0x24ffba(0x9eb)]??0x0;}}return _0xfbb919;},PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x1c2),_0x52ac84=>{const _0x2c938e=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2c938e(0x14f)])return;VisuMZ[_0x2c938e(0x47c)](_0x52ac84,_0x52ac84);const _0x2576e7=VisuMZ[_0x2c938e(0xce2)]['CreateCutinSettings'](_0x52ac84);SceneManager[_0x2c938e(0x327)][_0x2c938e(0xa83)](_0x2576e7);const _0x569a28=$gameTemp[_0x2c938e(0x68b)]();if(_0x569a28&&_0x52ac84['WaitForEntrance']){if(_0x2c938e(0x89f)===_0x2c938e(0x89f))_0x569a28['setWaitMode'](_0x2c938e(0x975));else return _0x4c90dc[_0x2c938e(0xce2)]['Game_Action_isForDeadFriend'][_0x2c938e(0x2d7)](this);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x2c3),_0x5676d5=>{const _0x59506f=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x59506f(0x14f)])return;VisuMZ[_0x59506f(0x47c)](_0x5676d5,_0x5676d5),SceneManager[_0x59506f(0x327)]['clearAllVisualCutins']();const _0x597d78=$gameTemp['getLastPluginCommandInterpreter']();if(_0x597d78&&_0x5676d5['WaitForExit']){if('wEPjm'!=='wEPjm')return _0x4a5bec[_0x59506f(0x5f2)]()?(_0xfb47c2[_0x59506f(0x327)][_0x59506f(0x4b1)][_0x59506f(0x557)](_0x3fa853[0x0],_0x1a084c[0x1]),!![]):_0x28708d[_0x59506f(0xce2)][_0x59506f(0xacc)][_0x59506f(0x2d7)](this,_0x577e2a);else _0x597d78[_0x59506f(0x7b2)](_0x59506f(0x8b9));}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x75b),_0x1580cc=>{const _0x5e7c08=_0x1e608f;if(!SceneManager[_0x5e7c08(0x5f2)]())return;if(!Imported[_0x5e7c08(0x14f)])return;VisuMZ[_0x5e7c08(0x47c)](_0x1580cc,_0x1580cc);const _0x30cfa5=_0x1580cc[_0x5e7c08(0x512)]['toLowerCase']()[_0x5e7c08(0x2a9)]();SceneManager[_0x5e7c08(0x327)][_0x5e7c08(0x837)](_0x30cfa5);const _0x394e5f=$gameTemp['getLastPluginCommandInterpreter']();_0x394e5f&&_0x1580cc[_0x5e7c08(0x61e)]&&_0x394e5f[_0x5e7c08(0x7b2)]('cutinExit');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Cutin_WaitForEntrance',_0x36deaf=>{const _0x3b81bd=_0x1e608f;if(!SceneManager[_0x3b81bd(0x5f2)]())return;if(!Imported[_0x3b81bd(0x14f)])return;const _0x4a7dbc=$gameTemp[_0x3b81bd(0x68b)]();_0x4a7dbc[_0x3b81bd(0x7b2)](_0x3b81bd(0x975));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x15d),_0x3b17fe=>{const _0x48aa17=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x48aa17(0x14f)])return;const _0x168852=$gameTemp[_0x48aa17(0x68b)]();_0x168852['setWaitMode'](_0x48aa17(0x8b9));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_DB_DragonbonesMotionAni',_0x4ff21a=>{const _0x1344db=_0x1e608f;if(!SceneManager[_0x1344db(0x5f2)]())return;if(!Imported[_0x1344db(0xc1c)])return;VisuMZ[_0x1344db(0x47c)](_0x4ff21a,_0x4ff21a);const _0x205cf9=VisuMZ[_0x1344db(0x599)](_0x4ff21a['Targets']),_0x472e2f=_0x4ff21a['MotionAni'][_0x1344db(0x377)]()[_0x1344db(0x2a9)]();for(const _0x2bf260 of _0x205cf9){if('VxkuN'===_0x1344db(0xb2b))return _0x11d0df(_0x16f8f4['$1'])*0.01;else{if(!_0x2bf260)continue;_0x2bf260['requestDragonbonesAnimation'](_0x472e2f);}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x3c2),_0x557b55=>{const _0x5a6291=_0x1e608f;if(!SceneManager[_0x5a6291(0x5f2)]())return;if(!Imported[_0x5a6291(0xc1c)])return;VisuMZ[_0x5a6291(0x47c)](_0x557b55,_0x557b55);const _0x51f27a=VisuMZ[_0x5a6291(0x599)](_0x557b55[_0x5a6291(0x6d6)]),_0x2ba634=_0x557b55[_0x5a6291(0x617)];for(const _0x463232 of _0x51f27a){if(!_0x463232)continue;_0x463232['dragonbonesData']()[_0x5a6291(0x923)]=_0x2ba634;}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Element_AddElements',_0x212933=>{const _0xc3b6=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xc3b6(0x471)])return;VisuMZ[_0xc3b6(0x47c)](_0x212933,_0x212933);const _0x449f94=BattleManager[_0xc3b6(0xa4d)],_0x104015=_0x212933['Elements'];if(!_0x449f94)return;_0x449f94[_0xc3b6(0x869)]=_0x104015;}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xaf9),_0x2563cd=>{const _0x420ab9=_0x1e608f;if(!SceneManager[_0x420ab9(0x5f2)]())return;if(!Imported[_0x420ab9(0x471)])return;const _0x4f6552=BattleManager[_0x420ab9(0xa4d)];if(!_0x4f6552)return;_0x4f6552[_0x420ab9(0x81b)]();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x4f7),_0x3eca31=>{const _0x2937ab=_0x1e608f;if(!SceneManager[_0x2937ab(0x5f2)]())return;if(!Imported[_0x2937ab(0x471)])return;VisuMZ['ConvertParams'](_0x3eca31,_0x3eca31);const _0x155a77=BattleManager[_0x2937ab(0xa4d)],_0x3eb59d=_0x3eca31['Elements'];if(!_0x155a77)return;_0x155a77[_0x2937ab(0x953)]=_0x3eb59d;}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xb85),_0x2d32bf=>{const _0x1a3937=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1a3937(0x471)])return;const _0x3999cc=BattleManager[_0x1a3937(0xa4d)];if(!_0x3999cc)return;_0x3999cc[_0x1a3937(0x6bd)]=!![];}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x1c1),_0x192197=>{const _0xf16f00=_0x1e608f;if(!Imported[_0xf16f00(0x473)])return;if(!SceneManager[_0xf16f00(0x5f2)]())return;VisuMZ[_0xf16f00(0x47c)](_0x192197,_0x192197);const _0x59e45c=VisuMZ['CreateActionSequenceTargets'](_0x192197[_0xf16f00(0x6d6)]);for(const _0x138148 of _0x59e45c){if(!_0x138148)continue;_0x138148[_0xf16f00(0x417)](_0xf16f00(0x874)),_0x138148[_0xf16f00(0x417)]('glitch'),_0x138148[_0xf16f00(0x417)]('tv'),_0x138148[_0xf16f00(0x756)]();}$gamePlayer[_0xf16f00(0xd5d)]();}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Horror_GlitchCreate',_0x290bb8=>{const _0x57aa01=_0x1e608f;if(!Imported[_0x57aa01(0x473)])return;if(!SceneManager[_0x57aa01(0x5f2)]())return;VisuMZ[_0x57aa01(0x47c)](_0x290bb8,_0x290bb8);const _0x250abe=VisuMZ[_0x57aa01(0x599)](_0x290bb8[_0x57aa01(0x6d6)]),_0x341cb9=_0x57aa01(0x1e1);_0x290bb8[_0x57aa01(0x7fd)]=Math[_0x57aa01(0x958)](_0x290bb8[_0x57aa01(0xa27)]/0x2),_0x290bb8[_0x57aa01(0xcce)]=_0x290bb8[_0x57aa01(0xa27)],_0x290bb8[_0x57aa01(0xd86)]=!![];for(const _0x46a311 of _0x250abe){if('xWjgW'!==_0x57aa01(0x750)){if(!_0x46a311)continue;_0x46a311['setHorrorEffectSettings'](_0x341cb9,_0x290bb8);}else{if(!this[_0x57aa01(0x1cc)])return;this[_0x57aa01(0x606)]!==this['_stateIconSprite']['_battler']&&this[_0x57aa01(0x1cc)][_0x57aa01(0x429)](this[_0x57aa01(0x606)]);const _0x5067bc=this[_0x57aa01(0xd6d)]();this[_0x57aa01(0xd3e)]=this[_0x57aa01(0xd3e)]||_0x28cbd2['prototype'][_0x57aa01(0x4a7)](),this[_0x57aa01(0x1cc)]['x']=_0x1a0373[_0x57aa01(0x1a5)]((_0x5067bc+_0x16301d[_0x57aa01(0x202)])/0x2)+0x8,this[_0x57aa01(0x1cc)]['y']=this[_0x57aa01(0xd3e)]/0x2;const _0xa98a49=_0x39ef82[_0x57aa01(0xce2)][_0x57aa01(0x4a9)]['Enemy'];this['_stateIconSprite']['x']+=_0xa98a49[_0x57aa01(0x166)]||0x0,this[_0x57aa01(0x1cc)]['y']+=_0xa98a49[_0x57aa01(0x838)]||0x0;}}$gamePlayer['refresh']();}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x436),_0x40f936=>{const _0x600510=_0x1e608f;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x600510(0x5f2)]())return;VisuMZ[_0x600510(0x47c)](_0x40f936,_0x40f936);const _0x2f7f1d=VisuMZ[_0x600510(0x599)](_0x40f936[_0x600510(0x6d6)]);for(const _0x53dea5 of _0x2f7f1d){if(_0x600510(0xb28)==='ujXfR'){if(!_0x53dea5)continue;_0x53dea5[_0x600510(0x417)](_0x600510(0x1e1));}else{if(!this[_0x600510(0x606)])return;this[_0x600510(0x7ff)]=this['_battler'][_0x600510(0x213)](),this[_0x600510(0xb33)]=this['_battler'][_0x600510(0x749)]();}}$gamePlayer[_0x600510(0xd5d)]();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x273),_0x25fc3d=>{const _0x8a788c=_0x1e608f;if(!Imported[_0x8a788c(0x473)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x25fc3d,_0x25fc3d);const _0x5aa37b=VisuMZ[_0x8a788c(0x599)](_0x25fc3d[_0x8a788c(0x6d6)]),_0x49c145=_0x8a788c(0x874);for(const _0x4dead1 of _0x5aa37b){if(!_0x4dead1)continue;_0x4dead1['setHorrorEffectSettings'](_0x49c145,_0x25fc3d);}$gamePlayer[_0x8a788c(0xd5d)]();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x9c6),_0x4940e7=>{const _0x32ffb6=_0x1e608f;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x32ffb6(0x5f2)]())return;VisuMZ[_0x32ffb6(0x47c)](_0x4940e7,_0x4940e7);const _0x16ef44=VisuMZ[_0x32ffb6(0x599)](_0x4940e7[_0x32ffb6(0x6d6)]);for(const _0x46d4c8 of _0x16ef44){if(_0x32ffb6(0xa5e)===_0x32ffb6(0xa5e)){if(!_0x46d4c8)continue;_0x46d4c8['removeHorrorEffect'](_0x32ffb6(0x874));}else{if(!_0x4f638f[_0x32ffb6(0x3e6)]())return;const _0x40e933=this[_0x32ffb6(0x8dd)]();if(!_0x40e933)return;if(_0x12b50e===_0x40e933[_0x32ffb6(0x8d8)])return;let _0x31ac95=![];if(this['isActor']()){if(_0x19f121>_0x40e933[_0x32ffb6(0x8d8)])_0x31ac95=!![];if(_0x47be5d<_0x40e933['_baseX'])_0x31ac95=![];}else{if(this[_0x32ffb6(0xbab)]()){if(_0x4d4323>_0x40e933['_baseX'])_0x31ac95=![];if(_0xfbc658<_0x40e933[_0x32ffb6(0x8d8)])_0x31ac95=!![];}};this[_0x32ffb6(0xc33)](_0x56c2eb?!_0x31ac95:_0x31ac95),_0x40e933['updateFlip']();}}$gamePlayer[_0x32ffb6(0xd5d)]();}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0xa78),_0x350c69=>{const _0x222909=_0x1e608f;if(!Imported[_0x222909(0x473)])return;if(!SceneManager[_0x222909(0x5f2)]())return;VisuMZ[_0x222909(0x47c)](_0x350c69,_0x350c69);const _0x20bc4d=VisuMZ[_0x222909(0x599)](_0x350c69['Targets']),_0x2228d7='tv';for(const _0x607e0d of _0x20bc4d){if('qBGog'!==_0x222909(0x249)){if(!_0x607e0d)continue;_0x607e0d[_0x222909(0x418)](_0x2228d7,_0x350c69);}else return this[_0x222909(0xa0b)]()?_0x3fc623[_0x222909(0xce2)][_0x222909(0xb59)][_0x222909(0x2d7)](this):0x0;}$gamePlayer[_0x222909(0xd5d)]();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x1a2),_0x3338eb=>{const _0x825267=_0x1e608f;if(!Imported[_0x825267(0x473)])return;if(!SceneManager[_0x825267(0x5f2)]())return;VisuMZ['ConvertParams'](_0x3338eb,_0x3338eb);const _0x6b15ed=VisuMZ['CreateActionSequenceTargets'](_0x3338eb[_0x825267(0x6d6)]);for(const _0x3d5290 of _0x6b15ed){if(!_0x3d5290)continue;_0x3d5290[_0x825267(0x417)]('tv');}$gamePlayer[_0x825267(0xd5d)]();}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x32b),_0x3c2856=>{const _0xe4fe59=_0x1e608f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3acee2=SceneManager[_0xe4fe59(0x327)][_0xe4fe59(0x4b1)];if(!_0x3acee2)return;if(VisuMZ[_0xe4fe59(0xa04)]['version']<=1.04){if(_0xe4fe59(0x9b4)!==_0xe4fe59(0xbf7)){alert(_0xe4fe59(0x589)),SceneManager['exit']();return;}else{if(!_0x2e6b06['BattleCore']['Settings'][_0xe4fe59(0x409)]['ShowFailure'])return;_0x1fd5ec[_0xe4fe59(0xce2)][_0xe4fe59(0x70b)][_0xe4fe59(0x2d7)](this,_0x19388c);}}VisuMZ[_0xe4fe59(0x47c)](_0x3c2856,_0x3c2856);const _0x2feafa=_0x3c2856[_0xe4fe59(0x255)];_0x3acee2[_0xe4fe59(0x23e)](_0x2feafa);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x26b),_0x5bef6d=>{const _0x4db5e4=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x21386c=SceneManager[_0x4db5e4(0x327)]['_spriteset'];if(!_0x21386c)return;VisuMZ['ConvertParams'](_0x5bef6d,_0x5bef6d);const _0x31e20c=_0x5bef6d[_0x4db5e4(0x88e)]||0x1,_0x3ba654=_0x5bef6d[_0x4db5e4(0x39d)]||0x1,_0x1a237b=_0x5bef6d['EasingType']||_0x4db5e4(0xa73);_0x21386c[_0x4db5e4(0x30e)](_0x31e20c,_0x3ba654,_0x1a237b);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x8dc),_0xf1439d=>{const _0xd5bc89=_0x1e608f;if(!Imported[_0xd5bc89(0x875)])return;const _0x52f2d3=SceneManager[_0xd5bc89(0x327)][_0xd5bc89(0x4b1)];if(!_0x52f2d3)return;if(VisuMZ[_0xd5bc89(0xa04)]['version']<=1.04){if('mxoyo'===_0xd5bc89(0x414))this[_0xd5bc89(0x675)]=_0xd5bc89(0x702);else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0xd5bc89(0x3ea)]();return;}}VisuMZ[_0xd5bc89(0x47c)](_0xf1439d,_0xf1439d);const _0x168e81=_0xf1439d[_0xd5bc89(0x255)];_0x52f2d3['setupDesaturateImpactFilter'](_0x168e81);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc68),_0x45d09c=>{const _0x20c288=_0x1e608f;if(!SceneManager[_0x20c288(0x5f2)]())return;if(!Imported[_0x20c288(0x875)])return;const _0x3bbda1=SceneManager[_0x20c288(0x327)][_0x20c288(0x4b1)];if(!_0x3bbda1)return;VisuMZ[_0x20c288(0x47c)](_0x45d09c,_0x45d09c);const _0x570b9d=Number(_0x45d09c[_0x20c288(0xa93)])||0x0,_0x58a8e6=Number(_0x45d09c[_0x20c288(0xbc1)]),_0x4374a6=_0x45d09c[_0x20c288(0x39d)]||0x1,_0x3ac071=_0x45d09c['EasingType']||_0x20c288(0xa73);_0x3bbda1[_0x20c288(0x11d)](_0x570b9d,_0x58a8e6,_0x4374a6,_0x3ac071);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x679),_0x52ce39=>{const _0x19bb73=_0x1e608f;if(!SceneManager[_0x19bb73(0x5f2)]())return;if(!Imported[_0x19bb73(0x875)])return;const _0x260310=SceneManager[_0x19bb73(0x327)]['_spriteset'];if(!_0x260310)return;VisuMZ['ConvertParams'](_0x52ce39,_0x52ce39);const _0x549a48=Number(_0x52ce39[_0x19bb73(0xa93)])||0x0,_0x3e6a43=Number(_0x52ce39['Rate']),_0x46abc7=_0x52ce39[_0x19bb73(0x39d)]||0x1,_0x35d385=_0x52ce39[_0x19bb73(0x9a8)]||'Linear',_0x42ec45=VisuMZ[_0x19bb73(0x599)](_0x52ce39[_0x19bb73(0x6d6)]);for(const _0x23659d of _0x42ec45){if(_0x19bb73(0xadd)!=='kiesa')this[_0x19bb73(0xcd8)](),this[_0x19bb73(0x913)]();else{if(!_0x23659d)continue;if(!_0x23659d[_0x19bb73(0x8dd)]())continue;_0x23659d[_0x19bb73(0x8dd)]()[_0x19bb73(0x11d)](_0x549a48,_0x3e6a43,_0x46abc7,_0x35d385);}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x5e1),_0x3af890=>{const _0x355c4b=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x355c4b(0x875)])return;VisuMZ[_0x355c4b(0x47c)](_0x3af890,_0x3af890);const _0x173c0b={'delay':_0x3af890['delay'],'duration':_0x3af890[_0x355c4b(0x296)],'hue':_0x3af890[_0x355c4b(0x2f0)],'opacityStart':_0x3af890[_0x355c4b(0x550)],'tone':_0x3af890['tone'],'visible':!![]},_0x5bf12a=VisuMZ['CreateActionSequenceTargets'](_0x3af890[_0x355c4b(0x6d6)]);for(const _0x4dd331 of _0x5bf12a){if(!_0x4dd331)continue;_0x4dd331[_0x355c4b(0x410)](_0x173c0b);}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Impact_MotionTrailRemove',_0x1c0a13=>{const _0x4c8b3c=_0x1e608f;if(!SceneManager[_0x4c8b3c(0x5f2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x1c0a13,_0x1c0a13);const _0x15951e=VisuMZ[_0x4c8b3c(0x599)](_0x1c0a13[_0x4c8b3c(0x6d6)]);for(const _0x3e7126 of _0x15951e){if(!_0x3e7126)continue;_0x3e7126['clearBattlerMotionTrailData']();}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xaf7),_0x5e6e21=>{const _0x44ecff=_0x1e608f;if(!Imported[_0x44ecff(0x875)])return;const _0x145497=SceneManager[_0x44ecff(0x327)][_0x44ecff(0x4b1)];if(!_0x145497)return;if(VisuMZ[_0x44ecff(0xa04)][_0x44ecff(0x37f)]<=1.04){if(_0x44ecff(0x3fd)===_0x44ecff(0x5d7)){const _0x5d4285=this['svBattlerData']()[_0x44ecff(0xb9c)]||0x0,_0x1c2b03=_0xbe4b39[_0x44ecff(0x969)][_0x5d4285];_0x1c2b03&&this[_0x44ecff(0x77a)](_0x1c2b03[_0x44ecff(0x497)]);}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ[_0x44ecff(0x47c)](_0x5e6e21,_0x5e6e21);const _0x49487b=_0x5e6e21[_0x44ecff(0x255)];_0x145497[_0x44ecff(0x889)](_0x49487b);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x167),_0x3f3500=>{const _0x271eec=_0x1e608f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x25bb23=SceneManager['_scene'][_0x271eec(0x4b1)];if(!_0x25bb23)return;if(VisuMZ[_0x271eec(0xa04)][_0x271eec(0x37f)]<=1.04){alert(_0x271eec(0x589)),SceneManager[_0x271eec(0x3ea)]();return;}VisuMZ[_0x271eec(0x47c)](_0x3f3500,_0x3f3500);const _0x352230=_0x3f3500[_0x271eec(0x255)];_0x25bb23[_0x271eec(0xaf2)](_0x352230);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6a9),_0x5919de=>{const _0xba235e=_0x1e608f;if(!Imported[_0xba235e(0x875)])return;const _0x20abfc=SceneManager[_0xba235e(0x327)][_0xba235e(0x4b1)];if(!_0x20abfc)return;VisuMZ['ConvertParams'](_0x5919de,_0x5919de);const _0x45dfeb=_0x5919de['X']||0x0,_0x142451=_0x5919de['Y']||0x0,_0x7d30ca=_0x5919de[_0xba235e(0x40c)]||0x0,_0x7f05c8=_0x5919de[_0xba235e(0x570)]||0x0,_0x3780e6=_0x5919de['Duration']||0x1;_0x20abfc[_0xba235e(0xd74)](_0x45dfeb,_0x142451,_0x7d30ca,_0x7f05c8,_0x3780e6);}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Impact_ShockwaveEachTargets',_0x5260dd=>{const _0x545aba=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x545aba(0x875)])return;const _0x4a4810=SceneManager[_0x545aba(0x327)][_0x545aba(0x4b1)];if(!_0x4a4810)return;VisuMZ[_0x545aba(0x47c)](_0x5260dd,_0x5260dd);const _0x112457=VisuMZ[_0x545aba(0x599)](_0x5260dd['Targets']),_0x4e21d8=_0x5260dd['TargetLocation'],_0x3b9f78=_0x5260dd[_0x545aba(0x4df)]||0x0,_0x5069f0=_0x5260dd[_0x545aba(0x2c2)]||0x0,_0x52457d=_0x5260dd[_0x545aba(0x40c)]||0x0,_0x5e4978=_0x5260dd[_0x545aba(0x570)]||0x0,_0x51f2ec=_0x5260dd[_0x545aba(0x39d)]||0x1;for(const _0x4a14b7 of _0x112457){if(!_0x4a14b7)continue;if(!_0x4a14b7[_0x545aba(0x8dd)]())continue;const _0x57ba4c=_0x4a14b7['battler']();let _0x4c4d7c=_0x57ba4c[_0x545aba(0x8d8)],_0x2d38ef=_0x57ba4c[_0x545aba(0x171)];_0x4c4d7c+=(Graphics[_0x545aba(0x78f)]-Graphics[_0x545aba(0x748)])/0x2,_0x2d38ef+=(Graphics['height']-Graphics['boxHeight'])/0x2;if(_0x4e21d8['match'](/front/i))_0x4c4d7c+=(_0x4a14b7['isEnemy']()?0x1:-0x1)*_0x57ba4c[_0x545aba(0xcc4)]()/0x2;else _0x4e21d8[_0x545aba(0x97b)](/back/i)&&('exVGj'!==_0x545aba(0x9a3)?(_0x421d2f[_0x545aba(0xce2)]['Sprite_Enemy_updateStateSprite'][_0x545aba(0x2d7)](this),this[_0x545aba(0x956)]()):_0x4c4d7c+=(_0x4a14b7[_0x545aba(0xbab)]()?-0x1:0x1)*_0x57ba4c[_0x545aba(0xcc4)]()/0x2);if(_0x4e21d8[_0x545aba(0x97b)](/head/i))_0x545aba(0x2b5)!==_0x545aba(0x297)?_0x2d38ef-=_0x57ba4c['mainSpriteHeight']():(_0x56f4d5['bitmap']=_0x70b4ea,_0x10925b['bitmap']=_0x231dc5,_0x569d41['adjustPosition'](),_0x3ae02d[_0x545aba(0xb3e)]());else _0x4e21d8[_0x545aba(0x97b)](/center/i)&&('NmyFC'!==_0x545aba(0xa7d)?_0x2d38ef-=_0x57ba4c[_0x545aba(0x4d3)]()/0x2:(this[_0x545aba(0x4d7)]=this[_0x545aba(0x4d7)]||[],this[_0x545aba(0x4d7)][_0x545aba(0xb79)](_0x45dd0b)));_0x4c4d7c+=_0x3b9f78,_0x2d38ef+=_0x5069f0,_0x4a4810[_0x545aba(0xd74)](_0x4c4d7c,_0x2d38ef,_0x52457d,_0x5e4978,_0x51f2ec);}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x850),_0x201459=>{const _0x1b3034=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b3034(0x875)])return;const _0x52c243=SceneManager[_0x1b3034(0x327)]['_spriteset'];if(!_0x52c243)return;VisuMZ['ConvertParams'](_0x201459,_0x201459);const _0x52be48=VisuMZ['CreateActionSequenceTargets'](_0x201459[_0x1b3034(0x6d6)]),_0x27d04d=_0x201459[_0x1b3034(0x998)],_0x3661db=_0x201459[_0x1b3034(0x4df)]||0x0,_0x541bfa=_0x201459[_0x1b3034(0x2c2)]||0x0,_0x4d464e=_0x201459[_0x1b3034(0x40c)]||0x0,_0x47bec1=_0x201459[_0x1b3034(0x570)]||0x0,_0x2342cd=_0x201459[_0x1b3034(0x39d)]||0x1,_0x670120=Math[_0x1b3034(0xb27)](..._0x52be48[_0x1b3034(0x725)](_0x580221=>_0x580221['battler']()['_baseX']-_0x580221['battler']()[_0x1b3034(0xcc4)]()/0x2)),_0x453a9a=Math[_0x1b3034(0x127)](..._0x52be48[_0x1b3034(0x725)](_0x137506=>_0x137506[_0x1b3034(0x8dd)]()[_0x1b3034(0x8d8)]+_0x137506[_0x1b3034(0x8dd)]()[_0x1b3034(0xcc4)]()/0x2)),_0x1bfe15=Math[_0x1b3034(0xb27)](..._0x52be48['map'](_0x3206d4=>_0x3206d4[_0x1b3034(0x8dd)]()[_0x1b3034(0x171)]-_0x3206d4[_0x1b3034(0x8dd)]()['mainSpriteHeight']())),_0xd84930=Math[_0x1b3034(0x127)](..._0x52be48[_0x1b3034(0x725)](_0x34c4bb=>_0x34c4bb[_0x1b3034(0x8dd)]()[_0x1b3034(0x171)])),_0x398aa9=_0x52be48[_0x1b3034(0x9f1)](_0x24e193=>_0x24e193[_0x1b3034(0x28c)]())[_0x1b3034(0xcaf)],_0x5b2820=_0x52be48[_0x1b3034(0x9f1)](_0x58a18c=>_0x58a18c['isEnemy']())['length'];let _0x1489e2=0x0,_0x3e271f=0x0;if(_0x27d04d[_0x1b3034(0x97b)](/front/i)){if(_0x1b3034(0x648)==='jxBrz')_0x1489e2=_0x398aa9>=_0x5b2820?_0x670120:_0x453a9a;else{if(!_0x470428['isSceneBattle']())return;const _0x1669ac=_0x1ad50d['getLastPluginCommandInterpreter']();if(!_0x1669ac)return;_0x1669ac[_0x1b3034(0x7b2)](_0x1b3034(0x308));}}else{if(_0x27d04d[_0x1b3034(0x97b)](/middle/i))_0x1b3034(0x6f0)==='NarlF'?(_0x1489e2=(_0x670120+_0x453a9a)/0x2,melee=-0x1):_0x2c3156+=_0xeec78f[_0x1b3034(0x78f)]-_0x5c2040;else _0x27d04d[_0x1b3034(0x97b)](/back/i)&&(_0x1489e2=_0x398aa9>=_0x5b2820?_0x453a9a:_0x670120);}if(_0x27d04d[_0x1b3034(0x97b)](/head/i))_0x3e271f=_0x1bfe15;else{if(_0x27d04d[_0x1b3034(0x97b)](/center/i))_0x3e271f=(_0x1bfe15+_0xd84930)/0x2;else _0x27d04d[_0x1b3034(0x97b)](/base/i)&&(_0x3e271f=_0xd84930);}_0x1489e2+=(Graphics[_0x1b3034(0x78f)]-Graphics[_0x1b3034(0x748)])/0x2,_0x3e271f+=(Graphics[_0x1b3034(0x96b)]-Graphics['boxHeight'])/0x2,_0x1489e2+=_0x3661db,_0x3e271f+=_0x541bfa,_0x52c243[_0x1b3034(0xd74)](_0x1489e2,_0x3e271f,_0x4d464e,_0x47bec1,_0x2342cd);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Impact_TimeScale',_0x11fc0e=>{const _0x287ad1=_0x1e608f;if(!Imported[_0x287ad1(0x875)])return;const _0x1378a4=SceneManager[_0x287ad1(0x327)][_0x287ad1(0x4b1)];if(!_0x1378a4)return;if(VisuMZ['ActSeqImpact'][_0x287ad1(0x37f)]<=1.04){if(_0x287ad1(0x383)==='FYxHZ'){alert(_0x287ad1(0x589)),SceneManager[_0x287ad1(0x3ea)]();return;}else{const _0xb06a85=_0x329007[_0x287ad1(0x8fc)](this[_0x287ad1(0x8b4)]());_0x5bd3c3[_0xb06a85]=_0x3007a4[_0x2fac1d[_0x287ad1(0xab4)](_0x25ee01[_0x287ad1(0xcaf)])];}}VisuMZ[_0x287ad1(0x47c)](_0x11fc0e,_0x11fc0e);const _0x38c593=$gameTemp[_0x287ad1(0x68b)](),_0x3ede67=Math[_0x287ad1(0x127)](0.01,_0x11fc0e[_0x287ad1(0x22b)]);$gameTemp[_0x287ad1(0xa19)](_0x3ede67,_0x38c593);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Impact_TimeStop',_0x1014e7=>{const _0x4d99f2=_0x1e608f;if(!Imported[_0x4d99f2(0x875)])return;const _0x33bdb0=SceneManager[_0x4d99f2(0x327)][_0x4d99f2(0x4b1)];if(!_0x33bdb0)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){if('mUXSb'!==_0x4d99f2(0x220)){const _0x4f84b5=this[_0x4d99f2(0xa5d)][_0x4d99f2(0x310)]();for(const _0x1cadf2 of _0x4f84b5){this[_0x4d99f2(0x8eb)](_0x1cadf2);}}else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4d99f2(0x3ea)]();return;}}VisuMZ[_0x4d99f2(0x47c)](_0x1014e7,_0x1014e7);const _0x46c1f1=$gameTemp['getLastPluginCommandInterpreter'](),_0x28b368=_0x1014e7['ms']||0x1;VisuMZ[_0x4d99f2(0xa04)][_0x4d99f2(0xd41)](_0x28b368,_0x46c1f1);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x713),_0x3a8c33=>{const _0x49687d=_0x1e608f;if(!Imported[_0x49687d(0x875)])return;const _0x3655ca=SceneManager[_0x49687d(0x327)][_0x49687d(0x4b1)];if(!_0x3655ca)return;VisuMZ[_0x49687d(0x47c)](_0x3a8c33,_0x3a8c33);const _0x3fda72=_0x3a8c33['X']||0x0,_0x2745f2=_0x3a8c33['Y']||0x0,_0x1eedf2=_0x3a8c33[_0x49687d(0x341)]||0x0,_0xce2b95=_0x3a8c33[_0x49687d(0x431)]||0x0,_0x107423=_0x3a8c33['Duration']||0x1,_0x439734=_0x3a8c33[_0x49687d(0x9a8)]||'Linear';_0x3655ca[_0x49687d(0x653)](_0x1eedf2,_0x3fda72,_0x2745f2,_0xce2b95,_0x107423,_0x439734);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x275),_0x14f794=>{const _0x345f28=_0x1e608f;if(!Imported[_0x345f28(0x875)])return;const _0x29d073=SceneManager[_0x345f28(0x327)][_0x345f28(0x4b1)];if(!_0x29d073)return;VisuMZ[_0x345f28(0x47c)](_0x14f794,_0x14f794);const _0x581a9d=VisuMZ[_0x345f28(0x599)](_0x14f794['Targets']),_0x2ad3fd=_0x14f794[_0x345f28(0x998)],_0x1792d7=_0x14f794[_0x345f28(0x4df)]||0x0,_0x412a96=_0x14f794['OffsetY']||0x0,_0x12dd4d=_0x14f794['Strength']||0x0,_0x18246c=_0x14f794[_0x345f28(0x431)]||0x0,_0x34acc6=_0x14f794[_0x345f28(0x39d)]||0x1,_0x2927bf=_0x14f794[_0x345f28(0x9a8)]||_0x345f28(0xa73),_0x32dfe0=Math[_0x345f28(0xb27)](..._0x581a9d[_0x345f28(0x725)](_0x50f77c=>_0x50f77c[_0x345f28(0x8dd)]()[_0x345f28(0x8d8)]-_0x50f77c[_0x345f28(0x8dd)]()['mainSpriteWidth']()/0x2)),_0x481823=Math[_0x345f28(0x127)](..._0x581a9d[_0x345f28(0x725)](_0x444269=>_0x444269[_0x345f28(0x8dd)]()[_0x345f28(0x8d8)]+_0x444269['battler']()['mainSpriteWidth']()/0x2)),_0x2c4332=Math['min'](..._0x581a9d[_0x345f28(0x725)](_0x184dba=>_0x184dba[_0x345f28(0x8dd)]()['_baseY']-_0x184dba[_0x345f28(0x8dd)]()['mainSpriteHeight']())),_0x22f283=Math[_0x345f28(0x127)](..._0x581a9d['map'](_0x44bc8a=>_0x44bc8a[_0x345f28(0x8dd)]()[_0x345f28(0x171)])),_0x556753=_0x581a9d[_0x345f28(0x9f1)](_0xf20f6a=>_0xf20f6a['isActor']())[_0x345f28(0xcaf)],_0xcba6ed=_0x581a9d['filter'](_0xce6c98=>_0xce6c98[_0x345f28(0xbab)]())['length'];let _0x3bc7d0=0x0,_0x415f32=0x0;if(_0x2ad3fd[_0x345f28(0x97b)](/front/i))_0x3bc7d0=_0x556753>=_0xcba6ed?_0x32dfe0:_0x481823;else{if(_0x2ad3fd[_0x345f28(0x97b)](/middle/i))_0x345f28(0x141)!==_0x345f28(0x141)?this['_actorCommandWindow'][_0x345f28(0x92a)]():(_0x3bc7d0=(_0x32dfe0+_0x481823)/0x2,melee=-0x1);else _0x2ad3fd[_0x345f28(0x97b)](/back/i)&&(_0x3bc7d0=_0x556753>=_0xcba6ed?_0x481823:_0x32dfe0);}if(_0x2ad3fd[_0x345f28(0x97b)](/head/i))_0x345f28(0xa99)===_0x345f28(0x931)?(_0x53c45f[_0x345f28(0xce2)][_0x345f28(0x293)][_0x345f28(0x2d7)](this,_0x207861,_0x3218ae),this['callNextMethod']()):_0x415f32=_0x2c4332;else{if(_0x2ad3fd['match'](/center/i)){if('BIDcv'===_0x345f28(0x19f))_0x415f32=(_0x2c4332+_0x22f283)/0x2;else{if(this[_0x345f28(0x28c)]()){const _0x5cf1b7=this[_0x345f28(0x784)]();if(_0x5cf1b7[_0x345f28(0xcaf)]>0x0){const _0x3c3415=_0x5cf1b7[_0x1c9dca];if(_0x3c3415)_0x1e0ab2=this['equips']()['indexOf'](_0x3c3415);}}this['_activeWeaponSlot']=_0x57e9bd||0x0,this['_cache']={};}}else _0x2ad3fd['match'](/base/i)&&(_0x415f32=_0x22f283);}_0x3bc7d0+=(Graphics[_0x345f28(0x78f)]-Graphics[_0x345f28(0x748)])/0x2,_0x415f32+=(Graphics['height']-Graphics[_0x345f28(0x865)])/0x2,_0x3bc7d0+=_0x1792d7,_0x415f32+=_0x412a96,_0x29d073[_0x345f28(0x653)](_0x12dd4d,_0x3bc7d0,_0x415f32,_0x18246c,_0x34acc6,_0x2927bf);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Inject_AnimationStart',_0x253592=>{const _0x1c1205=_0x1e608f;if(!Imported[_0x1c1205(0x875)])return;const _0x57392a=SceneManager['_scene']['_spriteset'];if(!_0x57392a)return;if(VisuMZ[_0x1c1205(0xa04)]['version']<=1.05){if(_0x1c1205(0xbe4)!==_0x1c1205(0xba9)){alert(_0x1c1205(0x589)),SceneManager[_0x1c1205(0x3ea)]();return;}else this[_0x1c1205(0x2f8)](),_0x37022e[_0x1c1205(0xce2)][_0x1c1205(0xa7c)][_0x1c1205(0x2d7)](this),this[_0x1c1205(0x9ab)]();}VisuMZ[_0x1c1205(0x47c)](_0x253592,_0x253592);const _0x3a7788=VisuMZ[_0x1c1205(0x599)](_0x253592[_0x1c1205(0x6d6)]),_0x1ef630={'filename':_0x253592['Filename'],'horzCells':_0x253592['horzCells']||0x1,'vertCells':_0x253592[_0x1c1205(0x9e3)]||0x1,'frameDelay':_0x253592[_0x1c1205(0x94e)]||0x1,'smooth':_0x253592[_0x1c1205(0x9d1)]||![],'anchorX':_0x253592[_0x1c1205(0x8a2)]||0x0,'anchorY':_0x253592[_0x1c1205(0x8e2)]||0x0,'offsetX':_0x253592[_0x1c1205(0x8bb)]||0x0,'offsetY':_0x253592[_0x1c1205(0x7fa)]||0x0};for(const _0x382cc3 of _0x3a7788){if(!_0x382cc3)continue;if(!_0x382cc3[_0x1c1205(0x8dd)]())continue;_0x382cc3[_0x1c1205(0x8dd)]()['startInjectAnimation'](_0x1ef630);}const _0x388b57=$gameTemp[_0x1c1205(0x68b)]();if(_0x388b57){if('OXRKD'!==_0x1c1205(0x91e))_0x388b57['setWaitMode'](_0x1c1205(0xab0));else return _0x463e0a[_0x1c1205(0x674)]-_0x364094[_0x1c1205(0x674)];}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Inject_AnimationEnd',_0x281ecf=>{const _0x2e9eb8=_0x1e608f;if(!Imported[_0x2e9eb8(0x875)])return;const _0x36fe2a=SceneManager['_scene']['_spriteset'];if(!_0x36fe2a)return;if(VisuMZ[_0x2e9eb8(0xa04)][_0x2e9eb8(0x37f)]<=1.05){if(_0x2e9eb8(0xd60)!==_0x2e9eb8(0xd60)){if(!_0x28cc99[_0x2e9eb8(0x5f2)]())return;const _0x1d2519=_0x2c8ad4[_0x2e9eb8(0x68b)]();if(!_0x1d2519)return;_0x1d2519[_0x2e9eb8(0x7b2)]('battleOpacity');}else{alert(_0x2e9eb8(0x589)),SceneManager[_0x2e9eb8(0x3ea)]();return;}}VisuMZ[_0x2e9eb8(0x47c)](_0x281ecf,_0x281ecf);const _0xd945a7=VisuMZ[_0x2e9eb8(0x599)](_0x281ecf[_0x2e9eb8(0x6d6)]);for(const _0x315566 of _0xd945a7){if(_0x2e9eb8(0x123)!=='sePWd'){const _0x2f0c09=_0x3d4c7d[_0x2e9eb8(0xbe1)][_0x2e9eb8(0xc06)]['call'](arguments,0x1),_0x1f217f={'name':_0x29a3af,'params':_0x2f0c09},_0x1bac97=this[_0x2e9eb8(0x9b1)]['map'](_0x48b489=>_0x48b489[_0x2e9eb8(0x6aa)])[_0x2e9eb8(0x8fc)](_0x2e9eb8(0x2c9));_0x1bac97>=0x0?this[_0x2e9eb8(0x9b1)][_0x2e9eb8(0x191)](_0x1bac97,0x0,_0x1f217f):this[_0x2e9eb8(0x9b1)][_0x2e9eb8(0xb79)](_0x1f217f);}else{if(!_0x315566)continue;if(!_0x315566[_0x2e9eb8(0x8dd)]())continue;_0x315566[_0x2e9eb8(0x8dd)]()[_0x2e9eb8(0x3c3)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x5db),_0x540e22=>{const _0x49e91c=_0x1e608f;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x19b283=SceneManager['_scene'][_0x49e91c(0x4b1)];if(!_0x19b283)return;if(VisuMZ[_0x49e91c(0xa04)][_0x49e91c(0x37f)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x49e91c(0x3ea)]();return;}VisuMZ['ConvertParams'](_0x540e22,_0x540e22);const _0x5cf22f=VisuMZ['CreateActionSequenceTargets'](_0x540e22[_0x49e91c(0x6d6)]),_0x423cb8=_0x540e22[_0x49e91c(0x270)];for(const _0x2428c9 of _0x5cf22f){if(!_0x2428c9)continue;if(!_0x2428c9[_0x49e91c(0x8dd)]())continue;_0x2428c9[_0x49e91c(0x8dd)]()[_0x49e91c(0x2fe)](_0x423cb8);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Inject_WaitForInjectAni',_0x150a97=>{const _0x3f1f1b=_0x1e608f;if(!SceneManager[_0x3f1f1b(0x5f2)]())return;const _0x224c2e=$gameTemp[_0x3f1f1b(0x68b)]();if(!_0x224c2e)return;_0x224c2e[_0x3f1f1b(0x7b2)]('battleInjectAni');}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x8d5),_0x470861=>{const _0x4350f6=_0x1e608f;if(!SceneManager[_0x4350f6(0x5f2)]())return;VisuMZ[_0x4350f6(0x47c)](_0x470861,_0x470861);const _0x2243f9=$gameTemp['getLastPluginCommandInterpreter'](),_0x389cf6=BattleManager[_0x4350f6(0xa4d)],_0xfebd6c=BattleManager['_subject'],_0x40db21=BattleManager[_0x4350f6(0xa66)];if(!_0x2243f9||!_0x389cf6||!_0xfebd6c)return;if(!_0x389cf6[_0x4350f6(0xa0b)]())return;const _0x13a540=VisuMZ['CreateActionSequenceTargets'](_0x470861[_0x4350f6(0x6d6)]);for(const _0x327cbb of _0x13a540){if(!_0x327cbb)continue;_0x40db21[_0x4350f6(0xb79)](_0x4350f6(0xc63),_0xfebd6c,_0x327cbb);}_0x2243f9[_0x4350f6(0x7b2)](_0x4350f6(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xd1d),_0x1c9ac1=>{const _0x15230e=_0x1e608f;if(!SceneManager[_0x15230e(0x5f2)]())return;if(!Imported['VisuMZ_3_ActiveChainSkills'])return;$gameTemp[_0x15230e(0x815)]=!![];}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xd51),_0x3bd378=>{const _0x1c281e=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c281e(0x47c)](_0x3bd378,_0x3bd378);const _0x3082f0=['MAXHP',_0x1c281e(0x432),_0x1c281e(0x5ae),_0x1c281e(0x373),_0x1c281e(0xb12),_0x1c281e(0x5a8),_0x1c281e(0x2d5),_0x1c281e(0x201)],_0x40693b=_0x3bd378[_0x1c281e(0xaa4)],_0x344347=_0x3bd378['Debuffs'],_0x3f724f=_0x3bd378[_0x1c281e(0x535)],_0x563898=VisuMZ[_0x1c281e(0x599)](_0x3bd378[_0x1c281e(0x6d6)]);for(const _0x34472d of _0x563898){if(_0x1c281e(0xd1e)==='aTGnk'){if(!_0x34472d)continue;for(const _0x519775 of _0x40693b){const _0x2a9deb=_0x3082f0[_0x1c281e(0x8fc)](_0x519775['toUpperCase']()[_0x1c281e(0x2a9)]());if(_0x2a9deb>=0x0&&_0x2a9deb<=0x7){if(_0x1c281e(0x41e)===_0x1c281e(0xccf)){const _0x258469=this[_0x1c281e(0x9c1)](_0x3060b3),_0xb57c53=this[_0x1c281e(0xa3d)](_0x10ad2d)[_0x1c281e(0x78f)];return _0xb57c53<=_0x258469['width']?_0x1c281e(0x6e6):'icon';}else _0x34472d[_0x1c281e(0x2d1)](_0x2a9deb,_0x3f724f);}}for(const _0x4d2949 of _0x344347){const _0x5af3dd=_0x3082f0[_0x1c281e(0x8fc)](_0x4d2949[_0x1c281e(0xb11)]()['trim']());_0x5af3dd>=0x0&&_0x5af3dd<=0x7&&(_0x1c281e(0x5a4)===_0x1c281e(0x5a4)?_0x34472d[_0x1c281e(0x5bb)](_0x5af3dd,_0x3f724f):(_0x4d09a9=_0x365141[_0x1c281e(0x4aa)](_0x49edd3),_0x29eb6a[_0x1c281e(0xce2)][_0x1c281e(0xb0d)]['call'](this,_0x526803,_0x3a975a,_0x598937),_0x5cf9ab['VisuMZ_1_ElementStatusCore']&&this[_0x1c281e(0xa48)](),this[_0x1c281e(0xd12)](),this[_0x1c281e(0x9d6)](),_0x200361[_0x1c281e(0x471)]&&this['recoverAll']()));}}else return this[_0x1c281e(0xa3e)]();}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x395),_0x211901=>{const _0x21a6bf=_0x1e608f;if(!SceneManager[_0x21a6bf(0x5f2)]())return;VisuMZ[_0x21a6bf(0x47c)](_0x211901,_0x211901);const _0x6e4c8e=_0x211901['States'],_0x1c39e7=VisuMZ['CreateActionSequenceTargets'](_0x211901[_0x21a6bf(0x6d6)]);for(const _0x2628fc of _0x1c39e7){if(!_0x2628fc)continue;for(const _0x48ca38 of _0x6e4c8e){if(_0x21a6bf(0x876)==='QYsUt')_0x2628fc[_0x21a6bf(0xccd)](_0x48ca38);else{this[_0x21a6bf(0xcac)]=_0x501f6f[_0x21a6bf(0xaa6)]||[0x0,0x0,0x0,0x0],this[_0x21a6bf(0xcac)]=_0x2867b5[_0x21a6bf(0x346)](this[_0x21a6bf(0xcac)]),this[_0x21a6bf(0xbb1)]=_0x4ff701[_0x21a6bf(0x464)]||0x0;const _0x439228=this[_0x21a6bf(0x422)](),_0x29c89c=_0x9c7762['floor'](_0x439228*0x1e),_0x4bcbca=this[_0x21a6bf(0xcd9)](_0x29c89c,_0x439228);_0x4bcbca[_0x21a6bf(0x34b)][_0x21a6bf(0x500)]=_0x4a8ea4[_0x21a6bf(0xd5a)](_0x169f45['textColor']),_0x4bcbca['bitmap']['drawText'](_0x351715,0x0,0x0,_0x29c89c,_0x439228,_0x21a6bf(0x624)),_0x4bcbca['dy']=0x0;}}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6bf),_0x4b6fe6=>{const _0x4c4885=_0x1e608f;if(!SceneManager[_0x4c4885(0x5f2)]())return;VisuMZ[_0x4c4885(0x47c)](_0x4b6fe6,_0x4b6fe6);const _0x58e7dc=BattleManager[_0x4c4885(0xa4d)],_0x140444={'arPenRate':_0x4b6fe6['ArPenRate'],'arPenFlat':_0x4b6fe6[_0x4c4885(0x1df)],'arRedRate':_0x4b6fe6['ArRedRate'],'arRedFlat':_0x4b6fe6[_0x4c4885(0x75e)]};_0x58e7dc[_0x4c4885(0x262)]=_0x140444;}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x23b),_0xa2800=>{const _0x574f54=_0x1e608f;if(!SceneManager[_0x574f54(0x5f2)]())return;if(!Imported[_0x574f54(0x120)])return;VisuMZ[_0x574f54(0x47c)](_0xa2800,_0xa2800);const _0x41a659=VisuMZ[_0x574f54(0x599)](_0xa2800[_0x574f54(0x6d6)]),_0x3a4552=_0xa2800[_0x574f54(0xa4a)]||0x1;for(const _0x2d90c4 of _0x41a659){if(_0x574f54(0x112)!=='iixaO')return this['subject']()['isActor']()&&!this['subject']()['isAutoBattle']();else{if(!_0x2d90c4)continue;if(!_0x2d90c4[_0x574f54(0xbab)]())continue;_0x2d90c4[_0x574f54(0xc5c)](_0x3a4552);}}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x5e5),_0x36c076=>{const _0x3cda47=_0x1e608f;if(!SceneManager[_0x3cda47(0x5f2)]())return;if(!Imported[_0x3cda47(0xc2b)])return;if(!BattleManager['isATB']())return;VisuMZ[_0x3cda47(0x47c)](_0x36c076,_0x36c076);const _0x4aa295=VisuMZ['CreateActionSequenceTargets'](_0x36c076['Targets']),_0x23b443=_0x36c076['ChargeRate'],_0x5b1e42=_0x36c076['ChargeRate'],_0xaef445=_0x36c076['Interrupt'];for(const _0x4fb143 of _0x4aa295){if(_0x3cda47(0xb77)!=='FWdaS')_0x21c422[_0x3cda47(0xb6b)](_0x3cda47(0x999));else{if(!_0x4fb143)continue;if(_0x4fb143[_0x3cda47(0x7f9)]())_0x4fb143[_0x3cda47(0x8f1)](_0x23b443);else{if(_0x4fb143[_0x3cda47(0x3d3)]()){if(_0x3cda47(0x630)===_0x3cda47(0x398))this['_distortionSprite'][_0x3cda47(0x4af)]['x']=this[_0x3cda47(0x388)],this[_0x3cda47(0x8e8)][_0x3cda47(0x4af)]['y']=this[_0x3cda47(0xa07)];else{_0x4fb143[_0x3cda47(0x3fe)](_0x5b1e42);if(_0xaef445)_0x4fb143[_0x3cda47(0x8de)]();}}}}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x456),_0x6e72c0=>{const _0x2fbf9a=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2fbf9a(0x286)])return;VisuMZ[_0x2fbf9a(0x47c)](_0x6e72c0,_0x6e72c0);const _0x29992b=VisuMZ[_0x2fbf9a(0x599)](_0x6e72c0[_0x2fbf9a(0x6d6)]),_0x2eec18=_0x6e72c0[_0x2fbf9a(0x978)];for(const _0x3f064b of _0x29992b){if(_0x2fbf9a(0xa06)==='duBap'){if(!_0x3f064b)continue;_0x3f064b[_0x2fbf9a(0x922)](_0x2eec18);}else _0x53f637[_0x2fbf9a(0xce2)][_0x2fbf9a(0x7bd)][_0x2fbf9a(0x2d7)](this),this[_0x2fbf9a(0x288)]();}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x604),_0x44ef06=>{const _0x24a4e2=_0x1e608f;if(!SceneManager[_0x24a4e2(0x5f2)]())return;if(!Imported[_0x24a4e2(0x286)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x24a4e2(0x47c)](_0x44ef06,_0x44ef06);const _0x2f404c=_0x44ef06[_0x24a4e2(0x5f9)];$gameVariables[_0x24a4e2(0xb83)](_0x2f404c,BattleManager[_0x24a4e2(0x7cb)][_0x24a4e2(0x584)]());}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_BreakShieldChange',_0x473447=>{const _0xe8000=_0x1e608f;if(!SceneManager[_0xe8000(0x5f2)]())return;if(!Imported[_0xe8000(0x3ae)])return;VisuMZ[_0xe8000(0x47c)](_0x473447,_0x473447);const _0xa24c1c=VisuMZ[_0xe8000(0x599)](_0x473447[_0xe8000(0x6d6)]),_0x2bbad9=_0x473447[_0xe8000(0x6cd)];for(const _0x288cb0 of _0xa24c1c){if(_0xe8000(0x7c7)!==_0xe8000(0x609)){if(!_0x288cb0)continue;if(_0x288cb0[_0xe8000(0x4b8)]())continue;if(!_0x288cb0['isAffectedByBreakShield']())continue;_0x288cb0['alterBreakShield'](_0x2bbad9);}else return!this[_0xe8000(0x562)]();}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x323),_0x49be04=>{const _0x5b5ca9=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b5ca9(0x3ae)])return;VisuMZ[_0x5b5ca9(0x47c)](_0x49be04,_0x49be04);const _0x220e0b=VisuMZ[_0x5b5ca9(0x599)](_0x49be04[_0x5b5ca9(0x6d6)]);for(const _0x1b3dd3 of _0x220e0b){if('TLdMw'===_0x5b5ca9(0x810)){if(!_0x1b3dd3)continue;if(_0x1b3dd3[_0x5b5ca9(0x4b8)]())continue;if(!_0x1b3dd3['isAffectedByBreakShield']())continue;_0x1b3dd3['resetBreakShield']();}else this[_0x5b5ca9(0xb89)](...arguments);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x896),_0x1d58e6=>{const _0x1b49b9=_0x1e608f;if(!SceneManager[_0x1b49b9(0x5f2)]())return;if(!Imported[_0x1b49b9(0xb73)])return;if(!BattleManager[_0x1b49b9(0x254)]())return;VisuMZ[_0x1b49b9(0x47c)](_0x1d58e6,_0x1d58e6);const _0xf150bf=VisuMZ[_0x1b49b9(0x599)](_0x1d58e6[_0x1b49b9(0x6d6)]),_0x50bf18=_0x1d58e6[_0x1b49b9(0x405)];for(const _0x56034f of _0xf150bf){if(!_0x56034f)continue;_0x56034f[_0x1b49b9(0x421)](_0x50bf18);}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x67a),_0x2dbc3f=>{const _0x3d9e5e=_0x1e608f;if(!SceneManager[_0x3d9e5e(0x5f2)]())return;VisuMZ[_0x3d9e5e(0x47c)](_0x2dbc3f,_0x2dbc3f);const _0x2c2c2c=$gameTemp[_0x3d9e5e(0x68b)](),_0x26e39b=BattleManager[_0x3d9e5e(0xa4d)],_0x36f47d=BattleManager[_0x3d9e5e(0x7cb)];if(!_0x2c2c2c||!_0x26e39b||!_0x36f47d)return;if(!_0x26e39b[_0x3d9e5e(0xa0b)]())return;const _0x17e312=VisuMZ[_0x3d9e5e(0x599)](_0x2dbc3f['Targets']);for(const _0x31300a of _0x17e312){if(!_0x31300a)continue;_0x2dbc3f['ForceDeath']&&(_0x31300a['removeImmortal'](),_0x31300a['addState'](_0x31300a['deathStateId']())),_0x31300a[_0x3d9e5e(0x44b)]()&&('PMxdB'===_0x3d9e5e(0x375)?_0x31300a[_0x3d9e5e(0x73a)]():(this['updateHomeMove'](),_0x1824e2['BattleCore'][_0x3d9e5e(0x1f3)][_0x3d9e5e(0x2d7)](this),this[_0x3d9e5e(0x8f3)](),this[_0x3d9e5e(0x1a3)]()));}_0x2c2c2c['setWaitMode'](_0x3d9e5e(0xd25));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_CtbOrder',_0x2abe90=>{const _0x527735=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x527735(0x45f)]())return;VisuMZ[_0x527735(0x47c)](_0x2abe90,_0x2abe90);const _0x3a552b=VisuMZ['CreateActionSequenceTargets'](_0x2abe90['Targets']),_0x162425=_0x2abe90[_0x527735(0x352)];for(const _0x3d9969 of _0x3a552b){if(!_0x3d9969)continue;_0x3d9969[_0x527735(0xcd0)](_0x162425);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x207),_0x136577=>{const _0x30bbe0=_0x1e608f;if(!SceneManager[_0x30bbe0(0x5f2)]())return;if(!Imported[_0x30bbe0(0x47f)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x30bbe0(0x47c)](_0x136577,_0x136577);const _0x2e3ba9=VisuMZ[_0x30bbe0(0x599)](_0x136577['Targets']),_0x457948=_0x136577[_0x30bbe0(0x635)],_0x427e47=_0x136577['ChargeRate'];for(const _0x54910f of _0x2e3ba9){if(!_0x54910f)continue;if(_0x54910f[_0x30bbe0(0x92c)]===_0x30bbe0(0x926))_0x54910f[_0x30bbe0(0x4ba)](_0x457948);else _0x54910f['_tpbState']==='casting'&&(_0x30bbe0(0x804)!==_0x30bbe0(0x804)?this[_0x30bbe0(0x7ae)]=!![]:_0x54910f[_0x30bbe0(0xbd4)](_0x427e47));}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_CustomDmgFormula',_0x4e7a11=>{const _0x156513=_0x1e608f;if(!SceneManager[_0x156513(0x5f2)]())return;VisuMZ[_0x156513(0x47c)](_0x4e7a11,_0x4e7a11);const _0x5b3d21=BattleManager['_action'];if(!_0x5b3d21)return;let _0x342dbf=_0x4e7a11[_0x156513(0x1d2)];_0x5b3d21['setCustomDamageFormula'](_0x342dbf);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xcc9),_0x54c3a8=>{const _0x5c0e99=_0x1e608f;if(!SceneManager[_0x5c0e99(0x5f2)]())return;VisuMZ['ConvertParams'](_0x54c3a8,_0x54c3a8);const _0x4ba371=VisuMZ['CreateActionSequenceTargets'](_0x54c3a8[_0x5c0e99(0x6d6)]);for(const _0x17ff96 of _0x4ba371){if(!_0x17ff96)continue;if(_0x17ff96[_0x5c0e99(0x70c)]())_0x17ff96[_0x5c0e99(0xa6c)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x10b),_0x2c54c9=>{const _0x5caa3b=_0x1e608f;if(!SceneManager[_0x5caa3b(0x5f2)]())return;VisuMZ[_0x5caa3b(0x47c)](_0x2c54c9,_0x2c54c9);const _0xef1d4c=$gameTemp['getLastPluginCommandInterpreter'](),_0x41cb27=BattleManager[_0x5caa3b(0x7cb)],_0x5d915e=_0x2c54c9[_0x5caa3b(0x974)];if(!_0xef1d4c)return;if(!_0x41cb27)return;_0x41cb27&&_0x41cb27[_0x5caa3b(0xbdc)]()&&_0x5d915e[_0x5caa3b(0xb11)]()[_0x5caa3b(0x2a9)]()!==_0x5caa3b(0x94a)&&_0xef1d4c[_0x5caa3b(0x2e1)]([_0x5d915e]);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x5ee),_0x116170=>{const _0x3c62f1=_0x1e608f;if(!SceneManager[_0x3c62f1(0x5f2)]())return;VisuMZ['ConvertParams'](_0x116170,_0x116170);const _0xac32a6=$gameTemp[_0x3c62f1(0x68b)](),_0x47779b=BattleManager['_logWindow'];if(!_0xac32a6)return;const _0x51321d=VisuMZ[_0x3c62f1(0x599)](_0x116170['Users']),_0x31e409=VisuMZ[_0x3c62f1(0x599)](_0x116170[_0x3c62f1(0x6d6)]);for(const _0x298472 of _0x51321d){for(const _0x675a05 of _0x31e409){if(!_0x675a05)continue;const _0x38e95b=$dataSkills[_0x298472[_0x3c62f1(0x60b)]()];_0x47779b[_0x3c62f1(0xb79)](_0x3c62f1(0x6df),_0x298472,_0x675a05,_0x38e95b);}}_0xac32a6[_0x3c62f1(0x7b2)](_0x3c62f1(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_EmulateGuardEffect',_0x49a14a=>{const _0xa7380f=_0x1e608f;if(!SceneManager[_0xa7380f(0x5f2)]())return;VisuMZ['ConvertParams'](_0x49a14a,_0x49a14a);const _0x294dc8=$gameTemp[_0xa7380f(0x68b)](),_0x542e5e=BattleManager[_0xa7380f(0xa66)];if(!_0x294dc8)return;const _0x93ccdb=VisuMZ['CreateActionSequenceTargets'](_0x49a14a[_0xa7380f(0x139)]),_0x585bd3=VisuMZ[_0xa7380f(0x599)](_0x49a14a[_0xa7380f(0x6d6)]);for(const _0x5b6101 of _0x93ccdb){if('PyjzL'!=='eesYQ')for(const _0x206405 of _0x585bd3){if(!_0x206405)continue;const _0x4c38e7=$dataSkills[_0x5b6101[_0xa7380f(0xade)]()];_0x542e5e[_0xa7380f(0xb79)](_0xa7380f(0x6df),_0x5b6101,_0x206405,_0x4c38e7);}else _0x3f50dd[_0xa7380f(0xce2)]['ParseWeaponNotetags'][_0xa7380f(0x2d7)](this,_0x37d013);}_0x294dc8[_0xa7380f(0x7b2)](_0xa7380f(0xb8d));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x986),_0x262dc1=>{const _0xf5c44a=_0x1e608f;if(!SceneManager[_0xf5c44a(0x5f2)]())return;VisuMZ['ConvertParams'](_0x262dc1,_0x262dc1);const _0x101a5b=$gameTemp[_0xf5c44a(0x68b)](),_0xac8c3c=BattleManager[_0xf5c44a(0xa66)],_0x375753=Number(_0x262dc1['ItemID']||0x1),_0x5191b6=$dataItems[_0x375753];if(!_0x101a5b)return;if(!_0x5191b6)return;const _0x14efd8=VisuMZ['CreateActionSequenceTargets'](_0x262dc1['Users']),_0x6b1f13=VisuMZ[_0xf5c44a(0x599)](_0x262dc1[_0xf5c44a(0x6d6)]);for(const _0x4f0281 of _0x14efd8){for(const _0x40e6c6 of _0x6b1f13){if(_0xf5c44a(0x4ee)!==_0xf5c44a(0x4ee))return this['_scene']&&this['_scene'][_0xf5c44a(0x5c0)]===_0x37e35a;else{if(!_0x40e6c6)continue;_0xac8c3c['push']('emulateActionEffect',_0x4f0281,_0x40e6c6,_0x5191b6);}}}_0x101a5b['setWaitMode'](_0xf5c44a(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x8fe),_0x317261=>{const _0x282c8a=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x282c8a(0x47c)](_0x317261,_0x317261);let _0x3f8d0a=Number(_0x317261[_0x282c8a(0x769)]||0x0);if(_0x3f8d0a<=0x0){const _0x459d1c=BattleManager['_action'];if(_0x459d1c&&_0x459d1c[_0x282c8a(0x8fb)]())_0x3f8d0a=_0x459d1c[_0x282c8a(0xa0b)]()['id'];else{if(_0x282c8a(0x90f)!=='PDFSk')_0x217c1f+=_0x1bb6e6(_0x5be13b['$1']);else return;}}const _0x2095c6=$dataSkills[_0x3f8d0a];if(!_0x2095c6)return;const _0x2abbc8=VisuMZ[_0x282c8a(0x599)](_0x317261[_0x282c8a(0x139)]);for(const _0x2f347a of _0x2abbc8){if(_0x282c8a(0x453)!=='nmHdw')_0x2f347a[_0x282c8a(0x634)](_0x2095c6);else{const _0x54b35e=this[_0x282c8a(0x205)]();this[_0x282c8a(0x447)]=![],_0x54b35e&&this[_0x282c8a(0xc1f)]&&this[_0x282c8a(0x4ea)](),this[_0x282c8a(0xc1f)]=![],this[_0x282c8a(0xd5d)](),this[_0x282c8a(0xbdc)]()&&_0x54b35e&&(this[_0x282c8a(0x73a)](),this[_0x282c8a(0xc75)]());}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xae6),_0x3cec4c=>{const _0xab47e4=_0x1e608f;if(!SceneManager[_0xab47e4(0x5f2)]())return;VisuMZ['ConvertParams'](_0x3cec4c,_0x3cec4c);const _0x322f74=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d088b=BattleManager[_0xab47e4(0xa66)],_0x3f1ccb=Number(_0x3cec4c[_0xab47e4(0x769)]||0x1),_0x180979=$dataSkills[_0x3f1ccb];if(!_0x322f74)return;if(!_0x180979)return;const _0x3877c8=VisuMZ['CreateActionSequenceTargets'](_0x3cec4c[_0xab47e4(0x139)]),_0x148f68=VisuMZ[_0xab47e4(0x599)](_0x3cec4c[_0xab47e4(0x6d6)]);for(const _0x431216 of _0x3877c8){if(_0xab47e4(0xbe8)!==_0xab47e4(0x95c))for(const _0x4af5d8 of _0x148f68){if(!_0x4af5d8)continue;_0x3d088b[_0xab47e4(0xb79)](_0xab47e4(0x6df),_0x431216,_0x4af5d8,_0x180979);}else this[_0xab47e4(0x507)]();}_0x322f74[_0xab47e4(0x7b2)](_0xab47e4(0xb8d));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x57d),_0x176c69=>{const _0x4facb1=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4facb1(0x47c)](_0x176c69,_0x176c69);const _0x3b0c42=VisuMZ[_0x4facb1(0x599)](_0x176c69[_0x4facb1(0x6d6)]);for(const _0x36d55a of _0x3b0c42){if(_0x4facb1(0xb9f)===_0x4facb1(0xb9f)){if(!_0x36d55a)continue;if(!_0x36d55a[_0x4facb1(0xbab)]())continue;_0x36d55a[_0x4facb1(0x5aa)]();}else{const _0x275c4c=this[_0x4facb1(0x73c)],_0x5e9895=(_0x275c4c/this['mhp'])[_0x4facb1(0xb1d)](0.8,0x1),_0x2afefb=_0xe92946[_0x4facb1(0x26a)]??0x30,_0x275d46=_0x5e9895*_0x2afefb;_0x3c1da7[_0x4facb1(0xb10)](_0x275d46,_0x5e9895);}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_EtbAction',_0x5937c1=>{const _0x3398c4=_0x1e608f;if(!SceneManager[_0x3398c4(0x5f2)]())return;if(!Imported[_0x3398c4(0xa65)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x3398c4(0x47c)](_0x5937c1,_0x5937c1);const _0x21b808=_0x5937c1[_0x3398c4(0x353)];BattleManager[_0x3398c4(0x7cb)]&&BattleManager['_subject']['friendsUnit']()[_0x3398c4(0x45d)](_0x21b808);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc3c),_0x591866=>{const _0x1dd913=_0x1e608f;if(!SceneManager[_0x1dd913(0x5f2)]())return;if(!Imported[_0x1dd913(0x622)])return;if(!BattleManager['isFTB']())return;VisuMZ['ConvertParams'](_0x591866,_0x591866);const _0x570889=_0x591866[_0x1dd913(0x353)];BattleManager[_0x1dd913(0x7cb)]&&(_0x1dd913(0xa36)!=='SxUzF'?(this[_0x1dd913(0xc55)]=0x0,_0x4c588e['setBlendColor']([0x0,0x0,0x0,0x0])):BattleManager[_0x1dd913(0x7cb)][_0x1dd913(0x406)]()[_0x1dd913(0x8d0)](_0x570889));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x860),_0x254564=>{const _0x24b91d=_0x1e608f;if(!SceneManager[_0x24b91d(0x5f2)]())return;VisuMZ[_0x24b91d(0x47c)](_0x254564,_0x254564);const _0x5a2b1d=VisuMZ[_0x24b91d(0x599)](_0x254564['Targets']),_0x255f7b=_0x254564[_0x24b91d(0x8df)],_0x1ef511=_0x254564[_0x24b91d(0x8b2)],_0x1efce0=_0x254564[_0x24b91d(0x396)],_0x54bb41=_0x254564[_0x24b91d(0xbde)],_0x101073=_0x254564[_0x24b91d(0x38f)],_0x3b1cce=_0x254564[_0x24b91d(0x467)],_0x565323=_0x254564[_0x24b91d(0x95a)];for(const _0x4d5cf3 of _0x5a2b1d){if(!_0x4d5cf3)continue;const _0xa94d69=_0x4d5cf3[_0x24b91d(0x205)](),_0x30e05d=Math[_0x24b91d(0x1a5)](_0x255f7b*_0x4d5cf3['mhp']+_0x1ef511),_0x1e96fc=Math[_0x24b91d(0x1a5)](_0x1efce0*_0x4d5cf3[_0x24b91d(0x153)]+_0x54bb41),_0x33bdf2=Math[_0x24b91d(0x1a5)](_0x101073*_0x4d5cf3[_0x24b91d(0x3dc)]()+_0x3b1cce);if(_0x30e05d!==0x0)_0x4d5cf3[_0x24b91d(0xa9a)](_0x30e05d);if(_0x1e96fc!==0x0)_0x4d5cf3[_0x24b91d(0x22f)](_0x1e96fc);if(_0x33bdf2!==0x0)_0x4d5cf3['gainTp'](_0x33bdf2);if(_0x565323)_0x4d5cf3[_0x24b91d(0xa6c)]();_0xa94d69&&_0x4d5cf3['isDead']()&&(_0x24b91d(0xc07)!=='RzXSo'?_0x1341ad+=_0x1d89bd:_0x4d5cf3[_0x24b91d(0x73a)]());}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_Immortal',_0x1b7e90=>{const _0x3ba2c7=_0x1e608f;if(!SceneManager[_0x3ba2c7(0x5f2)]())return;VisuMZ['ConvertParams'](_0x1b7e90,_0x1b7e90);const _0x410877=VisuMZ[_0x3ba2c7(0x599)](_0x1b7e90[_0x3ba2c7(0x6d6)]);for(const _0x243157 of _0x410877){if(!_0x243157)continue;_0x243157[_0x3ba2c7(0x165)](_0x1b7e90['Immortal']);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc3f),_0x50b107=>{const _0x3b62c8=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b62c8(0x47c)](_0x50b107,_0x50b107);const _0x5bd63c=BattleManager['_action'],_0x58b359={'criticalHitRate':_0x50b107[_0x3b62c8(0x203)],'criticalHitFlat':_0x50b107[_0x3b62c8(0x32f)],'criticalDmgRate':_0x50b107['CriticalDmgRate'],'criticalDmgFlat':_0x50b107[_0x3b62c8(0xbcd)],'damageRate':_0x50b107[_0x3b62c8(0x441)],'damageFlat':_0x50b107[_0x3b62c8(0xa13)],'hitRate':_0x50b107['HitRate'],'hitFlat':_0x50b107[_0x3b62c8(0x917)]};_0x5bd63c[_0x3b62c8(0x3e0)]=_0x58b359;}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x21c),_0x4b14b4=>{const _0x1bda2b=_0x1e608f;if(!SceneManager[_0x1bda2b(0x5f2)]())return;VisuMZ[_0x1bda2b(0x47c)](_0x4b14b4,_0x4b14b4);const _0x28e689=_0x4b14b4[_0x1bda2b(0x78d)];SceneManager[_0x1bda2b(0x327)][_0x1bda2b(0x1aa)](_0x28e689);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x490),_0x202349=>{const _0x467b21=_0x1e608f;if(!SceneManager[_0x467b21(0x5f2)]())return;if(!Imported[_0x467b21(0x9a4)])return;if(!BattleManager[_0x467b21(0x7b9)]())return;VisuMZ[_0x467b21(0x47c)](_0x202349,_0x202349);const _0x3b720e=VisuMZ[_0x467b21(0x599)](_0x202349[_0x467b21(0x6d6)]);for(const _0x1a2157 of _0x3b720e){if(_0x467b21(0x52e)!=='cBOpt'){if(!_0x1a2157)continue;let _0x1ec06a=_0x202349[_0x467b21(0x1de)],_0x26d010=_0x202349[_0x467b21(0x949)],_0x58735d=_0x202349['FollowTurn'];if(BattleManager[_0x467b21(0x5ba)][_0x467b21(0xc3d)](_0x1a2157)){if(_0x467b21(0xc90)===_0x467b21(0x7f5))return!![];else _0x1ec06a+=_0x58735d;}else{if('ChOPR'!=='WiyJg')_0x26d010+=_0x58735d;else return _0x31ae22[_0x467b21(0xce2)][_0x467b21(0x4a9)][_0x467b21(0x409)][_0x467b21(0x301)][_0x467b21(0x2d7)](this);}BattleManager['turnOrderChangeOTB'](_0x1a2157,-_0x1ec06a,![]),BattleManager[_0x467b21(0x611)](_0x1a2157,-_0x26d010,!![]);}else{if(!_0xd75dfb['isSideView']())return;const _0x5b7ac8=this[_0x467b21(0x8dd)]();if(!_0x5b7ac8)return;_0x39dedf=_0x26e2df||0x0;if(_0x129ca4>0x0){if(_0x5b7ac8[_0x467b21(0x8d8)]>_0x229cfd)_0x4c8661+=_0x5b7ac8[_0x467b21(0x78f)]/0x2+_0x284317;if(_0x5b7ac8[_0x467b21(0x8d8)]<_0x643e54)_0x264085-=_0x5b7ac8[_0x467b21(0x78f)]/0x2+_0x5a5656;}if(_0x357837)this[_0x467b21(0x3c0)](_0x4f613b,_0x1a9a45,![]);_0x5b7ac8[_0x467b21(0xcf8)](_0x525ce9,_0xebf749,_0x53128a,_0x483e55),this[_0x467b21(0x6b1)]=_0x5943a6,this[_0x467b21(0xa20)]=_0x7a812b;}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x2e9),_0x3f46b8=>{const _0x1be5f4=_0x1e608f;if(!SceneManager[_0x1be5f4(0x5f2)]())return;if(!Imported[_0x1be5f4(0xcb1)])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x3f46b8,_0x3f46b8);const _0x16da81=BattleManager['_subject']['friendsUnit'](),_0x5b9d2d=_0x3f46b8[_0x1be5f4(0x52b)],_0x42012b=_0x3f46b8[_0x1be5f4(0x878)]||_0x1be5f4(0x62a),_0x1f5471=_0x3f46b8['alterType']||_0x1be5f4(0x62a),_0x4e40fa=_0x3f46b8[_0x1be5f4(0xd68)]||0x0,_0x3935e9=_0x3f46b8[_0x1be5f4(0x65d)]||0x0;if(_0x16da81[_0x1be5f4(0x7cd)]()||_0x5b9d2d){if(_0x1be5f4(0x9fb)===_0x1be5f4(0x7e4)){this[_0x1be5f4(0xc8e)]=this[_0x1be5f4(0x427)]();const _0x4c2732=_0x2a6c9c[_0x1be5f4(0xce2)][_0x1be5f4(0x4a9)][_0x1be5f4(0x51a)];_0x4c2732[_0x1be5f4(0xa39)]&&(this[_0x1be5f4(0xb1b)]=0x0);}else _0x5b9d2d&&('Lspax'!==_0x1be5f4(0x3bf)?(_0x16da81[_0x1be5f4(0xc46)]=_0x16da81[_0x1be5f4(0xc46)]||{},_0x16da81[_0x1be5f4(0xc46)][_0x1be5f4(0x8ce)]=0x0):_0x53c025?(this[_0x1be5f4(0xa9c)]['x']=(_0x3f921c['width']-_0x21a465[_0x1be5f4(0x748)])/0x2,this[_0x1be5f4(0xa9c)]['y']=(_0x3f15e6[_0x1be5f4(0x96b)]-_0x15cf30['boxHeight'])/0x2):(this[_0x1be5f4(0xa9c)]['x']=_0x14aeb8[_0x1be5f4(0x78f)]*0xa,this['_windowLayer']['y']=_0x418678[_0x1be5f4(0x96b)]*0xa)),_0x16da81[_0x1be5f4(0x2ec)](_0x42012b,_0x1f5471,_0x4e40fa,_0x3935e9);}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xc20),_0x16fd85=>{const _0x2610da=_0x1e608f;if(!SceneManager[_0x2610da(0x5f2)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2610da(0xbd3)]())return;VisuMZ[_0x2610da(0x47c)](_0x16fd85,_0x16fd85);const _0x1d0a8d=BattleManager[_0x2610da(0x7cb)][_0x2610da(0x406)]();let _0x3c72fb=Math[_0x2610da(0x127)](_0x16fd85['ConvertCount'],0x0),_0x4d6138=_0x1d0a8d['getFullActionsPTB'](),_0x21fdff=_0x1d0a8d[_0x2610da(0xaa7)]();while(_0x3c72fb--){if(_0x4d6138<=0x0&&_0x21fdff<=0x0)break;else _0x4d6138>0x0?(_0x4d6138--,_0x21fdff++):_0x21fdff--;}_0x1d0a8d[_0x2610da(0x8fa)](_0x4d6138),_0x1d0a8d[_0x2610da(0x306)](_0x21fdff);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x652),_0x1caa45=>{const _0x10c5ac=_0x1e608f;if(!SceneManager[_0x10c5ac(0x5f2)]())return;if(!Imported[_0x10c5ac(0xcb1)])return;if(!BattleManager[_0x10c5ac(0xbd3)]())return;VisuMZ[_0x10c5ac(0x47c)](_0x1caa45,_0x1caa45);const _0x336e4e=BattleManager[_0x10c5ac(0x7cb)]['friendsUnit']();let _0x2a2099=_0x1caa45[_0x10c5ac(0xb01)],_0x1015df=_0x1caa45[_0x10c5ac(0x4b0)];_0x336e4e[_0x10c5ac(0x174)](_0x2a2099),_0x336e4e[_0x10c5ac(0x31c)](_0x1015df);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x29cb55=>{const _0x4adde8=_0x1e608f;if(!SceneManager[_0x4adde8(0x5f2)]())return;VisuMZ[_0x4adde8(0x47c)](_0x29cb55,_0x29cb55);const _0x520fbf=['MAXHP',_0x4adde8(0x432),_0x4adde8(0x5ae),'DEF',_0x4adde8(0xb12),_0x4adde8(0x5a8),_0x4adde8(0x2d5),'LUK'],_0x4108dd=_0x29cb55[_0x4adde8(0xaa4)],_0x5eb1b0=_0x29cb55['Debuffs'],_0x28a5de=VisuMZ['CreateActionSequenceTargets'](_0x29cb55[_0x4adde8(0x6d6)]);for(const _0x120d1e of _0x28a5de){if('jAMwD'!==_0x4adde8(0x89c)){if(!_0x120d1e)continue;for(const _0x894b10 of _0x4108dd){const _0x58ee9e=_0x520fbf['indexOf'](_0x894b10['toUpperCase']()[_0x4adde8(0x2a9)]());if(_0x58ee9e>=0x0&&_0x58ee9e<=0x7&&_0x120d1e['isBuffAffected'](_0x58ee9e)){if(_0x4adde8(0x400)!==_0x4adde8(0x400)){const _0x2baa6c=_0x3e81e8[_0x4adde8(0xce2)]['Settings']['Enemy'];_0x2baa6c[_0x4adde8(0x5d8)]?this['autoSelectLastSelected']():this[_0x4adde8(0xd32)]();}else _0x120d1e[_0x4adde8(0xaea)](_0x58ee9e);}}for(const _0x246d74 of _0x5eb1b0){if(_0x4adde8(0xa43)===_0x4adde8(0xa43)){const _0x27a95a=_0x520fbf[_0x4adde8(0x8fc)](_0x246d74['toUpperCase']()['trim']());_0x27a95a>=0x0&&_0x27a95a<=0x7&&_0x120d1e[_0x4adde8(0x8a0)](_0x27a95a)&&_0x120d1e[_0x4adde8(0xaea)](_0x27a95a);}else _0x3e8aac[_0x4adde8(0x4ba)](_0x4e3202);}}else _0x46eb2b['prototype'][_0x4adde8(0xb20)]['call'](this);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_RemoveState',_0x5092f1=>{const _0x4d456e=_0x1e608f;if(!SceneManager[_0x4d456e(0x5f2)]())return;VisuMZ[_0x4d456e(0x47c)](_0x5092f1,_0x5092f1);const _0x46e4d9=_0x5092f1[_0x4d456e(0x6d8)],_0x2d9764=VisuMZ['CreateActionSequenceTargets'](_0x5092f1[_0x4d456e(0x6d6)]);for(const _0x21b5a0 of _0x2d9764){if(!_0x21b5a0)continue;for(const _0x404ffa of _0x46e4d9){if('gKmpn'!=='gKmpn'){const _0x101e5f=_0x2aaba7(_0x53229e['$1']),_0x3e6f5f=_0x39e926['BattleCore'][_0x4d456e(0x1eb)](_0x10cb56,_0x4d456e(0x1ce));_0x33bdc[_0x4d456e(0xce2)][_0x4d456e(0x853)](_0x101e5f,_0x3e6f5f);}else _0x21b5a0['removeState'](_0x404ffa);}}}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x21d),_0x2bd4da=>{const _0x30e48b=_0x1e608f;if(!SceneManager[_0x30e48b(0x5f2)]())return;if(!Imported[_0x30e48b(0x3ef)])return;VisuMZ[_0x30e48b(0x47c)](_0x2bd4da,_0x2bd4da);const _0x55ad70=VisuMZ[_0x30e48b(0x599)](_0x2bd4da[_0x30e48b(0x6d6)]),_0x1999ff=Number(_0x2bd4da[_0x30e48b(0xbb6)]),_0x31414c=Number(_0x2bd4da[_0x30e48b(0x535)]),_0x1bf30e=_0x2bd4da['AutoAddState'];for(const _0x225973 of _0x55ad70){if('rhVOK'!==_0x30e48b(0x8e4))this[_0x30e48b(0x49f)]();else{if(!_0x225973)continue;_0x1bf30e&&!_0x225973[_0x30e48b(0xaf3)](_0x1999ff)?(_0x225973['addState'](_0x1999ff),_0x225973[_0x30e48b(0xc9d)](_0x1999ff,_0x31414c)):_0x30e48b(0x638)!==_0x30e48b(0x8f4)?_0x225973[_0x30e48b(0xb8a)](_0x1999ff,_0x31414c):delete _0x4b9117[_0x30e48b(0x50c)][_0x30e48b(0xc6e)];}}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x24b),_0x46bcef=>{const _0x12c3c0=_0x1e608f;if(!SceneManager[_0x12c3c0(0x5f2)]())return;if(!Imported[_0x12c3c0(0x3ef)])return;VisuMZ[_0x12c3c0(0x47c)](_0x46bcef,_0x46bcef);const _0xe677a7=VisuMZ['CreateActionSequenceTargets'](_0x46bcef[_0x12c3c0(0x6d6)]),_0x184262=Number(_0x46bcef[_0x12c3c0(0xbb6)]),_0x132666=Math[_0x12c3c0(0x127)](Number(_0x46bcef[_0x12c3c0(0x535)]),0x0),_0x13820b=_0x46bcef['AutoAddState'];for(const _0x35d8a7 of _0xe677a7){if(_0x12c3c0(0xd82)===_0x12c3c0(0x239)){if(_0x5efd01===_0x144ccd['actor']())return![];}else{if(!_0x35d8a7)continue;_0x13820b&&!_0x35d8a7[_0x12c3c0(0xaf3)](_0x184262)&&_0x35d8a7[_0x12c3c0(0xccd)](_0x184262),_0x35d8a7[_0x12c3c0(0xc9d)](_0x184262,_0x132666);}}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xce8),_0x3685b0=>{const _0x3bf005=_0x1e608f;if(!SceneManager[_0x3bf005(0x5f2)]())return;if(!Imported[_0x3bf005(0xc79)])return;if(!BattleManager[_0x3bf005(0xa88)]())return;VisuMZ[_0x3bf005(0x47c)](_0x3685b0,_0x3685b0);const _0x1fce52=_0x3685b0[_0x3bf005(0x6f8)],_0x38c265=VisuMZ[_0x3bf005(0x599)](_0x3685b0['Targets']),_0x3a9fdc=_0x3685b0[_0x3bf005(0xc02)],_0x98b327=_0x3685b0[_0x3bf005(0xb37)],_0x344f71=_0x3685b0[_0x3bf005(0xc1a)],_0x15e58e=BattleManager[_0x3bf005(0xa4d)];if(_0x1fce52)for(const _0x2ae860 of _0x38c265){if(_0x3bf005(0xae5)===_0x3bf005(0xae5)){if(!_0x2ae860)continue;if(_0x2ae860===user)continue;if(_0x3a9fdc)_0x2ae860[_0x3bf005(0x331)](![]);_0x2ae860[_0x3bf005(0x9fc)](BattleManager['_subject'],_0x15e58e);}else _0xc7ec73[_0x3bf005(0x593)]();}if(_0x98b327&&BattleManager['_subject']){if(_0x344f71)BattleManager[_0x3bf005(0x7cb)][_0x3bf005(0x331)](![]);const _0x361a4b=_0x38c265[0x0];BattleManager[_0x3bf005(0xac7)](_0x361a4b,_0x15e58e);}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x40a),_0x3b2dd7=>{const _0x21a659=_0x1e608f;if(!SceneManager[_0x21a659(0x5f2)]())return;if(!Imported[_0x21a659(0xc79)])return;if(!BattleManager[_0x21a659(0xa88)]())return;VisuMZ['ConvertParams'](_0x3b2dd7,_0x3b2dd7);const _0x23f501=_0x3b2dd7[_0x21a659(0x138)];BattleManager[_0x21a659(0x7cb)]&&BattleManager[_0x21a659(0x7cb)][_0x21a659(0xada)](_0x23f501);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x59e),_0x40b38a=>{const _0x303c17=_0x1e608f;if(!SceneManager[_0x303c17(0x5f2)]())return;if(!Imported[_0x303c17(0xc79)])return;if(!BattleManager[_0x303c17(0xa88)]())return;VisuMZ['ConvertParams'](_0x40b38a,_0x40b38a);let _0x43dcf7=_0x40b38a[_0x303c17(0x138)];if(BattleManager[_0x303c17(0x7cb)]){if('ojlTY'!==_0x303c17(0xcf9)){_0x51abf6[_0x303c17(0xbe1)]['activate'][_0x303c17(0x2d7)](this);const _0x630a4e=this[_0x303c17(0x687)]();_0x630a4e===_0x303c17(0xd11)&&this[_0x303c17(0x5d2)]();}else{BattleManager[_0x303c17(0x7cb)][_0x303c17(0x49d)]=BattleManager[_0x303c17(0x7cb)][_0x303c17(0x49d)]||[];while(_0x43dcf7--){if('yZXEd'==='HKjXt')_0x369f3e[_0x303c17(0x65a)]()&&_0xf5dc3f[_0x303c17(0x28c)]()&&this[_0x303c17(0xb79)](_0x303c17(0xaa8),_0x1b3285,_0x485fe4),_0x5405a6[_0x303c17(0xa0b)]()['animationId']<0x0?this[_0x303c17(0x29d)](_0x322d9a,_0x397cc7,_0x4c5e35):this['wholeActionSet'](_0x46928a,_0x4c15a5,_0x571f8e);else{if(BattleManager[_0x303c17(0x7cb)]['_actions'][_0x303c17(0xcaf)]<=0x0)break;BattleManager[_0x303c17(0x7cb)][_0x303c17(0x49d)][_0x303c17(0x97d)]();}}}}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa96),_0x51fb4a=>{const _0x4e94a7=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x4e94a7(0x47c)](_0x51fb4a,_0x51fb4a);const _0x570bd9=VisuMZ[_0x4e94a7(0x599)](_0x51fb4a['Targets']),_0xe215a5=_0x51fb4a[_0x4e94a7(0x8ae)];for(const _0x55666c of _0x570bd9){if(!_0x55666c)continue;if(!_0x55666c[_0x4e94a7(0x28c)]())continue;_0x55666c[_0x4e94a7(0x4c1)](_0xe215a5);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc24),_0x1ca8f0=>{const _0x49f74e=_0x1e608f;if(!SceneManager[_0x49f74e(0x5f2)]())return;VisuMZ[_0x49f74e(0x47c)](_0x1ca8f0,_0x1ca8f0);const _0x524b7c=VisuMZ[_0x49f74e(0x599)](_0x1ca8f0[_0x49f74e(0x6d6)]),_0x2d95a2=_0x1ca8f0[_0x49f74e(0x38a)],_0x4153ec={'textColor':ColorManager[_0x49f74e(0xd5a)](_0x1ca8f0[_0x49f74e(0xd2c)]),'flashColor':_0x1ca8f0[_0x49f74e(0x20a)],'flashDuration':_0x1ca8f0['FlashDuration']};for(const _0x529cfc of _0x524b7c){if(_0x49f74e(0x493)!==_0x49f74e(0x493))_0x2d0b75[_0x49f74e(0x569)](this[_0x49f74e(0x8b4)]());else{if(!_0x529cfc)continue;_0x529cfc[_0x49f74e(0x2ca)](_0x2d95a2,_0x4153ec);}}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Mechanics_VariablePopup',_0x40596d=>{const _0x5b717a=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b717a(0x47c)](_0x40596d,_0x40596d);const _0x50dfff=VisuMZ['CreateActionSequenceTargets'](_0x40596d[_0x5b717a(0x6d6)]);let _0x50cd97=$gameVariables[_0x5b717a(0x1c6)](_0x40596d[_0x5b717a(0xa59)]);Imported[_0x5b717a(0x8b3)]&&_0x40596d['DigitGrouping']&&(_0x50cd97=VisuMZ[_0x5b717a(0x710)](_0x50cd97));const _0x5cc5d6=String(_0x50cd97),_0x4debc4={'textColor':ColorManager[_0x5b717a(0xd5a)](_0x40596d[_0x5b717a(0xd2c)]),'flashColor':_0x40596d[_0x5b717a(0x20a)],'flashDuration':_0x40596d[_0x5b717a(0xc77)]};for(const _0x22ed5c of _0x50dfff){if(!_0x22ed5c)continue;_0x22ed5c[_0x5b717a(0x2ca)](_0x5cc5d6,_0x4debc4);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Mechanics_WaitForEffect',_0x536641=>{const _0x1e431f=_0x1e608f;if(!SceneManager[_0x1e431f(0x5f2)]())return;const _0x3ad4d5=$gameTemp[_0x1e431f(0x68b)]();if(!_0x3ad4d5)return;_0x3ad4d5['setWaitMode']('battleEffect');}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0x262aa5=>{const _0x1dc1f8=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1dc1f8(0x47c)](_0x262aa5,_0x262aa5);const _0x4c2324=VisuMZ[_0x1dc1f8(0x599)](_0x262aa5[_0x1dc1f8(0x6d6)]);for(const _0x5e6ac1 of _0x4c2324){if(_0x1dc1f8(0x59c)===_0x1dc1f8(0x59c)){if(!_0x5e6ac1)continue;_0x5e6ac1[_0x1dc1f8(0x32a)]();}else _0x5063db[_0x1dc1f8(0xce2)][_0x1dc1f8(0x30c)][_0x1dc1f8(0x2d7)](this);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6fa),_0x32a34b=>{const _0x3dad73=_0x1e608f;if(!SceneManager[_0x3dad73(0x5f2)]())return;VisuMZ[_0x3dad73(0x47c)](_0x32a34b,_0x32a34b);const _0x4e7754=VisuMZ[_0x3dad73(0x599)](_0x32a34b['Targets']),_0x318106=_0x32a34b[_0x3dad73(0xd84)][_0x3dad73(0x377)]()[_0x3dad73(0x2a9)]();let _0x1ea6ca=_0x32a34b[_0x3dad73(0x9d5)];const _0x152a3e=_0x32a34b[_0x3dad73(0x63a)];![_0x3dad73(0x16c),_0x3dad73(0xa69),_0x3dad73(0x937),'missile'][_0x3dad73(0xc3d)](_0x318106)&&(_0x3dad73(0x2cb)===_0x3dad73(0x2cb)?_0x1ea6ca=![]:this[_0x3dad73(0xbb2)]());for(const _0x326c74 of _0x4e7754){if(!_0x326c74)continue;_0x326c74[_0x3dad73(0xac2)](_0x318106,_0x1ea6ca,_0x152a3e);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Motion_MotionType',_0x539838=>{const _0x1db16f=_0x1e608f;if(!SceneManager[_0x1db16f(0x5f2)]())return;VisuMZ[_0x1db16f(0x47c)](_0x539838,_0x539838);const _0x5587a1=VisuMZ['CreateActionSequenceTargets'](_0x539838[_0x1db16f(0x6d6)]),_0x2e1390=_0x539838[_0x1db16f(0xd84)][_0x1db16f(0x377)]()[_0x1db16f(0x2a9)](),_0x3f76bd=_0x539838[_0x1db16f(0x9d5)];for(const _0x590704 of _0x5587a1){if(!_0x590704)continue;_0x590704[_0x1db16f(0x19d)]=_0x3f76bd;if(_0x2e1390[_0x1db16f(0x97b)](/ATTACK[ ](\d+)/i))_0x590704[_0x1db16f(0x7e3)](Number(RegExp['$1']));else _0x2e1390==='attack'?_0x590704['performAttack']():_0x1db16f(0xcfc)!==_0x1db16f(0xcfc)?_0x229609[_0x1db16f(0xb5d)]?this[_0x1db16f(0x36d)]=_0x1db16f(0x44e):this[_0x1db16f(0x36d)]='default':_0x590704[_0x1db16f(0x7c6)](_0x2e1390);if(!_0x3f76bd)_0x1db16f(0x128)==='yRKzj'?_0x590704['startWeaponAnimation'](0x0):this['placeGauge'](_0x77c774,'tp',_0x298546+0x88*0x2+(_0x125eff[_0x1db16f(0x755)]||0x0),_0x5ac2bb+(_0x523c49[_0x1db16f(0xd37)]||0x0));else{if(_0x3f76bd&&[_0x1db16f(0xa69),_0x1db16f(0x937),_0x1db16f(0x25c)][_0x1db16f(0xc3d)](_0x2e1390)){}}_0x590704[_0x1db16f(0x19d)]=undefined;}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Motion_PerformAction',_0x17972b=>{const _0x14eccb=_0x1e608f;if(!SceneManager[_0x14eccb(0x5f2)]())return;VisuMZ[_0x14eccb(0x47c)](_0x17972b,_0x17972b);const _0x22e83c=BattleManager[_0x14eccb(0xa4d)];if(!_0x22e83c)return;if(!_0x22e83c[_0x14eccb(0xa0b)]())return;const _0x4989ec=VisuMZ[_0x14eccb(0x599)](_0x17972b['Targets']);for(const _0x1cfa2a of _0x4989ec){if(_0x14eccb(0x76b)!==_0x14eccb(0x362)){if(!_0x1cfa2a)continue;_0x1cfa2a[_0x14eccb(0x695)](_0x22e83c);}else{const _0x528cce=this[_0x14eccb(0x687)]();(_0x528cce==='border'||this[_0x14eccb(0x281)]())&&(this['_skillWindow'][_0x14eccb(0x9ff)](),this[_0x14eccb(0x2ee)][_0x14eccb(0x197)]&&this[_0x14eccb(0x2ee)][_0x14eccb(0x478)](),this['_itemWindow'][_0x14eccb(0x9ff)](),this['_itemWindow'][_0x14eccb(0x197)]&&this[_0x14eccb(0x1cf)]['show']());}}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Motion_RefreshMotion',_0x4f724e=>{const _0x19a322=_0x1e608f;if(!SceneManager[_0x19a322(0x5f2)]())return;VisuMZ[_0x19a322(0x47c)](_0x4f724e,_0x4f724e);const _0x2e6566=VisuMZ['CreateActionSequenceTargets'](_0x4f724e[_0x19a322(0x6d6)]);for(const _0x4be30c of _0x2e6566){if(!_0x4be30c)continue;if(!_0x4be30c['battler']())continue;_0x4be30c[_0x19a322(0x8dd)]()['refreshMotion']();}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x358),_0xd82fd6=>{const _0x973e3c=_0x1e608f;if(!SceneManager[_0x973e3c(0x5f2)]())return;VisuMZ[_0x973e3c(0x47c)](_0xd82fd6,_0xd82fd6);const _0x29219a=$gameTemp[_0x973e3c(0x68b)](),_0x5cdb8d=_0xd82fd6['MotionFrameWait']*Sprite_Battler[_0x973e3c(0xa12)];_0x29219a['wait'](_0x5cdb8d);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x760),_0x262a1b=>{const _0x4ad2d7=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4ad2d7(0x47c)](_0x262a1b,_0x262a1b);const _0x2e12f2=$gameTemp['getLastPluginCommandInterpreter'](),_0x1cddbb=BattleManager['_action'];if(!_0x2e12f2||!_0x1cddbb)return;if(!_0x1cddbb[_0x4ad2d7(0xa0b)]())return;const _0x231458=VisuMZ[_0x4ad2d7(0x599)](_0x262a1b['Targets']);for(const _0xa2bb69 of _0x231458){if('JMWll'===_0x4ad2d7(0x705))return _0x12130e[_0x4ad2d7(0xce2)][_0x4ad2d7(0x4a9)][_0x4ad2d7(0x2db)][_0x4ad2d7(0x650)][_0x4ad2d7(0x2d7)](this,_0x29b37b,_0x586558);else{if(!_0xa2bb69)continue;_0xa2bb69[_0x4ad2d7(0x834)](_0x1cddbb);}}if(_0x262a1b['WaitForMovement'])_0x2e12f2[_0x4ad2d7(0x7b2)](_0x4ad2d7(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x16a),_0x559bd5=>{const _0x1e41f3=_0x1e608f;if(!SceneManager[_0x1e41f3(0x5f2)]())return;if(!$gameSystem[_0x1e41f3(0x3e6)]())return;VisuMZ[_0x1e41f3(0x47c)](_0x559bd5,_0x559bd5);const _0x4a6ee3=$gameTemp['getLastPluginCommandInterpreter'](),_0x54e466=VisuMZ[_0x1e41f3(0x599)](_0x559bd5[_0x1e41f3(0x6d6)]),_0x406080=_0x559bd5[_0x1e41f3(0x150)],_0xf512ba=_0x559bd5['DistanceX'],_0x399e16=_0x559bd5[_0x1e41f3(0x312)],_0x27b2c9=_0x559bd5[_0x1e41f3(0x39d)],_0x4b7543=_0x559bd5['FaceDirection'],_0x5d5480=_0x559bd5[_0x1e41f3(0x9a8)],_0x5eb2b9=_0x559bd5[_0x1e41f3(0xd84)],_0x1f6571=_0x559bd5[_0x1e41f3(0xb7f)];if(!_0x4a6ee3)return;for(const _0x10d740 of _0x54e466){if(!_0x10d740)continue;let _0x535834=_0xf512ba,_0x3c5f54=_0x399e16;if(_0x406080['match'](/horz/i))_0x535834*=_0x10d740['isActor']()?-0x1:0x1;if(_0x406080[_0x1e41f3(0x97b)](/vert/i))_0x3c5f54*=_0x10d740[_0x1e41f3(0x28c)]()?-0x1:0x1;_0x10d740[_0x1e41f3(0xcf3)](_0x535834,_0x3c5f54,_0x27b2c9,_0x4b7543,_0x5d5480),_0x10d740['requestMotion'](_0x5eb2b9);}if(_0x1f6571)_0x4a6ee3[_0x1e41f3(0x7b2)](_0x1e41f3(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_HomeMoveToJsPoint',_0x43cc89=>{const _0x278c8e=_0x1e608f;if(!SceneManager[_0x278c8e(0x5f2)]())return;if(!$gameSystem[_0x278c8e(0x3e6)]())return;VisuMZ[_0x278c8e(0x47c)](_0x43cc89,_0x43cc89);const _0x995fd8=$gameTemp[_0x278c8e(0x68b)](),_0x1f2daa=VisuMZ[_0x278c8e(0x599)](_0x43cc89[_0x278c8e(0x6d6)]),_0xd09af5=_0x43cc89[_0x278c8e(0x4a1)],_0xb5e2ed=_0x43cc89[_0x278c8e(0x4df)],_0x14373e=_0x43cc89[_0x278c8e(0x2c2)],_0x5fcf44=_0x43cc89[_0x278c8e(0x39d)],_0x44b46a=_0x43cc89[_0x278c8e(0x18d)],_0x285fa8=_0x43cc89['EasingType'],_0x359264=_0x43cc89[_0x278c8e(0xd84)],_0x28e3fc=_0x43cc89[_0x278c8e(0xb7f)];if(!_0x995fd8)return;for(const _0xf40f2d of _0x1f2daa){if(!_0xf40f2d)continue;const _0x25b517=_0x43cc89['DestinationJS'](_0xf40f2d)||{'x':0x0,'y':0x0};let _0xdb45f1=_0x25b517['x'],_0x4c7ba5=_0x25b517['y'];if(_0xd09af5[_0x278c8e(0x97b)](/none/i))_0xdb45f1+=_0xb5e2ed,_0x4c7ba5+=_0x14373e;else{if(_0xd09af5[_0x278c8e(0x97b)](/horz/i)&&_0xd09af5[_0x278c8e(0x97b)](/vert/i)){if(_0x278c8e(0x754)!==_0x278c8e(0x754)){const _0xcef228=_0x25b0c3[_0x278c8e(0xcff)]()?-0x1:0x1;let _0x342105=this[_0x278c8e(0x8d8)];_0x342105+=this['extraPositionX']();let _0x2d1fef=this[_0x278c8e(0x171)];const _0xfe4571=this[_0x278c8e(0x8e8)]['scale']['y'];_0x2d1fef+=this[_0x278c8e(0xabf)]();const _0x2be9c6=_0x148218['_scene'][_0x278c8e(0x496)];if(_0x2be9c6&&this[_0x278c8e(0xbb5)]===_0x2be9c6){_0x342105+=_0x2be9c6['x']-this[_0x278c8e(0xc43)]();const _0x52e00a=_0x2be9c6[_0x278c8e(0x4a7)]()*0x3/0x4;_0x2d1fef=_0x2be9c6['y']+_0x52e00a,_0x2d1fef=_0x44bd1d[_0x278c8e(0xb27)](_0x2d1fef,_0x2be9c6['y']+this['y']-this[_0x278c8e(0x96b)]+_0x52e00a);}_0x9dd145['x']=_0x1bb087[_0x278c8e(0x1a5)](_0x342105+this[_0x278c8e(0xc43)]()*_0xcef228),_0xb9ad65['y']=_0x5b1ac6['round'](_0x2d1fef+this['damageOffsetY']());}else _0xdb45f1+=_0xf40f2d[_0x278c8e(0x28c)]()?-_0xb5e2ed:_0xb5e2ed,_0x4c7ba5+=_0xf40f2d[_0x278c8e(0x28c)]()?-_0x14373e:_0x14373e;}else{if(_0xd09af5[_0x278c8e(0x97b)](/horz/i))_0xdb45f1+=_0xf40f2d[_0x278c8e(0x28c)]()?-_0xb5e2ed:_0xb5e2ed,_0x4c7ba5+=_0x14373e;else _0xd09af5[_0x278c8e(0x97b)](/vert/i)&&('pCphX'==='pCphX'?(_0xdb45f1+=_0xb5e2ed,_0x4c7ba5+=_0xf40f2d[_0x278c8e(0x28c)]()?-_0x14373e:_0x14373e):_0x170a0f=_0x2fe3dd>=_0x420efd?_0x48e90c:_0x56d366);}}_0xf40f2d[_0x278c8e(0x3ff)](_0xdb45f1,_0x4c7ba5,_0x5fcf44,_0x44b46a,_0x285fa8,-0x1),_0xf40f2d['requestMotion'](_0x359264);}if(_0x28e3fc)_0x995fd8[_0x278c8e(0x7b2)](_0x278c8e(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_HomeMoveToPoint',_0x35686c=>{const _0x38d1eb=_0x1e608f;if(!SceneManager[_0x38d1eb(0x5f2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x38d1eb(0x47c)](_0x35686c,_0x35686c);const _0x190d09=$gameTemp[_0x38d1eb(0x68b)](),_0x584295=VisuMZ['CreateActionSequenceTargets'](_0x35686c[_0x38d1eb(0x6d6)]),_0x394015=_0x35686c[_0x38d1eb(0x71f)],_0x136df8=_0x35686c['OffsetAdjust'],_0x3f4a88=_0x35686c[_0x38d1eb(0x4df)],_0x51350d=_0x35686c[_0x38d1eb(0x2c2)],_0x94404=_0x35686c[_0x38d1eb(0x39d)],_0x5829ad=_0x35686c[_0x38d1eb(0x18d)],_0x537af8=_0x35686c[_0x38d1eb(0x9a8)],_0x41905b=_0x35686c[_0x38d1eb(0xd84)],_0x200329=_0x35686c[_0x38d1eb(0xb7f)];if(!_0x190d09)return;for(const _0x3806e4 of _0x584295){if(!_0x3806e4)continue;let _0x1ae024=_0x3806e4['battler']()[_0x38d1eb(0x8d8)],_0x255691=_0x3806e4[_0x38d1eb(0x8dd)]()[_0x38d1eb(0x171)];if(_0x394015['match'](/home/i))_0x1ae024=_0x3806e4[_0x38d1eb(0x8dd)]()['_homeX'],_0x255691=_0x3806e4[_0x38d1eb(0x8dd)]()[_0x38d1eb(0x37b)];else{if(_0x394015['match'](/center/i))_0x38d1eb(0x3bc)!=='sQTIM'?_0x70ef00=_0xe48889:(_0x1ae024=Graphics[_0x38d1eb(0x748)]/0x2,_0x255691=Graphics[_0x38d1eb(0x865)]/0x2);else _0x394015['match'](/point (\d+), (\d+)/i)&&(_0x1ae024=Number(RegExp['$1']),_0x255691=Number(RegExp['$2']));}if(_0x136df8[_0x38d1eb(0x97b)](/none/i))_0x1ae024+=_0x3f4a88,_0x255691+=_0x51350d;else{if(_0x136df8[_0x38d1eb(0x97b)](/horz/i)&&_0x136df8[_0x38d1eb(0x97b)](/vert/i))_0x1ae024+=_0x3806e4[_0x38d1eb(0x28c)]()?-_0x3f4a88:_0x3f4a88,_0x255691+=_0x3806e4[_0x38d1eb(0x28c)]()?-_0x51350d:_0x51350d;else{if(_0x136df8[_0x38d1eb(0x97b)](/horz/i))_0x1ae024+=_0x3806e4[_0x38d1eb(0x28c)]()?-_0x3f4a88:_0x3f4a88,_0x255691+=_0x51350d;else _0x136df8[_0x38d1eb(0x97b)](/vert/i)&&(_0x1ae024+=_0x3f4a88,_0x255691+=_0x3806e4[_0x38d1eb(0x28c)]()?-_0x51350d:_0x51350d);}}_0x3806e4[_0x38d1eb(0x3ff)](_0x1ae024,_0x255691,_0x94404,_0x5829ad,_0x537af8,-0x1),_0x3806e4[_0x38d1eb(0x7c6)](_0x41905b);}if(_0x200329)_0x190d09[_0x38d1eb(0x7b2)](_0x38d1eb(0x657));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc8c),_0x12d728=>{const _0x9212cf=_0x1e608f;if(!SceneManager[_0x9212cf(0x5f2)]())return;if(!$gameSystem[_0x9212cf(0x3e6)]())return;VisuMZ[_0x9212cf(0x47c)](_0x12d728,_0x12d728);const _0x1cfe41=$gameTemp[_0x9212cf(0x68b)](),_0x577573=VisuMZ[_0x9212cf(0x599)](_0x12d728[_0x9212cf(0x5b6)]),_0x896573=VisuMZ[_0x9212cf(0x599)](_0x12d728['Targets2']),_0x5cebe0=_0x12d728[_0x9212cf(0x998)];let _0x4a1a6c=_0x12d728[_0x9212cf(0x279)];const _0x324c2c=_0x12d728[_0x9212cf(0x4a1)],_0x371a5c=_0x12d728[_0x9212cf(0x4df)],_0x51f4d0=_0x12d728[_0x9212cf(0x2c2)],_0x29c509=_0x12d728[_0x9212cf(0x39d)],_0x4307d1=_0x12d728[_0x9212cf(0x18d)],_0x19532b=_0x12d728[_0x9212cf(0x9a8)],_0x19d9b9=_0x12d728[_0x9212cf(0xd84)],_0x30cb89=_0x12d728['WaitForMovement'],_0xc25b53=Math[_0x9212cf(0xb27)](..._0x896573[_0x9212cf(0x725)](_0x54aed2=>_0x54aed2['battler']()['_baseX']-_0x54aed2['battler']()[_0x9212cf(0xcc4)]()/0x2)),_0x2d5b6d=Math[_0x9212cf(0x127)](..._0x896573['map'](_0x327d05=>_0x327d05[_0x9212cf(0x8dd)]()[_0x9212cf(0x8d8)]+_0x327d05[_0x9212cf(0x8dd)]()['mainSpriteWidth']()/0x2)),_0x247255=Math[_0x9212cf(0xb27)](..._0x896573[_0x9212cf(0x725)](_0x50b6f6=>_0x50b6f6[_0x9212cf(0x8dd)]()['_baseY']-_0x50b6f6[_0x9212cf(0x8dd)]()[_0x9212cf(0x4d3)]())),_0x34f820=Math[_0x9212cf(0x127)](..._0x896573[_0x9212cf(0x725)](_0x62b344=>_0x62b344[_0x9212cf(0x8dd)]()[_0x9212cf(0x171)])),_0x52143b=_0x896573['filter'](_0xf19a64=>_0xf19a64[_0x9212cf(0x28c)]())[_0x9212cf(0xcaf)],_0x5859f1=_0x896573[_0x9212cf(0x9f1)](_0x1b3dba=>_0x1b3dba['isEnemy']())[_0x9212cf(0xcaf)];let _0x1deff6=0x0,_0x541f01=0x0;if(_0x5cebe0['match'](/front/i))_0x1deff6=_0x52143b>=_0x5859f1?_0xc25b53:_0x2d5b6d;else{if(_0x5cebe0[_0x9212cf(0x97b)](/middle/i))_0x1deff6=(_0xc25b53+_0x2d5b6d)/0x2,_0x4a1a6c=-0x1;else _0x5cebe0['match'](/back/i)&&(_0x9212cf(0x38d)!=='TfeOz'?(_0x676b5f[_0x9212cf(0xce2)][_0x9212cf(0x342)][_0x9212cf(0x2d7)](this,_0x4c7154),this[_0x9212cf(0xa09)](_0x26aedb),this[_0x9212cf(0x258)]()):_0x1deff6=_0x52143b>=_0x5859f1?_0x2d5b6d:_0xc25b53);}if(_0x5cebe0[_0x9212cf(0x97b)](/head/i)){if(_0x9212cf(0x6b6)!=='iQnle')_0x541f01=_0x247255;else{const _0x57deff=_0x245016[_0x9212cf(0x1a5)](_0x5b4dd0[_0x9212cf(0x78f)]/0x2),_0x4d6e7d=_0x3268f7[_0x9212cf(0x1a5)](_0x181767[_0x9212cf(0x96b)]/0x2);_0x4be1cb[_0x9212cf(0x58f)](_0x57deff,_0x4d6e7d,_0x24f140['Duration'],_0x78234e[_0x9212cf(0x9a8)]);}}else{if(_0x5cebe0[_0x9212cf(0x97b)](/center/i))_0x541f01=(_0x247255+_0x34f820)/0x2;else _0x5cebe0[_0x9212cf(0x97b)](/base/i)&&(_0x541f01=_0x34f820);}if(!_0x1cfe41)return;for(const _0x369cf1 of _0x577573){if(!_0x369cf1)continue;let _0x50a0aa=_0x1deff6,_0x44d4c9=_0x541f01;if(_0x324c2c[_0x9212cf(0x97b)](/none/i))_0x50a0aa+=_0x371a5c,_0x44d4c9+=_0x51f4d0;else{if(_0x324c2c[_0x9212cf(0x97b)](/horz/i)&&_0x324c2c[_0x9212cf(0x97b)](/vert/i))_0x9212cf(0x12e)!==_0x9212cf(0x12e)?(_0x4b7690['_deathStateApplied']=!![],this[_0x9212cf(0xbda)](_0x309a4e)):(_0x50a0aa+=_0x369cf1[_0x9212cf(0x28c)]()?-_0x371a5c:_0x371a5c,_0x44d4c9+=_0x369cf1[_0x9212cf(0x28c)]()?-_0x51f4d0:_0x51f4d0);else{if(_0x324c2c[_0x9212cf(0x97b)](/horz/i))_0x50a0aa+=_0x369cf1['isActor']()?-_0x371a5c:_0x371a5c,_0x44d4c9+=_0x51f4d0;else _0x324c2c[_0x9212cf(0x97b)](/vert/i)&&(_0x50a0aa+=_0x371a5c,_0x44d4c9+=_0x369cf1[_0x9212cf(0x28c)]()?-_0x51f4d0:_0x51f4d0);}}_0x369cf1[_0x9212cf(0x3ff)](_0x50a0aa,_0x44d4c9,_0x29c509,_0x4307d1,_0x19532b,_0x4a1a6c),_0x369cf1[_0x9212cf(0x7c6)](_0x19d9b9);}if(_0x30cb89)_0x1cfe41[_0x9212cf(0x7b2)](_0x9212cf(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x508),_0x2b93d6=>{const _0x2d11ff=_0x1e608f;if(!SceneManager[_0x2d11ff(0x5f2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2d11ff(0x47c)](_0x2b93d6,_0x2b93d6);const _0x34d12d=VisuMZ['CreateActionSequenceTargets'](_0x2b93d6[_0x2d11ff(0x6d6)]);let _0x17ba50=_0x2b93d6['Direction'][_0x2d11ff(0x97b)](/back/i);for(const _0x223762 of _0x34d12d){if(!_0x223762)continue;if(_0x2b93d6[_0x2d11ff(0xb5e)]['match'](/rand/i))_0x17ba50=Math[_0x2d11ff(0xab4)](0x2);_0x223762[_0x2d11ff(0xc33)](!!_0x17ba50);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x446),_0x35d778=>{const _0x45caac=_0x1e608f;if(!SceneManager[_0x45caac(0x5f2)]())return;if(!$gameSystem[_0x45caac(0x3e6)]())return;VisuMZ['ConvertParams'](_0x35d778,_0x35d778);const _0x24d51c=VisuMZ[_0x45caac(0x599)](_0x35d778[_0x45caac(0x6d6)]),_0x335f0f=_0x35d778['FaceAway'];for(const _0x5cd03f of _0x24d51c){if(_0x45caac(0x582)===_0x45caac(0x582)){if(!_0x5cd03f)continue;const _0x2f182e=_0x35d778[_0x45caac(0xba5)](_0x5cd03f)||{'x':0x0,'y':0x0};let _0x1b331f=_0x2f182e['x'],_0x10732b=_0x2f182e['y'];_0x5cd03f[_0x45caac(0x3c0)](Math[_0x45caac(0x1a5)](_0x1b331f),Math[_0x45caac(0x1a5)](_0x10732b),!!_0x335f0f);}else{if(!_0x2118c4[_0x45caac(0xbdc)]())return![];}}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_FacePoint',_0x57900b=>{const _0x51c207=_0x1e608f;if(!SceneManager[_0x51c207(0x5f2)]())return;if(!$gameSystem[_0x51c207(0x3e6)]())return;VisuMZ[_0x51c207(0x47c)](_0x57900b,_0x57900b);const _0x3870e8=VisuMZ[_0x51c207(0x599)](_0x57900b[_0x51c207(0x6d6)]);let _0x4b7bea=_0x57900b[_0x51c207(0xbbb)];const _0x386d90=_0x57900b[_0x51c207(0x612)];for(const _0x13f8bb of _0x3870e8){if(!_0x13f8bb)continue;let _0x3ce966=_0x13f8bb[_0x51c207(0x8dd)]()[_0x51c207(0x8d8)],_0x3481e1=_0x13f8bb['battler']()[_0x51c207(0x171)];if(_0x4b7bea['match'](/home/i))_0x3ce966=_0x13f8bb['battler']()[_0x51c207(0x565)],_0x3481e1=_0x13f8bb[_0x51c207(0x8dd)]()[_0x51c207(0x37b)];else{if(_0x4b7bea[_0x51c207(0x97b)](/center/i))_0x3ce966=Graphics[_0x51c207(0x748)]/0x2,_0x3481e1=Graphics['boxHeight']/0x2;else{if(_0x4b7bea[_0x51c207(0x97b)](/point (\d+), (\d+)/i)){if('FbgaE'===_0x51c207(0x5d9))_0x3ce966=Number(RegExp['$1']),_0x3481e1=Number(RegExp['$2']);else return!![];}}}_0x13f8bb['setBattlerFacePoint'](Math['round'](_0x3ce966),Math[_0x51c207(0x1a5)](_0x3481e1),!!_0x386d90);}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x367),_0x534658=>{const _0x47efb4=_0x1e608f;if(!SceneManager[_0x47efb4(0x5f2)]())return;if(!$gameSystem[_0x47efb4(0x3e6)]())return;VisuMZ[_0x47efb4(0x47c)](_0x534658,_0x534658);const _0x125acb=VisuMZ[_0x47efb4(0x599)](_0x534658['Targets1']),_0x184ec5=VisuMZ[_0x47efb4(0x599)](_0x534658[_0x47efb4(0x50d)]),_0x3d80cf=_0x184ec5[_0x47efb4(0x725)](_0x3336da=>_0x3336da&&_0x3336da[_0x47efb4(0x8dd)]()?_0x3336da[_0x47efb4(0x8dd)]()[_0x47efb4(0x8d8)]:0x0)/(_0x184ec5[_0x47efb4(0xcaf)]||0x1),_0x2098c3=_0x184ec5['map'](_0x43adc7=>_0x43adc7&&_0x43adc7[_0x47efb4(0x8dd)]()?_0x43adc7['battler']()[_0x47efb4(0x171)]:0x0)/(_0x184ec5[_0x47efb4(0xcaf)]||0x1),_0x5d8c82=_0x534658[_0x47efb4(0x612)];for(const _0x1ca5d0 of _0x125acb){if(!_0x1ca5d0)continue;_0x1ca5d0[_0x47efb4(0x3c0)](Math[_0x47efb4(0x1a5)](_0x3d80cf),Math[_0x47efb4(0x1a5)](_0x2098c3),!!_0x5d8c82);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6eb),_0x5ff8c2=>{const _0x3e1378=_0x1e608f;if(!SceneManager[_0x3e1378(0x5f2)]())return;VisuMZ[_0x3e1378(0x47c)](_0x5ff8c2,_0x5ff8c2);const _0x25f079=$gameTemp[_0x3e1378(0x68b)](),_0x489704=VisuMZ[_0x3e1378(0x599)](_0x5ff8c2['Targets']),_0x4aa19a=_0x5ff8c2[_0x3e1378(0x7eb)],_0x28c475=_0x5ff8c2[_0x3e1378(0x39d)],_0x42eb67=_0x5ff8c2[_0x3e1378(0x9a8)],_0x2c44ea=_0x5ff8c2['WaitForFloat'];if(!_0x25f079)return;for(const _0x36abbc of _0x489704){if('HbhVM'===_0x3e1378(0x80e)){if(!_0x36abbc)continue;_0x36abbc[_0x3e1378(0x182)](_0x4aa19a,_0x28c475,_0x42eb67);}else _0x49dda7=(_0x216823+_0x26ba29)/0x2;}if(_0x2c44ea)_0x25f079[_0x3e1378(0x7b2)]('battleFloat');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x57f),_0x5d8356=>{const _0x50fb68=_0x1e608f;if(!SceneManager[_0x50fb68(0x5f2)]())return;VisuMZ[_0x50fb68(0x47c)](_0x5d8356,_0x5d8356);const _0x3490b8=$gameTemp[_0x50fb68(0x68b)]();if(!_0x3490b8)return;const _0x5b4a20=VisuMZ[_0x50fb68(0x599)](_0x5d8356[_0x50fb68(0x6d6)]);for(const _0x5acd9e of _0x5b4a20){if(!_0x5acd9e)continue;_0x5acd9e[_0x50fb68(0x4f6)]();}BattleManager['_subject']&&BattleManager[_0x50fb68(0x7cb)][_0x50fb68(0xac4)]();if(_0x5d8356[_0x50fb68(0xb7f)])_0x3490b8[_0x50fb68(0x7b2)]('battleMove');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x266),_0x269cce=>{const _0x49539e=_0x1e608f;if(!SceneManager[_0x49539e(0x5f2)]())return;VisuMZ[_0x49539e(0x47c)](_0x269cce,_0x269cce);const _0x51130=$gameTemp['getLastPluginCommandInterpreter'](),_0x18c7de=VisuMZ[_0x49539e(0x599)](_0x269cce[_0x49539e(0x6d6)]),_0x402da5=_0x269cce[_0x49539e(0x7eb)],_0x533623=_0x269cce[_0x49539e(0x39d)],_0xc0bc8b=_0x269cce['WaitForJump'];if(!_0x51130)return;for(const _0x4f1400 of _0x18c7de){if(_0x49539e(0x137)!==_0x49539e(0x137))_0xf82523[_0x49539e(0x798)]();else{if(!_0x4f1400)continue;_0x4f1400[_0x49539e(0x3e7)](_0x402da5,_0x533623);}}if(_0xc0bc8b)_0x51130[_0x49539e(0x7b2)](_0x49539e(0x407));}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x2be),_0x326e6b=>{const _0x55c3b8=_0x1e608f;if(!SceneManager[_0x55c3b8(0x5f2)]())return;if(!$gameSystem[_0x55c3b8(0x3e6)]())return;VisuMZ['ConvertParams'](_0x326e6b,_0x326e6b);const _0xaaff8f=$gameTemp[_0x55c3b8(0x68b)](),_0x463fba=VisuMZ[_0x55c3b8(0x599)](_0x326e6b['Targets']),_0x30de0b=_0x326e6b[_0x55c3b8(0x150)],_0x59ea7a=_0x326e6b[_0x55c3b8(0x539)],_0x581d7c=_0x326e6b[_0x55c3b8(0x312)],_0x3c2465=_0x326e6b[_0x55c3b8(0x39d)],_0x108323=_0x326e6b[_0x55c3b8(0x18d)],_0xead87=_0x326e6b[_0x55c3b8(0x9a8)],_0xc110ea=_0x326e6b['MotionType'],_0x4aefb3=_0x326e6b[_0x55c3b8(0xb7f)];if(!_0xaaff8f)return;for(const _0x58ff8e of _0x463fba){if(_0x55c3b8(0x887)!==_0x55c3b8(0x2c6)){if(!_0x58ff8e)continue;let _0x5299e3=_0x59ea7a,_0x3a4596=_0x581d7c;if(_0x30de0b['match'](/horz/i))_0x5299e3*=_0x58ff8e[_0x55c3b8(0x28c)]()?-0x1:0x1;if(_0x30de0b[_0x55c3b8(0x97b)](/vert/i))_0x3a4596*=_0x58ff8e[_0x55c3b8(0x28c)]()?-0x1:0x1;_0x58ff8e['moveBattlerDistance'](_0x5299e3,_0x3a4596,_0x3c2465,_0x108323,_0xead87),_0x58ff8e[_0x55c3b8(0x7c6)](_0xc110ea);}else _0x4d590e[_0x55c3b8(0xbe1)][_0x55c3b8(0xc0b)]['call'](this),this['requestMotion'](_0x55c3b8(0x35f));}if(_0x4aefb3)_0xaaff8f[_0x55c3b8(0x7b2)](_0x55c3b8(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x307),_0x59e5fd=>{const _0x2914aa=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2914aa(0x3e6)]())return;VisuMZ[_0x2914aa(0x47c)](_0x59e5fd,_0x59e5fd);const _0x530f99=$gameTemp[_0x2914aa(0x68b)](),_0x37f917=VisuMZ['CreateActionSequenceTargets'](_0x59e5fd[_0x2914aa(0x6d6)]),_0x4631c3=_0x59e5fd[_0x2914aa(0x4a1)],_0xab35a=_0x59e5fd['OffsetX'],_0x2d0c64=_0x59e5fd[_0x2914aa(0x2c2)],_0x4fd08d=_0x59e5fd['Duration'],_0x55ff0b=_0x59e5fd[_0x2914aa(0x18d)],_0x1b0c74=_0x59e5fd[_0x2914aa(0x9a8)],_0x125891=_0x59e5fd[_0x2914aa(0xd84)],_0xa773=_0x59e5fd['WaitForMovement'];if(!_0x530f99)return;for(const _0x22544d of _0x37f917){if('bLtzj'!==_0x2914aa(0x546)){if(!_0x22544d)continue;const _0x8b41c5=_0x59e5fd[_0x2914aa(0xd4b)](_0x22544d)||{'x':0x0,'y':0x0};let _0x3fb319=_0x8b41c5['x'],_0x1b8c92=_0x8b41c5['y'];if(_0x4631c3[_0x2914aa(0x97b)](/none/i))_0x3fb319+=_0xab35a,_0x1b8c92+=_0x2d0c64;else{if(_0x4631c3['match'](/horz/i)&&_0x4631c3[_0x2914aa(0x97b)](/vert/i))_0x3fb319+=_0x22544d[_0x2914aa(0x28c)]()?-_0xab35a:_0xab35a,_0x1b8c92+=_0x22544d[_0x2914aa(0x28c)]()?-_0x2d0c64:_0x2d0c64;else{if(_0x4631c3['match'](/horz/i)){if('gtZIJ'!==_0x2914aa(0xb09))return this[_0x2914aa(0x121)];else _0x3fb319+=_0x22544d['isActor']()?-_0xab35a:_0xab35a,_0x1b8c92+=_0x2d0c64;}else{if(_0x4631c3['match'](/vert/i)){if(_0x2914aa(0x2fb)!==_0x2914aa(0x2fb))return this[_0x2914aa(0x8f6)][_0x2914aa(0x1a0)]();else _0x3fb319+=_0xab35a,_0x1b8c92+=_0x22544d[_0x2914aa(0x28c)]()?-_0x2d0c64:_0x2d0c64;}}}}_0x22544d[_0x2914aa(0x60d)](_0x3fb319,_0x1b8c92,_0x4fd08d,_0x55ff0b,_0x1b0c74,-0x1),_0x22544d[_0x2914aa(0x7c6)](_0x125891);}else _0x866876+=_0x1e95e0,_0x3d99e0+=_0x363c51[_0x2914aa(0x28c)]()?-_0x192f2c:_0x10811a;}if(_0xa773)_0x530f99[_0x2914aa(0x7b2)](_0x2914aa(0x657));}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x6e2),_0x21f812=>{const _0x325ec0=_0x1e608f;if(!SceneManager[_0x325ec0(0x5f2)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x325ec0(0x47c)](_0x21f812,_0x21f812);const _0x4b0b55=$gameTemp['getLastPluginCommandInterpreter'](),_0x542308=VisuMZ[_0x325ec0(0x599)](_0x21f812[_0x325ec0(0x6d6)]),_0x159b70=_0x21f812[_0x325ec0(0x71f)],_0x5ce4d8=_0x21f812['OffsetAdjust'],_0x49c61c=_0x21f812[_0x325ec0(0x4df)],_0x3655a9=_0x21f812[_0x325ec0(0x2c2)],_0x525ae8=_0x21f812['Duration'],_0x25c667=_0x21f812['FaceDirection'],_0x217e97=_0x21f812[_0x325ec0(0x9a8)],_0x4ad834=_0x21f812[_0x325ec0(0xd84)],_0x4821e4=_0x21f812[_0x325ec0(0xb7f)];if(!_0x4b0b55)return;for(const _0xe8e47f of _0x542308){if('RRlpK'==='RRlpK'){if(!_0xe8e47f)continue;let _0x18ec76=_0xe8e47f[_0x325ec0(0x8dd)]()[_0x325ec0(0x8d8)],_0x41635f=_0xe8e47f[_0x325ec0(0x8dd)]()['_baseY'];if(_0x159b70['match'](/home/i))_0x18ec76=_0xe8e47f[_0x325ec0(0x8dd)]()[_0x325ec0(0x565)],_0x41635f=_0xe8e47f[_0x325ec0(0x8dd)]()['_homeY'];else{if(_0x159b70[_0x325ec0(0x97b)](/center/i))_0x18ec76=Graphics[_0x325ec0(0x748)]/0x2,_0x41635f=Graphics['boxHeight']/0x2;else _0x159b70['match'](/point (\d+), (\d+)/i)&&(_0x325ec0(0x1f9)!=='Zafod'?(_0x18ec76=Number(RegExp['$1']),_0x41635f=Number(RegExp['$2'])):this[_0x325ec0(0x699)](_0x45a31e)?_0x23ab9c['prepareCustomActionSequence']():this['usePremadeActionSequence'](_0x29bcc4,_0x2ab1ee,_0xd078ac));}if(_0x5ce4d8[_0x325ec0(0x97b)](/none/i)){if(_0x325ec0(0xc73)===_0x325ec0(0x4e4)){if(this[_0x325ec0(0x2dd)]<0xff)this['contentsOpacity']+=0x10;}else _0x18ec76+=_0x49c61c,_0x41635f+=_0x3655a9;}else{if(_0x5ce4d8[_0x325ec0(0x97b)](/horz/i)&&_0x5ce4d8[_0x325ec0(0x97b)](/vert/i))_0x325ec0(0xb92)!=='hSWOQ'?(_0x18ec76+=_0xe8e47f[_0x325ec0(0x28c)]()?-_0x49c61c:_0x49c61c,_0x41635f+=_0xe8e47f[_0x325ec0(0x28c)]()?-_0x3655a9:_0x3655a9):_0x5a22b4=_0x545834(_0x1672a1['$1']);else{if(_0x5ce4d8[_0x325ec0(0x97b)](/horz/i))_0x18ec76+=_0xe8e47f['isActor']()?-_0x49c61c:_0x49c61c,_0x41635f+=_0x3655a9;else _0x5ce4d8['match'](/vert/i)&&(_0x18ec76+=_0x49c61c,_0x41635f+=_0xe8e47f[_0x325ec0(0x28c)]()?-_0x3655a9:_0x3655a9);}}_0xe8e47f[_0x325ec0(0x60d)](_0x18ec76,_0x41635f,_0x525ae8,_0x25c667,_0x217e97,-0x1),_0xe8e47f[_0x325ec0(0x7c6)](_0x4ad834);}else{if(!_0x344c85['isSceneBattle']())return;if(!_0x3152c0[_0x325ec0(0x14f)])return;_0x57a14b[_0x325ec0(0x47c)](_0x3a1714,_0x301a7c),_0x5858d1['_scene']['clearAllVisualCutins']();const _0x1724b7=_0x53585b[_0x325ec0(0x68b)]();_0x1724b7&&_0x29c93b[_0x325ec0(0x61e)]&&_0x1724b7['setWaitMode'](_0x325ec0(0x8b9));}}if(_0x4821e4)_0x4b0b55[_0x325ec0(0x7b2)](_0x325ec0(0x657));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x2e7),_0x1b509e=>{const _0x5c6419=_0x1e608f;if(!SceneManager[_0x5c6419(0x5f2)]())return;if(!$gameSystem[_0x5c6419(0x3e6)]())return;VisuMZ[_0x5c6419(0x47c)](_0x1b509e,_0x1b509e);const _0x4b898c=$gameTemp['getLastPluginCommandInterpreter'](),_0x91d93d=VisuMZ[_0x5c6419(0x599)](_0x1b509e['Targets1']),_0x1f9bdb=VisuMZ[_0x5c6419(0x599)](_0x1b509e[_0x5c6419(0x50d)]),_0x151b35=_0x1b509e[_0x5c6419(0x998)];let _0x5bf4c8=_0x1b509e[_0x5c6419(0x279)];const _0x5303ce=_0x1b509e[_0x5c6419(0x4a1)],_0x3c0251=_0x1b509e[_0x5c6419(0x4df)],_0xaba374=_0x1b509e[_0x5c6419(0x2c2)],_0x5e351c=_0x1b509e[_0x5c6419(0x39d)],_0x4dd163=_0x1b509e[_0x5c6419(0x18d)],_0x6c0196=_0x1b509e['EasingType'],_0x3bd066=_0x1b509e[_0x5c6419(0xd84)],_0x33f934=_0x1b509e[_0x5c6419(0xb7f)],_0x57c4fb=Math[_0x5c6419(0xb27)](..._0x1f9bdb['map'](_0x549dee=>_0x549dee[_0x5c6419(0x8dd)]()['_baseX']-_0x549dee[_0x5c6419(0x8dd)]()[_0x5c6419(0xcc4)]()/0x2)),_0x563032=Math['max'](..._0x1f9bdb['map'](_0x48840e=>_0x48840e[_0x5c6419(0x8dd)]()[_0x5c6419(0x8d8)]+_0x48840e[_0x5c6419(0x8dd)]()[_0x5c6419(0xcc4)]()/0x2)),_0x41fa75=Math[_0x5c6419(0xb27)](..._0x1f9bdb[_0x5c6419(0x725)](_0x2869a5=>_0x2869a5['battler']()['_baseY']-_0x2869a5[_0x5c6419(0x8dd)]()['mainSpriteHeight']())),_0x39b92b=Math[_0x5c6419(0x127)](..._0x1f9bdb[_0x5c6419(0x725)](_0x2fbccf=>_0x2fbccf[_0x5c6419(0x8dd)]()[_0x5c6419(0x171)])),_0x34c286=_0x1f9bdb[_0x5c6419(0x9f1)](_0x250d54=>_0x250d54['isActor']())[_0x5c6419(0xcaf)],_0x29364b=_0x1f9bdb[_0x5c6419(0x9f1)](_0x1c112a=>_0x1c112a['isEnemy']())[_0x5c6419(0xcaf)];let _0x53bc7d=0x0,_0x2ad18e=0x0;if(_0x151b35['match'](/front/i))_0x5c6419(0x66a)!=='wdakR'?(this[_0x5c6419(0x374)]=this['validTargets'](),this[_0x5c6419(0x6b7)](),_0x5bdb25[_0x5c6419(0xbe1)][_0x5c6419(0xd5d)][_0x5c6419(0x2d7)](this)):_0x53bc7d=_0x34c286>=_0x29364b?_0x57c4fb:_0x563032;else{if(_0x151b35[_0x5c6419(0x97b)](/middle/i))_0x53bc7d=(_0x57c4fb+_0x563032)/0x2,_0x5bf4c8=-0x1;else _0x151b35[_0x5c6419(0x97b)](/back/i)&&(_0x53bc7d=_0x34c286>=_0x29364b?_0x563032:_0x57c4fb);}if(_0x151b35[_0x5c6419(0x97b)](/head/i))_0x2ad18e=_0x41fa75;else{if(_0x151b35['match'](/center/i)){if(_0x5c6419(0x95d)===_0x5c6419(0x719)){if(this['constructor']===_0x4747b3)return;this[_0x5c6419(0x903)](),this['finalizeScale']();}else _0x2ad18e=(_0x41fa75+_0x39b92b)/0x2;}else _0x151b35[_0x5c6419(0x97b)](/base/i)&&(_0x2ad18e=_0x39b92b);}if(!_0x4b898c)return;for(const _0x15c78d of _0x91d93d){if(!_0x15c78d)continue;let _0x5ec119=_0x53bc7d,_0x3328e0=_0x2ad18e;if(_0x5303ce[_0x5c6419(0x97b)](/none/i))_0x5c6419(0x537)!==_0x5c6419(0x537)?this[_0x5c6419(0xb79)](_0x5c6419(0x3a9),_0x3f59cd):(_0x5ec119+=_0x3c0251,_0x3328e0+=_0xaba374);else{if(_0x5303ce['match'](/horz/i)&&_0x5303ce[_0x5c6419(0x97b)](/vert/i))_0x5ec119+=_0x15c78d[_0x5c6419(0x28c)]()?-_0x3c0251:_0x3c0251,_0x3328e0+=_0x15c78d['isActor']()?-_0xaba374:_0xaba374;else{if(_0x5303ce[_0x5c6419(0x97b)](/horz/i))_0x5c6419(0x55a)!==_0x5c6419(0xd0a)?(_0x5ec119+=_0x15c78d[_0x5c6419(0x28c)]()?-_0x3c0251:_0x3c0251,_0x3328e0+=_0xaba374):(_0x2ba6ad['_autoBattle']=!![],_0x57c9be[_0x5c6419(0x231)](),this['selectNextCommand'](),_0x114490[_0x5c6419(0x643)]()&&(_0x2784c0[_0x5c6419(0xaee)]=![]));else _0x5303ce[_0x5c6419(0x97b)](/vert/i)&&('nKAJt'===_0x5c6419(0x146)?this['_battleBalloonQueue']=[]:(_0x5ec119+=_0x3c0251,_0x3328e0+=_0x15c78d[_0x5c6419(0x28c)]()?-_0xaba374:_0xaba374));}}_0x15c78d[_0x5c6419(0x60d)](_0x5ec119,_0x3328e0,_0x5e351c,_0x4dd163,_0x6c0196,_0x5bf4c8),_0x15c78d[_0x5c6419(0x7c6)](_0x3bd066);}if(_0x33f934)_0x4b898c[_0x5c6419(0x7b2)]('battleMove');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xbbe),_0x54d2d0=>{const _0x80c8ee=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x54d2d0,_0x54d2d0);const _0x49ba9d=$gameTemp[_0x80c8ee(0x68b)](),_0x1998d6=VisuMZ[_0x80c8ee(0x599)](_0x54d2d0[_0x80c8ee(0x6d6)]),_0x579370=_0x54d2d0[_0x80c8ee(0xd07)],_0x347b49=_0x54d2d0[_0x80c8ee(0x39d)],_0x20642=_0x54d2d0['EasingType'],_0x5c0f69=_0x54d2d0[_0x80c8ee(0x134)];if(!_0x49ba9d)return;for(const _0x3906c5 of _0x1998d6){if(_0x80c8ee(0x6b0)!=='jLGvj')return _0x465aaf[_0x80c8ee(0x588)]();else{if(!_0x3906c5)continue;_0x3906c5['changeBattlerOpacity'](_0x579370,_0x347b49,_0x20642);}}if(_0x5c0f69)_0x49ba9d['setWaitMode']('battleOpacity');}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0xbd1),_0x5a6345=>{const _0x103522=_0x1e608f;if(!SceneManager[_0x103522(0x5f2)]())return;VisuMZ[_0x103522(0x47c)](_0x5a6345,_0x5a6345);const _0x4555bc=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c09d3=VisuMZ[_0x103522(0x599)](_0x5a6345['Targets']),_0x3f0efb=_0x5a6345[_0x103522(0x942)],_0x35a444=_0x5a6345['ScaleY'],_0x56b70f=_0x5a6345[_0x103522(0x39d)],_0x7515d1=_0x5a6345[_0x103522(0x9a8)],_0xffa77d=_0x5a6345[_0x103522(0x1db)];if(!_0x4555bc)return;for(const _0x4b9a89 of _0x1c09d3){if(!_0x4b9a89)continue;_0x4b9a89[_0x103522(0x775)](_0x3f0efb,_0x35a444,_0x56b70f,_0x7515d1);}if(_0xffa77d)_0x4555bc[_0x103522(0x7b2)](_0x103522(0x964));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc74),_0x302ce2=>{const _0x4c4e76=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c4e76(0x47c)](_0x302ce2,_0x302ce2);const _0x172fba=$gameTemp[_0x4c4e76(0x68b)](),_0x575885=VisuMZ[_0x4c4e76(0x599)](_0x302ce2[_0x4c4e76(0x6d6)]),_0x56afcf=_0x302ce2['SkewX'],_0xa9a16=_0x302ce2[_0x4c4e76(0x343)],_0x59c3df=_0x302ce2['Duration'],_0x3f00da=_0x302ce2[_0x4c4e76(0x9a8)],_0x42ae00=_0x302ce2[_0x4c4e76(0xd08)];if(!_0x172fba)return;for(const _0x5d1bd4 of _0x575885){if(_0x4c4e76(0x2b6)===_0x4c4e76(0x2b6)){if(!_0x5d1bd4)continue;_0x5d1bd4[_0x4c4e76(0x11c)](_0x56afcf,_0xa9a16,_0x59c3df,_0x3f00da);}else return this[_0x4c4e76(0x6a2)][_0x1b44e8];}if(_0x42ae00)_0x172fba[_0x4c4e76(0x7b2)](_0x4c4e76(0x308));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x9b7),_0x2d4fc3=>{const _0x270c5e=_0x1e608f;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2d4fc3,_0x2d4fc3);const _0x435cad=$gameTemp['getLastPluginCommandInterpreter'](),_0x32ab8c=VisuMZ[_0x270c5e(0x599)](_0x2d4fc3['Targets']),_0x3d34f6=_0x2d4fc3[_0x270c5e(0xa93)],_0x4795be=_0x2d4fc3[_0x270c5e(0x39d)],_0x5102a6=_0x2d4fc3['EasingType'],_0x4c3846=_0x2d4fc3[_0x270c5e(0x16b)],_0xc4d329=_0x2d4fc3[_0x270c5e(0x21a)];if(!_0x435cad)return;for(const _0x1d4916 of _0x32ab8c){if(!_0x1d4916)continue;_0x1d4916[_0x270c5e(0x3ed)](_0x3d34f6,_0x4795be,_0x5102a6,_0x4c3846);}if(_0xc4d329)_0x435cad[_0x270c5e(0x7b2)](_0x270c5e(0x553));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_WaitForFloat',_0x39d9ad=>{const _0x1697fe=_0x1e608f;if(!SceneManager[_0x1697fe(0x5f2)]())return;const _0x3c8b7a=$gameTemp[_0x1697fe(0x68b)]();if(!_0x3c8b7a)return;_0x3c8b7a[_0x1697fe(0x7b2)](_0x1697fe(0x981));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_WaitForJump',_0xf000d9=>{const _0x2f5ae4=_0x1e608f;if(!SceneManager['isSceneBattle']())return;const _0x4711f3=$gameTemp[_0x2f5ae4(0x68b)]();if(!_0x4711f3)return;_0x4711f3['setWaitMode']('battleJump');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xb8f),_0x53866a=>{const _0x108090=_0x1e608f;if(!SceneManager['isSceneBattle']())return;const _0x4448b4=$gameTemp[_0x108090(0x68b)]();if(!_0x4448b4)return;_0x4448b4[_0x108090(0x7b2)]('battleMove');}),PluginManager[_0x1e608f(0x538)](pluginData['name'],_0x1e608f(0x548),_0x505f56=>{const _0x235faa=_0x1e608f;if(!SceneManager[_0x235faa(0x5f2)]())return;const _0x4b4789=$gameTemp[_0x235faa(0x68b)]();if(!_0x4b4789)return;_0x4b4789[_0x235faa(0x7b2)](_0x235faa(0x1ab));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Movement_WaitForScale',_0x508e70=>{const _0x48c059=_0x1e608f;if(!SceneManager['isSceneBattle']())return;const _0x3aec46=$gameTemp[_0x48c059(0x68b)]();if(!_0x3aec46)return;_0x3aec46['setWaitMode'](_0x48c059(0x964));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc95),_0x36b36b=>{const _0x1efa17=_0x1e608f;if(!SceneManager[_0x1efa17(0x5f2)]())return;const _0x45adb2=$gameTemp[_0x1efa17(0x68b)]();if(!_0x45adb2)return;_0x45adb2[_0x1efa17(0x7b2)](_0x1efa17(0x308));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x828),_0x222d40=>{const _0x1625f9=_0x1e608f;if(!SceneManager[_0x1625f9(0x5f2)]())return;const _0x26b3e6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x26b3e6)return;_0x26b3e6[_0x1625f9(0x7b2)]('battleSpin');}),VisuMZ['BattleCore'][_0x1e608f(0x549)]=function(){const _0x17e5e6=_0x1e608f;if(!Imported[_0x17e5e6(0x8fd)])return;if(VisuMZ[_0x17e5e6(0x636)][_0x17e5e6(0x37f)]<1.08){let _0x1afc8e='';_0x1afc8e+=_0x17e5e6(0xd1c),_0x1afc8e+=_0x17e5e6(0x11e),alert(_0x1afc8e),SceneManager[_0x17e5e6(0x3ea)]();}},PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Projectile_Animation',_0x36f80e=>{const _0x37cd00=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x37cd00(0x8fd)])return;VisuMZ[_0x37cd00(0x47c)](_0x36f80e,_0x36f80e),VisuMZ[_0x37cd00(0xce2)][_0x37cd00(0x549)]();const _0x2d5899=$gameTemp['getLastPluginCommandInterpreter'](),_0x59d5f7=_0x36f80e[_0x37cd00(0x5ea)];if(!_0x2d5899)return;const _0x3a77b5=BattleManager[_0x37cd00(0x4b1)];if(!_0x3a77b5)return;_0x3a77b5['createActionSequenceProjectile'](_0x36f80e);if(_0x59d5f7)_0x2d5899[_0x37cd00(0x7b2)](_0x37cd00(0xc99));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa52),_0x2d48f8=>{const _0x311439=_0x1e608f;if(!SceneManager[_0x311439(0x5f2)]())return;if(!Imported[_0x311439(0x8fd)])return;VisuMZ[_0x311439(0x47c)](_0x2d48f8,_0x2d48f8),VisuMZ['BattleCore'][_0x311439(0x549)]();const _0x254080=$gameTemp[_0x311439(0x68b)](),_0x240ffa=_0x2d48f8[_0x311439(0x5ea)];if(!_0x254080)return;const _0xb05618=BattleManager[_0x311439(0x4b1)];if(!_0xb05618)return;_0xb05618['createActionSequenceProjectile'](_0x2d48f8);if(_0x240ffa)_0x254080['setWaitMode'](_0x311439(0xc99));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x80b),_0x144b48=>{const _0x5029f1=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x5029f1(0x47c)](_0x144b48,_0x144b48),VisuMZ[_0x5029f1(0xce2)][_0x5029f1(0x549)]();const _0x363b09=$gameTemp['getLastPluginCommandInterpreter'](),_0x932171=_0x144b48[_0x5029f1(0x5ea)];if(!_0x363b09)return;const _0x5898b6=BattleManager[_0x5029f1(0x4b1)];if(!_0x5898b6)return;_0x5898b6['createActionSequenceProjectile'](_0x144b48);if(_0x932171)_0x363b09[_0x5029f1(0x7b2)]('battleProjectiles');}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xd4f),_0x1c0d2e=>{const _0x2e0cb4=_0x1e608f;if(!SceneManager[_0x2e0cb4(0x5f2)]())return;if(!Imported[_0x2e0cb4(0x6d5)])return;VisuMZ[_0x2e0cb4(0x47c)](_0x1c0d2e,_0x1c0d2e);const _0x4fe275=$gameTemp[_0x2e0cb4(0x68b)](),_0x18d37d=_0x1c0d2e[_0x2e0cb4(0xd08)];if(!_0x4fe275)return;$gameScreen[_0x2e0cb4(0x1e6)](_0x1c0d2e[_0x2e0cb4(0x8a5)],_0x1c0d2e['SkewY'],_0x1c0d2e[_0x2e0cb4(0x39d)],_0x1c0d2e[_0x2e0cb4(0x9a8)]);if(_0x18d37d)_0x4fe275[_0x2e0cb4(0x7b2)](_0x2e0cb4(0x575));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xc39),_0x8356a6=>{const _0x4393be=_0x1e608f;if(!SceneManager[_0x4393be(0x5f2)]())return;if(!Imported[_0x4393be(0x6d5)])return;VisuMZ[_0x4393be(0x47c)](_0x8356a6,_0x8356a6);const _0x12109c=$gameTemp[_0x4393be(0x68b)](),_0x14608b=_0x8356a6[_0x4393be(0xd08)];if(!_0x12109c)return;$gameScreen[_0x4393be(0x1e6)](0x0,0x0,_0x8356a6[_0x4393be(0x39d)],_0x8356a6['EasingType']);if(_0x14608b)_0x12109c[_0x4393be(0x7b2)](_0x4393be(0x575));}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x6a8),_0x12d254=>{const _0x1dc0a4=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1dc0a4(0x6d5)])return;const _0x2a95fb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2a95fb)return;_0x2a95fb[_0x1dc0a4(0x7b2)](_0x1dc0a4(0x575));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6ca),_0x4a6248=>{const _0x581cd6=_0x1e608f;if(!SceneManager[_0x581cd6(0x5f2)]())return;VisuMZ[_0x581cd6(0x47c)](_0x4a6248,_0x4a6248);const _0x1cf211=$gameTemp[_0x581cd6(0x68b)](),_0x26da91=_0x4a6248[_0x581cd6(0x7c8)],_0x3fb298=_0x4a6248[_0x581cd6(0x974)];if(!_0x1cf211)return;BattleManager[_0x581cd6(0x1a7)]=_0x26da91,BattleManager['_target']=BattleManager[_0x581cd6(0x8b7)]?BattleManager[_0x581cd6(0x8b7)][BattleManager[_0x581cd6(0x1a7)]]||null:null,BattleManager[_0x581cd6(0xa40)]&&_0x3fb298[_0x581cd6(0xb11)]()[_0x581cd6(0x2a9)]()!=='UNTITLED'&&_0x1cf211[_0x581cd6(0x2e1)]([_0x3fb298]);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Target_NextTarget',_0x19bde9=>{const _0x4e539b=_0x1e608f;if(!SceneManager[_0x4e539b(0x5f2)]())return;VisuMZ[_0x4e539b(0x47c)](_0x19bde9,_0x19bde9);const _0x38c2dd=$gameTemp['getLastPluginCommandInterpreter'](),_0xb7dab3=_0x19bde9[_0x4e539b(0x974)];if(!_0x38c2dd)return;BattleManager[_0x4e539b(0x1a7)]++,BattleManager['_target']=BattleManager[_0x4e539b(0x8b7)][BattleManager['_targetIndex']]||null;if(BattleManager[_0x4e539b(0xa40)]&&_0xb7dab3[_0x4e539b(0xb11)]()[_0x4e539b(0x2a9)]()!=='UNTITLED'){if(_0x4e539b(0x3bb)==='WIoNm')_0x38c2dd['command119']([_0xb7dab3]);else{let _0xeb18de=(_0x194f9a[_0x4e539b(0x5a3)]*_0x387b43[_0x4e539b(0xbd9)]+_0x1ee182[_0x4e539b(0x669)])*_0x5ce992['rec'];_0xeb18de=this[_0x4e539b(0x458)](_0xeb18de),this[_0x4e539b(0x989)]()&&(_0xeb18de*=this['subject']()[_0x4e539b(0x294)]),_0xeb18de=_0x2e88e1[_0x4e539b(0x14d)](_0xeb18de),_0xeb18de!==0x0&&(_0x53ad93[_0x4e539b(0xa9a)](_0xeb18de),this[_0x4e539b(0xbda)](_0x2efcc4));}}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x9d2),_0x398899=>{const _0xd9b2a3=_0x1e608f;if(!SceneManager[_0xd9b2a3(0x5f2)]())return;VisuMZ[_0xd9b2a3(0x47c)](_0x398899,_0x398899);const _0xb18e38=$gameTemp[_0xd9b2a3(0x68b)](),_0x216722=_0x398899[_0xd9b2a3(0x974)];if(!_0xb18e38)return;BattleManager[_0xd9b2a3(0x1a7)]--,BattleManager[_0xd9b2a3(0xa40)]=BattleManager[_0xd9b2a3(0x8b7)][BattleManager[_0xd9b2a3(0x1a7)]]||null,BattleManager['_target']&&_0x216722[_0xd9b2a3(0xb11)]()[_0xd9b2a3(0x2a9)]()!==_0xd9b2a3(0x94a)&&_0xb18e38[_0xd9b2a3(0x2e1)]([_0x216722]);}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],'ActSeq_Target_RandTarget',_0x31572c=>{const _0x5612f5=_0x1e608f;if(!SceneManager[_0x5612f5(0x5f2)]())return;VisuMZ[_0x5612f5(0x47c)](_0x31572c,_0x31572c);const _0x1f3db5=$gameTemp[_0x5612f5(0x68b)](),_0x3778cf=_0x31572c[_0x5612f5(0x45c)],_0x3f755d=_0x31572c['JumpToLabel'];if(!_0x1f3db5)return;const _0xcb9462=BattleManager[_0x5612f5(0x1a7)];for(;;){BattleManager[_0x5612f5(0x1a7)]=Math['randomInt'](BattleManager[_0x5612f5(0x8b7)][_0x5612f5(0xcaf)]);if(!_0x3778cf)break;if(BattleManager[_0x5612f5(0x1a7)]!==_0xcb9462)break;if(BattleManager[_0x5612f5(0x8b7)][_0x5612f5(0xcaf)]<=0x1){if(_0x5612f5(0xd2d)===_0x5612f5(0xd2d)){BattleManager[_0x5612f5(0x1a7)]=0x0;break;}else(_0x5db9d6[_0x5612f5(0x626)]||_0x25b00a[_0x5612f5(0x8d3)])&&_0x377500[_0x5612f5(0xc4c)]();}}BattleManager[_0x5612f5(0xa40)]=BattleManager[_0x5612f5(0x8b7)][BattleManager[_0x5612f5(0x1a7)]]||null,BattleManager['_target']&&_0x3f755d[_0x5612f5(0xb11)]()[_0x5612f5(0x2a9)]()!=='UNTITLED'&&_0x1f3db5['command119']([_0x3f755d]);}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x6cf),_0x10c66f=>{const _0x54251c=_0x1e608f;if(!SceneManager[_0x54251c(0x5f2)]())return;if(!Imported[_0x54251c(0x1c7)])return;if(!ConfigManager[_0x54251c(0x1f4)])return;VisuMZ['ConvertParams'](_0x10c66f,_0x10c66f);const _0x2dd19e=VisuMZ[_0x54251c(0x599)](_0x10c66f['Targets']);let _0x53805b=_0x10c66f[_0x54251c(0x7ed)]||'';for(const _0x48644d of _0x2dd19e){if(!_0x48644d)continue;_0x48644d[_0x54251c(0x80a)](_0x53805b);}}),PluginManager['registerCommand'](pluginData['name'],_0x1e608f(0x7a4),_0x42c94d=>{const _0x5e90eb=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e90eb(0x1c7)])return;if(!ConfigManager[_0x5e90eb(0x1f4)])return;VisuMZ[_0x5e90eb(0x47c)](_0x42c94d,_0x42c94d);const _0x479212=VisuMZ['CreateActionSequenceTargets'](_0x42c94d[_0x5e90eb(0x6d6)]);let _0x56b5b4=(_0x42c94d[_0x5e90eb(0xb3a)]||'')+(_0x42c94d[_0x5e90eb(0x8f2)]||'');for(const _0x35adc9 of _0x479212){if(!_0x35adc9)continue;_0x35adc9[_0x5e90eb(0x80a)](_0x56b5b4);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x8a6),_0x1f3077=>{const _0x54fd85=_0x1e608f;if(!SceneManager[_0x54fd85(0x5f2)]())return;VisuMZ[_0x54fd85(0x47c)](_0x1f3077,_0x1f3077);const _0x2b43e0=VisuMZ[_0x54fd85(0x599)](_0x1f3077[_0x54fd85(0x6d6)]);for(const _0x34522f of _0x2b43e0){if(!_0x34522f)continue;if(!_0x34522f[_0x54fd85(0x28c)]())continue;_0x34522f[_0x54fd85(0x729)]();}}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x506),_0x278cc4=>{const _0x45b715=_0x1e608f;if(!SceneManager[_0x45b715(0x5f2)]())return;VisuMZ[_0x45b715(0x47c)](_0x278cc4,_0x278cc4);const _0xcd8696=$gameTemp[_0x45b715(0x68b)]();let _0x43b97a=![];const _0x3f2eac=_0x278cc4['JumpToLabel'],_0x245ff0=VisuMZ[_0x45b715(0x599)](_0x278cc4[_0x45b715(0x6d6)]);for(const _0x2024c5 of _0x245ff0){if(!_0x2024c5)continue;if(!_0x2024c5[_0x45b715(0x28c)]())continue;_0x2024c5['nextActiveWeaponSlot']();if(_0x2024c5[_0x45b715(0x784)]()[_0x45b715(0xcaf)]>0x0){if(_0x45b715(0xcbc)===_0x45b715(0xb62)){const _0x22c029=_0x579fea[_0x45b715(0x771)]('['+_0x55b1aa['$1'][_0x45b715(0x97b)](/\d+/g)+']');for(const _0x3e75ff of _0x22c029){if(_0x1bb0e7[_0x45b715(0x1c6)](_0x3e75ff))return!![];}return![];}else _0x43b97a=!![];}else _0x2024c5[_0x45b715(0x729)]();}if(_0x43b97a&&_0x3f2eac[_0x45b715(0xb11)]()[_0x45b715(0x2a9)]()!==_0x45b715(0x94a)){if(_0x45b715(0xbaa)===_0x45b715(0xb16)){if(_0x549d6f[_0x448bb3[_0x45b715(0x89b)]]){const _0x559779=_0x3849f9[_0x45b715(0x89b)],_0x24da19=_0x36014f['x'],_0x436618=_0x5e59c5['y'],_0x3117b1=new _0x2eed33(_0x559779,_0x24da19,_0x436618);_0x3eae32[_0x45b715(0x4e1)]&&_0x3117b1[_0x45b715(0x64e)](),this[_0x45b715(0x374)]['push'](_0x3117b1);}}else _0xcd8696['command119']([_0x3f2eac]);}}),PluginManager[_0x1e608f(0x538)](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0x54b237=>{const _0x1f1286=_0x1e608f;if(!SceneManager[_0x1f1286(0x5f2)]())return;VisuMZ[_0x1f1286(0x47c)](_0x54b237,_0x54b237);let _0x5e8f52=_0x54b237[_0x1f1286(0x3fa)];_0x5e8f52--,_0x5e8f52=Math[_0x1f1286(0x127)](_0x5e8f52,0x0);const _0x5749e0=VisuMZ[_0x1f1286(0x599)](_0x54b237[_0x1f1286(0x6d6)]);for(const _0x49cf58 of _0x5749e0){if(!_0x49cf58)continue;if(!_0x49cf58[_0x1f1286(0x28c)]())continue;_0x49cf58[_0x1f1286(0xb40)](_0x5e8f52);}}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0x42b),_0x535b7f=>{const _0x18275f=_0x1e608f;if(!SceneManager[_0x18275f(0x5f2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x18275f(0x47c)](_0x535b7f,_0x535b7f);const _0x282c47=$gameTemp['getLastPluginCommandInterpreter'](),_0xd19bbc=_0x535b7f['WaitForZoom'];if(!_0x282c47)return;$gameScreen['setBattleZoom'](_0x535b7f[_0x18275f(0x22b)],_0x535b7f[_0x18275f(0x39d)],_0x535b7f[_0x18275f(0x9a8)]);if(_0xd19bbc)_0x282c47[_0x18275f(0x7b2)](_0x18275f(0x7df));}),PluginManager[_0x1e608f(0x538)](pluginData[_0x1e608f(0x6aa)],_0x1e608f(0xa77),_0x45b1e5=>{const _0x213807=_0x1e608f;if(!SceneManager[_0x213807(0x5f2)]())return;if(!Imported[_0x213807(0x6d5)])return;VisuMZ[_0x213807(0x47c)](_0x45b1e5,_0x45b1e5);const _0x4e5da0=$gameTemp[_0x213807(0x68b)](),_0x3edb0b=_0x45b1e5['WaitForZoom'];if(!_0x4e5da0)return;$gameScreen[_0x213807(0x4f0)](0x1,_0x45b1e5['Duration'],_0x45b1e5[_0x213807(0x9a8)]);if(_0x3edb0b)_0x4e5da0['setWaitMode'](_0x213807(0x7df));}),PluginManager['registerCommand'](pluginData[_0x1e608f(0x6aa)],'ActSeq_Zoom_WaitForZoom',_0x532afd=>{const _0x397cf9=_0x1e608f;if(!SceneManager[_0x397cf9(0x5f2)]())return;if(!Imported[_0x397cf9(0x6d5)])return;const _0x54cd1b=$gameTemp[_0x397cf9(0x68b)]();if(!_0x54cd1b)return;_0x54cd1b['setWaitMode'](_0x397cf9(0x7df));}),VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x536)]=Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0x282)],Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0x282)]=function(){const _0x52a0b9=_0x1e608f;this[_0x52a0b9(0xb95)](),this[_0x52a0b9(0x8e9)](),this[_0x52a0b9(0x6f6)](),this[_0x52a0b9(0x419)](),VisuMZ['BattleCore'][_0x52a0b9(0x536)][_0x52a0b9(0x2d7)](this),this[_0x52a0b9(0xae8)](),this[_0x52a0b9(0xb7a)](),this[_0x52a0b9(0xaac)](),this[_0x52a0b9(0x4e3)]();},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0xae8)]=function(){const _0x4a6aa5=_0x1e608f;if(VisuMZ[_0x4a6aa5(0x303)])return;this[_0x4a6aa5(0x46d)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0xb95)]=function(){const _0x22460b=_0x1e608f,_0x260aa9=$dataSystem[_0x22460b(0x15b)][_0x22460b(0xcaf)];for(let _0x496eca=0x0;_0x496eca<_0x260aa9;_0x496eca++){const _0x823586=$dataSystem[_0x22460b(0x969)][_0x496eca];if(_0x823586)continue;$dataSystem[_0x22460b(0x969)][_0x496eca]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype'][_0x1e608f(0x8e9)]=function(){const _0x7f9b45=_0x1e608f,_0xa4919f=VisuMZ[_0x7f9b45(0xce2)][_0x7f9b45(0x4a9)];_0xa4919f['Damage'][_0x7f9b45(0xc3a)]===undefined&&('qurrC'===_0x7f9b45(0x805)?_0xa4919f[_0x7f9b45(0x2db)]['PopupPosition']='base':_0x20b6ff[_0x7f9b45(0xbe1)][_0x7f9b45(0x4b4)][_0x7f9b45(0x2d7)](this,_0x3a9a85,_0x829a4d,_0x29c456,_0x372f30,_0x357ea0)),_0xa4919f['Actor'][_0x7f9b45(0x2b3)]===undefined&&(_0xa4919f[_0x7f9b45(0xa6a)]['SmoothImage']=![]),_0xa4919f[_0x7f9b45(0x662)]['SmoothImage']===undefined&&(_0xa4919f['Enemy'][_0x7f9b45(0x2b3)]=!![]),_0xa4919f[_0x7f9b45(0xa6a)]['PrioritySortActive']===undefined&&(_0xa4919f['Actor'][_0x7f9b45(0x47b)]=![]),_0xa4919f[_0x7f9b45(0xa6a)]['PrioritySortActors']===undefined&&(_0xa4919f[_0x7f9b45(0xa6a)][_0x7f9b45(0x928)]=!![]);},VisuMZ[_0x1e608f(0x855)]={},Scene_Boot['prototype'][_0x1e608f(0x6f6)]=function(){const _0x1edcc3=_0x1e608f;for(const _0x15f261 of VisuMZ[_0x1edcc3(0xce2)]['Settings'][_0x1edcc3(0x2db)][_0x1edcc3(0xcad)]){if(_0x1edcc3(0xad2)!==_0x1edcc3(0xad2)){if(!_0x2bfb63[_0x1edcc3(0x5f2)]())return;if(!_0x4fa74b[_0x1edcc3(0x14f)])return;_0x4631ac[_0x1edcc3(0x47c)](_0x3bab12,_0x1a2f12);const _0x4fc49c=_0x1d3801[_0x1edcc3(0xce2)][_0x1edcc3(0xb19)](_0x2e13dc);_0x5b138f['_scene'][_0x1edcc3(0xa83)](_0x4fc49c);const _0x475b4e=_0x1ff387[_0x1edcc3(0x68b)]();_0x475b4e&&_0x32117e[_0x1edcc3(0xca5)]&&_0x475b4e[_0x1edcc3(0x7b2)](_0x1edcc3(0x975));}else{if(!_0x15f261)continue;const _0x506144=_0x15f261[_0x1edcc3(0x340)][_0x1edcc3(0xb11)]()[_0x1edcc3(0x2a9)]();VisuMZ[_0x1edcc3(0x855)][_0x506144]=_0x15f261;}}},VisuMZ[_0x1e608f(0xce2)]['RegExp']={},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0x419)]=function(){const _0x334046=_0x1e608f,_0x401297=VisuMZ[_0x334046(0xce2)][_0x334046(0xc13)],_0xa9110e=_0x334046(0x106),_0x24311f=[[_0x334046(0x27e),'PRE-'],[_0x334046(0x196),_0x334046(0x5ec)]],_0x9b2310=[['%1Apply%2JS',_0x334046(0x8af)],[_0x334046(0x1dd),_0x334046(0x42d)]],_0x26adad=[['',''],[_0x334046(0x4cf),_0x334046(0x33f)],[_0x334046(0xaa1),'AS\x20TARGET']];for(const _0x3c4329 of _0x9b2310){if(_0x334046(0x17c)!==_0x334046(0xd85))for(const _0x4d6665 of _0x26adad){if(_0x334046(0xd4a)==='QRVjf'){if(!this[_0x334046(0xb98)])return;this['_lineHeight']=this[_0x334046(0xd3e)]||_0x57c138[_0x334046(0xbe1)][_0x334046(0x4a7)](),this['x']=_0x56761e[_0x334046(0x1a5)](this[_0x334046(0xb98)][_0x334046(0x8d8)]),this['y']=_0x62114d[_0x334046(0x1a5)](this[_0x334046(0xb98)][_0x334046(0x171)]-this['_lineHeight']*0.5);const _0x22edde=_0x4ee629[_0x334046(0xce2)][_0x334046(0x4a9)][_0x334046(0x662)];this['x']+=_0x3496f8[_0x334046(0x1a5)](_0x22edde[_0x334046(0x23d)]||0x0),this['y']+=_0x37eb17['round'](_0x22edde[_0x334046(0x360)]||0x0);}else for(const _0x1e421c of _0x24311f){const _0x2d9dd0=_0x3c4329[0x0][_0x334046(0x92f)](_0x1e421c[0x0],_0x4d6665[0x0]),_0x481e5a=_0x3c4329[0x1]['format'](_0x1e421c[0x1],_0x4d6665[0x1])[_0x334046(0x2a9)](),_0x2d83a1=new RegExp(_0xa9110e[_0x334046(0x92f)](_0x481e5a),'i');_0x401297[_0x2d9dd0]=_0x2d83a1;}}else return this[_0x334046(0x29c)]();}const _0x1a1a58=[[_0x334046(0x31e),_0x334046(0x994)],[_0x334046(0xa37),_0x334046(0xbf3)]];for(const _0x4d593a of _0x1a1a58){for(const _0x399a8d of _0x24311f){if(_0x334046(0x58a)!==_0x334046(0x58a)){if(!_0x419e7e)return 0x0;let _0x88e5f1=0x0;const _0x2bf36d=_0x52b957['note'];return _0x2bf36d[_0x334046(0x97b)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x88e5f1+=_0x4a22ad(_0x5a6f1f['$1'])),_0x2bf36d[_0x334046(0x97b)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x88e5f1+=_0x24aafd(_0x434a66['$2'])),_0x88e5f1;}else{const _0x557411=_0x4d593a[0x0]['format'](_0x399a8d[0x0]),_0x421ac1=_0x4d593a[0x1][_0x334046(0x92f)](_0x399a8d[0x1]),_0x1d4967=new RegExp(_0xa9110e['format'](_0x421ac1),'i');_0x401297[_0x557411]=_0x1d4967;}}}const _0x2dab0d=[[_0x334046(0xbbd),_0x334046(0x1e8)],[_0x334046(0xad7),_0x334046(0x208)],[_0x334046(0xd39),_0x334046(0xa5a)],[_0x334046(0x585),'JS\x20BATTLE\x20DEFEAT'],[_0x334046(0x842),'JS\x20ESCAPE\x20SUCCESS'],['EscapeFailureJS',_0x334046(0x41f)],[_0x334046(0x479),_0x334046(0x403)],[_0x334046(0x904),_0x334046(0x808)],['%1RegenerateJS',_0x334046(0x8c0)]];for(const _0x30adb9 of _0x2dab0d){for(const _0x1fc22f of _0x24311f){const _0x1ae9c6=_0x30adb9[0x0][_0x334046(0x92f)](_0x1fc22f[0x0]),_0x37f28f=_0x30adb9[0x1]['format'](_0x1fc22f[0x1]),_0x9cf7ad=new RegExp(_0xa9110e[_0x334046(0x92f)](_0x37f28f),'i');_0x401297[_0x1ae9c6]=_0x9cf7ad;}}},Scene_Boot['prototype'][_0x1e608f(0x46d)]=function(){const _0x79679f=$dataSkills['concat']($dataItems);for(const _0x153b55 of _0x79679f){if(!_0x153b55)continue;VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x153b55);}},Scene_Boot[_0x1e608f(0xbe1)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x4d850b=_0x1e608f,_0x2d6b26=$dataActors[_0x4d850b(0xbe2)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x543803 of _0x2d6b26){if(_0x4d850b(0x36e)!==_0x4d850b(0x36e))return _0x19ce31[_0x4d850b(0x8a4)]()[_0x4d850b(0x588)]();else{if(!_0x543803)continue;VisuMZ[_0x4d850b(0xce2)][_0x4d850b(0x21f)](_0x543803);}}},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0xb7a)]=function(){const _0x517b7d=_0x1e608f,_0x38a4b8=VisuMZ[_0x517b7d(0xce2)]['Settings']['Mechanics'][_0x517b7d(0x3cc)],_0x4051a9=[];for(const _0x246a57 of _0x38a4b8){const _0x2060cd=$dataTroops[_0x246a57];if(_0x2060cd)_0x4051a9['push'](JsonEx[_0x517b7d(0x346)](_0x2060cd));}for(const _0x12bc07 of $dataTroops){if(_0x517b7d(0xcc1)!==_0x517b7d(0xcc1)){const _0x48de51=this[_0x517b7d(0x326)],_0x2ad4c9=_0x52c23f[_0x517b7d(0x7bf)](),_0xa65c37=_0x55e757['x']+_0x2c032d[_0x517b7d(0x14d)](_0xcaa055['width']/0x2)+_0x2ad4c9;_0x48de51['x']=_0x48de51['width']/-0x2+_0xa65c37,_0x48de51['y']=_0x451035[_0x517b7d(0x14d)](_0x470f1d[_0x517b7d(0x96b)]/0x2);}else{if(!_0x12bc07)continue;for(const _0x3d35eb of _0x4051a9){if(_0x3d35eb['id']===_0x12bc07['id'])continue;_0x12bc07[_0x517b7d(0x8a7)]=_0x12bc07[_0x517b7d(0x8a7)][_0x517b7d(0xbe2)](_0x3d35eb['pages']);}}}},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0xaac)]=function(){const _0x2c56e4=_0x1e608f,_0x3cf644=VisuMZ[_0x2c56e4(0xce2)][_0x2c56e4(0x4a9)][_0x2c56e4(0x3c9)];if(_0x3cf644['BattleStartEvent']>0x0&&$dataCommonEvents[_0x3cf644['BattleStartEvent']]){const _0x3853fb=$dataCommonEvents[_0x3cf644[_0x2c56e4(0x8c3)]],_0x6d9d4b=_0x3853fb[_0x2c56e4(0x68e)][_0x2c56e4(0xcaf)]-0x2,_0x1138a4=_0x3853fb[_0x2c56e4(0x68e)][_0x6d9d4b];if(_0x1138a4&&_0x1138a4[_0x2c56e4(0x24d)]!==0xe6){const _0x21f505={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x176af1=_0x3853fb[_0x2c56e4(0x68e)][_0x2c56e4(0xcfe)]();_0x3853fb['list']['unshift'](_0x21f505),_0x3853fb[_0x2c56e4(0x68e)]['unshift'](_0x176af1);}}},Scene_Boot[_0x1e608f(0xbe1)][_0x1e608f(0x4e3)]=function(){const _0x11c934=_0x1e608f;VisuMZ[_0x11c934(0xce2)][_0x11c934(0xd53)](),VisuMZ[_0x11c934(0xce2)][_0x11c934(0x64f)]($dataSkills),VisuMZ[_0x11c934(0xce2)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x1e608f(0xce2)]['CreateCommonEventKeys']=function(){const _0x315527=_0x1e608f;VisuMZ[_0x315527(0xce2)]['_commonEventKey']={};for(const _0x425be2 of $dataCommonEvents){if(_0x315527(0x90c)!==_0x315527(0x90c))this[_0x315527(0xc27)][_0x315527(0x34b)][_0x315527(0x9d1)]!==this[_0x315527(0x606)][_0x315527(0x4f8)]()&&(this[_0x315527(0xc27)]['bitmap'][_0x315527(0x9d1)]=this[_0x315527(0x606)][_0x315527(0x4f8)]());else{if(!_0x425be2)continue;if(_0x425be2['name']['match'](/\[(.*)\]/i)){let _0x4b0b22=String(RegExp['$1'])['replace'](/,/g,'')['toUpperCase']()[_0x315527(0x2a9)]();VisuMZ[_0x315527(0xce2)]['_commonEventKey'][_0x4b0b22]=_0x425be2['id'];}}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x64f)]=function(_0x241432){const _0x107263=_0x1e608f;for(const _0x142fd7 of _0x241432){if(!_0x142fd7)continue;VisuMZ[_0x107263(0xce2)][_0x107263(0x48b)](_0x142fd7);}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x48b)]=function(_0x50f8a8){const _0x30fa2a=_0x1e608f;if(!_0x50f8a8)return;if(!_0x50f8a8[_0x30fa2a(0x6c6)])return;VisuMZ[_0x30fa2a(0xce2)]['_commonEventKey']=VisuMZ[_0x30fa2a(0xce2)]['_commonEventKey']||{};const _0xbd1889=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x4e61bd=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x1af279=[];const _0x3d6412=_0x50f8a8['note'][_0x30fa2a(0x97b)](_0xbd1889);if(_0x3d6412){for(const _0x46e794 of _0x3d6412){_0x46e794[_0x30fa2a(0x97b)](_0xbd1889);const _0x240f14=String(RegExp['$1'])[_0x30fa2a(0x783)](',')['map'](_0x249f6e=>String(_0x249f6e)[_0x30fa2a(0xb11)]()[_0x30fa2a(0x2a9)]());_0x1af279=_0x1af279[_0x30fa2a(0xbe2)](_0x240f14);}if(!_0x50f8a8[_0x30fa2a(0xb2d)][_0x30fa2a(0x97b)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x30fa2a(0x98f)!=='aEJhn'){if(!_0x35f0c7[_0x30fa2a(0x5f2)]())return;if(!_0x2c3da5[_0x30fa2a(0x8fd)])return;_0x50340d[_0x30fa2a(0x47c)](_0x49377a,_0x587093),_0x2b2e0c[_0x30fa2a(0xce2)]['CheckActSeqProjectileVersion']();const _0x364042=_0x55d724[_0x30fa2a(0x68b)](),_0x29c302=_0x10b5c0[_0x30fa2a(0x5ea)];if(!_0x364042)return;const _0x56df82=_0x5a609f['_spriteset'];if(!_0x56df82)return;_0x56df82[_0x30fa2a(0xac6)](_0x256ce7);if(_0x29c302)_0x364042['setWaitMode']('battleProjectiles');}else _0x50f8a8['note']+=_0x30fa2a(0x977);};}if(_0x50f8a8[_0x30fa2a(0xb2d)][_0x30fa2a(0x97b)](_0x4e61bd)){const _0x165796=String(RegExp['$1'])['split'](/[\r\n]+/)['map'](_0x13e3b9=>String(_0x13e3b9)[_0x30fa2a(0xb11)]()['trim']());_0x1af279=_0x1af279['concat'](_0x165796);!_0x50f8a8[_0x30fa2a(0xb2d)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x50f8a8[_0x30fa2a(0xb2d)]+=_0x30fa2a(0x977));;}for(const _0x5e7ecf of _0x1af279){if('qRecY'==='EGAfw')_0x40f418=_0xa5373e>=_0x57a7b2?_0x18a62a:_0x15e723;else{if(VisuMZ[_0x30fa2a(0xce2)][_0x30fa2a(0x7c1)][_0x5e7ecf]){const _0x13fd86=VisuMZ[_0x30fa2a(0xce2)][_0x30fa2a(0x7c1)][_0x5e7ecf],_0x3a83f5={'code':0x2c,'dataId':_0x13fd86,'value1':0x1,'value2':0x0};_0x50f8a8[_0x30fa2a(0x6c6)][_0x30fa2a(0xb79)](_0x3a83f5);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x1ca116=_0x1e608f,_0x236c29=$dataSkills['concat']($dataItems);for(const _0x529bd3 of _0x236c29){if(!_0x529bd3)continue;VisuMZ[_0x1ca116(0xce2)]['Parse_Notetags_Targets'](_0x529bd3);}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc94)]=VisuMZ[_0x1e608f(0xc94)],VisuMZ[_0x1e608f(0xc94)]=function(_0x39984f){const _0x33fbc6=_0x1e608f;VisuMZ[_0x33fbc6(0xce2)][_0x33fbc6(0xc94)]&&VisuMZ[_0x33fbc6(0xce2)][_0x33fbc6(0xc94)][_0x33fbc6(0x2d7)](this,_0x39984f),VisuMZ['BattleCore'][_0x33fbc6(0x21f)](_0x39984f);},VisuMZ['BattleCore'][_0x1e608f(0x76c)]=VisuMZ[_0x1e608f(0x76c)],VisuMZ[_0x1e608f(0x76c)]=function(_0xa20866){const _0x19edee=_0x1e608f;VisuMZ['BattleCore'][_0x19edee(0x76c)]&&VisuMZ['BattleCore'][_0x19edee(0x76c)][_0x19edee(0x2d7)](this,_0xa20866),VisuMZ[_0x19edee(0xce2)][_0x19edee(0x21f)](_0xa20866);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x990)]=VisuMZ[_0x1e608f(0x990)],VisuMZ[_0x1e608f(0x990)]=function(_0x460040){const _0x3efd1b=_0x1e608f;VisuMZ[_0x3efd1b(0xce2)][_0x3efd1b(0x990)]&&(_0x3efd1b(0x7a7)!==_0x3efd1b(0x7a7)?this[_0x3efd1b(0x6c9)](_0x3efd1b(0x2bf)):VisuMZ[_0x3efd1b(0xce2)][_0x3efd1b(0x990)][_0x3efd1b(0x2d7)](this,_0x460040)),VisuMZ['BattleCore'][_0x3efd1b(0xaaa)](_0x460040),VisuMZ[_0x3efd1b(0xce2)]['Parse_Notetags_Targets'](_0x460040);},VisuMZ['BattleCore'][_0x1e608f(0x14e)]=VisuMZ[_0x1e608f(0x14e)],VisuMZ[_0x1e608f(0x14e)]=function(_0x1cac6c){const _0x39b16a=_0x1e608f;VisuMZ[_0x39b16a(0xce2)]['ParseItemNotetags']&&(_0x39b16a(0x899)===_0x39b16a(0x5e7)?_0x4f6203['BattleCore']['Scene_Battle_onActorCancel']['call'](this):VisuMZ[_0x39b16a(0xce2)]['ParseItemNotetags'][_0x39b16a(0x2d7)](this,_0x1cac6c)),VisuMZ['BattleCore'][_0x39b16a(0xaaa)](_0x1cac6c),VisuMZ[_0x39b16a(0xce2)][_0x39b16a(0x6e7)](_0x1cac6c);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x607)]=VisuMZ[_0x1e608f(0x607)],VisuMZ[_0x1e608f(0x607)]=function(_0x4171f5){const _0x22cac6=_0x1e608f;VisuMZ[_0x22cac6(0xce2)][_0x22cac6(0x607)]&&VisuMZ[_0x22cac6(0xce2)][_0x22cac6(0x607)][_0x22cac6(0x2d7)](this,_0x4171f5),VisuMZ[_0x22cac6(0xce2)][_0x22cac6(0x21f)](_0x4171f5);},VisuMZ[_0x1e608f(0xce2)]['ParseArmorNotetags']=VisuMZ[_0x1e608f(0x7d2)],VisuMZ[_0x1e608f(0x7d2)]=function(_0x451c55){const _0x73965=_0x1e608f;VisuMZ[_0x73965(0xce2)][_0x73965(0x7d2)]&&VisuMZ['BattleCore'][_0x73965(0x7d2)][_0x73965(0x2d7)](this,_0x451c55),VisuMZ[_0x73965(0xce2)][_0x73965(0x21f)](_0x451c55);},VisuMZ[_0x1e608f(0xce2)]['ParseEnemyNotetags']=VisuMZ[_0x1e608f(0x4dd)],VisuMZ['ParseEnemyNotetags']=function(_0x56aa59){const _0x31b7ef=_0x1e608f;VisuMZ[_0x31b7ef(0xce2)][_0x31b7ef(0x4dd)]&&VisuMZ[_0x31b7ef(0xce2)][_0x31b7ef(0x4dd)]['call'](this,_0x56aa59),VisuMZ[_0x31b7ef(0xce2)][_0x31b7ef(0x21f)](_0x56aa59);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x53c)]=VisuMZ[_0x1e608f(0x53c)],VisuMZ[_0x1e608f(0x53c)]=function(_0x15b6fa){const _0x1bad0f=_0x1e608f;VisuMZ[_0x1bad0f(0xce2)][_0x1bad0f(0x53c)]&&VisuMZ['BattleCore'][_0x1bad0f(0x53c)][_0x1bad0f(0x2d7)](this,_0x15b6fa),VisuMZ[_0x1bad0f(0xce2)][_0x1bad0f(0x21f)](_0x15b6fa);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xaaa)]=function(_0x1c86ed){const _0x49dda0=_0x1e608f,_0x8dbe5f=[_0x49dda0(0x740),_0x49dda0(0x81c),_0x49dda0(0x6b4),_0x49dda0(0x72f),_0x49dda0(0x5c1),_0x49dda0(0x999),_0x49dda0(0x10d),_0x49dda0(0x217)];for(const _0x4334dd of _0x8dbe5f){VisuMZ[_0x49dda0(0xce2)][_0x49dda0(0x3f1)](_0x1c86ed,_0x4334dd);}const _0xded011=_0x1c86ed[_0x49dda0(0xb2d)];_0xded011[_0x49dda0(0x97b)](/<ALWAYS CRITICAL/i)&&(_0x49dda0(0x6ae)==='tSJZD'?_0x1c86ed[_0x49dda0(0x848)]['critical']=!![]:(_0x495404=_0x2ace30[_0x49dda0(0x748)]/0x2,_0x1dd798=_0x26190a['boxHeight']/0x2)),_0xded011[_0x49dda0(0x97b)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x1c86ed['repeats']=Math[_0x49dda0(0x127)](0x1,Number(RegExp['$1']))),_0xded011[_0x49dda0(0x97b)](/<TARGET:[ ](.*)>/i)&&(_0x1c86ed[_0x49dda0(0x250)]=String(RegExp['$1'])[_0x49dda0(0xb11)]()[_0x49dda0(0x2a9)]());},VisuMZ['BattleCore']['Parse_Notetags_TraitObjects']=function(_0x323e8c){const _0x2dd2d3=_0x1e608f,_0x4c5ece=['PreApplyAsUserJS',_0x2dd2d3(0xc83),_0x2dd2d3(0xca9),'PostDamageAsUserJS',_0x2dd2d3(0x768),_0x2dd2d3(0xbb9),_0x2dd2d3(0x952),_0x2dd2d3(0x136),_0x2dd2d3(0x5c1),_0x2dd2d3(0x999),_0x2dd2d3(0x10d),_0x2dd2d3(0x217),'PreStartBattleJS',_0x2dd2d3(0xba8),'PreEndBattleJS',_0x2dd2d3(0x1c4),_0x2dd2d3(0xd39),_0x2dd2d3(0x585),'EscapeSuccessJS',_0x2dd2d3(0x7bb),_0x2dd2d3(0x26f),_0x2dd2d3(0x154),_0x2dd2d3(0x2e2),_0x2dd2d3(0x909),_0x2dd2d3(0x5a1),_0x2dd2d3(0x801)];for(const _0x143061 of _0x4c5ece){VisuMZ[_0x2dd2d3(0xce2)][_0x2dd2d3(0x3f1)](_0x323e8c,_0x143061);}},VisuMZ['BattleCore'][_0x1e608f(0x6e7)]=function(_0xd5493b){const _0x65595c=_0x1e608f,_0x377690=_0xd5493b['note'];if(_0x377690[_0x65595c(0x97b)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x290542=String(RegExp['$1']),_0x44d229=VisuMZ[_0x65595c(0xce2)]['createKeyJS'](_0xd5493b,'Targets');VisuMZ['BattleCore'][_0x65595c(0x521)](_0x290542,_0x44d229);}if(_0x377690[_0x65595c(0x97b)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x65595c(0xa8e)!==_0x65595c(0xa8e)){const _0x31900f=_0x42bc[_0x65595c(0xce2)][_0x65595c(0x4a9)][_0x65595c(0x3c9)];_0x63dd0!==_0x65595c(0x9f8)&&_0x31900f[_0x65595c(0x730)]&&_0x1f79af[_0x65595c(0xce2)][_0x65595c(0x66e)](_0x31900f[_0x65595c(0x730)])&&_0x39da1f[_0x65595c(0xd6f)](_0x31900f['BattleEndEvent']);const _0x19fe54=_0x65595c(0x97f)[_0x65595c(0x92f)](_0x475fb2);_0x31900f[_0x19fe54]&&_0x34fe8e[_0x65595c(0xce2)][_0x65595c(0x66e)](_0x31900f[_0x19fe54])&&_0x5ea139[_0x65595c(0xd6f)](_0x31900f[_0x19fe54]);}else{const _0x574478=String(RegExp['$1']),_0xe7ebbc=VisuMZ[_0x65595c(0xce2)][_0x65595c(0x1eb)](_0xd5493b,_0x65595c(0x1ce));VisuMZ[_0x65595c(0xce2)][_0x65595c(0x853)](_0x574478,_0xe7ebbc);}}},VisuMZ[_0x1e608f(0xce2)]['JS']={},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3f1)]=function(_0x15f5c9,_0x2a085e){const _0x4affa2=_0x1e608f,_0x968258=_0x15f5c9['note'];if(_0x968258[_0x4affa2(0x97b)](VisuMZ['BattleCore']['RegExp'][_0x2a085e])){if(_0x4affa2(0xa61)!=='Jjtil'){const _0x40a96e=RegExp['$1'],_0x15f440=_0x4affa2(0x1e7)['format'](_0x40a96e),_0x58eb07=VisuMZ[_0x4affa2(0xce2)][_0x4affa2(0x1eb)](_0x15f5c9,_0x2a085e);VisuMZ['BattleCore']['JS'][_0x58eb07]=new Function(_0x15f440);}else{const _0x3fce7d=this[_0x4affa2(0x947)](),_0x465411=_0x34a795['BattleCore'][_0x4affa2(0x4a9)][_0x4affa2(0x408)][_0x4affa2(0xbb7)],_0x5c0e70=_0x3fce7d===_0x4affa2(0xb68)?_0x1f3cea[_0x4affa2(0x5aa)]:_0x4affa2(0x30b)[_0x4affa2(0x92f)](_0x465411,_0x3a160e[_0x4affa2(0x5aa)]),_0x3460b2=this[_0x4affa2(0x786)]();this['addCommand'](_0x5c0e70,_0x4affa2(0x5aa),_0x3460b2);}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1eb)]=function(_0x8d43d1,_0x2af643){const _0xe01511=_0x1e608f;if(VisuMZ[_0xe01511(0x1eb)])return VisuMZ[_0xe01511(0x1eb)](_0x8d43d1,_0x2af643);let _0x3a0b78='';if($dataActors[_0xe01511(0xc3d)](_0x8d43d1))_0x3a0b78=_0xe01511(0x691)['format'](_0x8d43d1['id'],_0x2af643);if($dataClasses[_0xe01511(0xc3d)](_0x8d43d1))_0x3a0b78=_0xe01511(0x77c)[_0xe01511(0x92f)](_0x8d43d1['id'],_0x2af643);if($dataSkills['includes'](_0x8d43d1))_0x3a0b78=_0xe01511(0x2e8)[_0xe01511(0x92f)](_0x8d43d1['id'],_0x2af643);if($dataItems[_0xe01511(0xc3d)](_0x8d43d1))_0x3a0b78=_0xe01511(0x908)[_0xe01511(0x92f)](_0x8d43d1['id'],_0x2af643);if($dataWeapons['includes'](_0x8d43d1))_0x3a0b78=_0xe01511(0x79d)[_0xe01511(0x92f)](_0x8d43d1['id'],_0x2af643);if($dataArmors[_0xe01511(0xc3d)](_0x8d43d1))_0x3a0b78=_0xe01511(0x2d9)[_0xe01511(0x92f)](_0x8d43d1['id'],_0x2af643);if($dataEnemies['includes'](_0x8d43d1))_0x3a0b78=_0xe01511(0xc9e)['format'](_0x8d43d1['id'],_0x2af643);if($dataStates[_0xe01511(0xc3d)](_0x8d43d1))_0x3a0b78=_0xe01511(0xd20)['format'](_0x8d43d1['id'],_0x2af643);return _0x3a0b78;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x521)]=function(_0xdd46e7,_0x45cc0f){const _0x2005f4=_0x1e608f,_0xe64168=_0x2005f4(0x435)[_0x2005f4(0x92f)](_0xdd46e7);VisuMZ[_0x2005f4(0xce2)]['JS'][_0x45cc0f]=new Function(_0xe64168);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x853)]=function(_0x532e6a,_0x353011){const _0x1db1a9=_0x1e608f,_0x430a70=_0x1db1a9(0x5b1)[_0x1db1a9(0x92f)](_0x532e6a);VisuMZ[_0x1db1a9(0xce2)]['JS'][_0x353011]=new Function(_0x430a70);},TextManager[_0x1e608f(0x685)]=VisuMZ[_0x1e608f(0xce2)]['Settings']['PartyCmd']['CmdTextAutoBattle'],TextManager['autoBattleStart']=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x6b5)][_0x1e608f(0x2bb)],TextManager[_0x1e608f(0xac9)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)]['AutoBattle'][_0x1e608f(0x7ea)],TextManager[_0x1e608f(0xc49)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x8be)][_0x1e608f(0x340)],ColorManager[_0x1e608f(0xd5a)]=function(_0x225cb0){const _0x2cf3a9=_0x1e608f;return _0x225cb0=String(_0x225cb0),_0x225cb0[_0x2cf3a9(0x97b)](/#(.*)/i)?_0x2cf3a9(0xa6f)[_0x2cf3a9(0x92f)](String(RegExp['$1'])):this[_0x2cf3a9(0x500)](Number(_0x225cb0));},DataManager[_0x1e608f(0x530)]=function(_0x5750ba){const _0xaf64f=_0x1e608f;if(_0x5750ba[_0xaf64f(0xb2d)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0xaf64f(0x74c)!==_0xaf64f(0x74c))_0x3efefc[_0xaf64f(0x848)][_0xaf64f(0x2f4)]=!![];else{const _0x471ba6=String(RegExp['$1'])[_0xaf64f(0xb11)]()[_0xaf64f(0x2a9)]();if(_0x471ba6==='MANUAL')return _0xaf64f(0x77e);if(VisuMZ[_0xaf64f(0x855)][_0x471ba6])return _0x471ba6;}}const _0x1c9a2a=VisuMZ[_0xaf64f(0xce2)]['Settings']['Damage'][_0xaf64f(0xa76)][_0xaf64f(0xb11)]()[_0xaf64f(0x2a9)]();if(VisuMZ['DamageStyles'][_0x1c9a2a])return _0x1c9a2a;return'MANUAL';},DataManager[_0x1e608f(0xbe0)]=function(_0x4e926b){const _0x2795cc=_0x1e608f;_0x4e926b=_0x4e926b[_0x2795cc(0xb11)]()[_0x2795cc(0x2a9)](),this[_0x2795cc(0x322)]=this[_0x2795cc(0x322)]||{};if(this[_0x2795cc(0x322)][_0x4e926b])return this[_0x2795cc(0x322)][_0x4e926b];for(let _0x16aa88=0x1;_0x16aa88<0x64;_0x16aa88++){if(_0x2795cc(0x781)!==_0x2795cc(0x781)){if(!_0x376fab)return;for(const _0x15fcd3 of _0x4a7018['list']){if([0x6c,0x198]['includes'](_0x15fcd3['code'])){const _0x3fbd52=_0x15fcd3[_0x2795cc(0x54c)][0x0];if(_0x3fbd52['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}else{if(!$dataSystem[_0x2795cc(0x310)][_0x16aa88])continue;let _0x15c2cd=$dataSystem['skillTypes'][_0x16aa88][_0x2795cc(0xb11)]()[_0x2795cc(0x2a9)]();_0x15c2cd=_0x15c2cd[_0x2795cc(0x5e4)](/\x1I\[(\d+)\]/gi,''),_0x15c2cd=_0x15c2cd['replace'](/\\I\[(\d+)\]/gi,''),this[_0x2795cc(0x322)][_0x15c2cd]=_0x16aa88;}}return this['_stypeIDs'][_0x4e926b]||0x0;},DataManager[_0x1e608f(0x7af)]=function(_0x48218e){const _0x2e770d=_0x1e608f;_0x48218e=_0x48218e[_0x2e770d(0xb11)]()['trim'](),this[_0x2e770d(0xc82)]=this['_skillIDs']||{};if(this[_0x2e770d(0xc82)][_0x48218e])return this[_0x2e770d(0xc82)][_0x48218e];for(const _0x3c3d37 of $dataSkills){if(!_0x3c3d37)continue;this[_0x2e770d(0xc82)][_0x3c3d37[_0x2e770d(0x6aa)][_0x2e770d(0xb11)]()[_0x2e770d(0x2a9)]()]=_0x3c3d37['id'];}return this[_0x2e770d(0xc82)][_0x48218e]||0x0;},DataManager[_0x1e608f(0x800)]=function(_0x203231){const _0x4fe04f=_0x1e608f;_0x203231=_0x203231[_0x4fe04f(0xb11)]()['trim'](),this[_0x4fe04f(0x476)]=this[_0x4fe04f(0x476)]||{};if(this[_0x4fe04f(0x476)][_0x203231])return this[_0x4fe04f(0x476)][_0x203231];for(const _0x23900e of $dataEnemies){if(_0x4fe04f(0x681)===_0x4fe04f(0x681)){if(!_0x23900e)continue;this[_0x4fe04f(0x476)][_0x23900e[_0x4fe04f(0x6aa)][_0x4fe04f(0xb11)]()['trim']()]=_0x23900e['id'];}else{if(this[_0x4fe04f(0x675)])return this['_battleLayoutStyle'];return this[_0x4fe04f(0x675)]=_0x24d77b[_0x4fe04f(0x327)]['battleLayoutStyle'](),this['_battleLayoutStyle'];}}return this[_0x4fe04f(0x476)][_0x203231]||0x0;},DataManager[_0x1e608f(0xb8b)]=function(_0x19d86a){const _0x30f260=_0x1e608f;_0x19d86a=_0x19d86a[_0x30f260(0xb11)]()[_0x30f260(0x2a9)](),this[_0x30f260(0x2b0)]=this[_0x30f260(0x2b0)]||{};if(this[_0x30f260(0x2b0)][_0x19d86a])return this[_0x30f260(0x2b0)][_0x19d86a];for(let _0x13ddef=0x1;_0x13ddef<0x64;_0x13ddef++){if(!$dataSystem[_0x30f260(0x15b)][_0x13ddef])continue;let _0x5240ec=$dataSystem[_0x30f260(0x15b)][_0x13ddef]['toUpperCase']()[_0x30f260(0x2a9)]();_0x5240ec=_0x5240ec[_0x30f260(0x5e4)](/\x1I\[(\d+)\]/gi,''),_0x5240ec=_0x5240ec[_0x30f260(0x5e4)](/\\I\[(\d+)\]/gi,''),this[_0x30f260(0x2b0)][_0x5240ec]=_0x13ddef;}return this[_0x30f260(0x2b0)][_0x30f260(0xa1b)]=0x0,this[_0x30f260(0x2b0)][_0x19d86a]||0x0;},DataManager[_0x1e608f(0x666)]=function(_0x4ba552){const _0x49d221=_0x1e608f,_0x1dc892=_0x49d221(0x30b);let _0x5ae6f1=_0x4ba552[_0x49d221(0x359)],_0x806cdf=_0x4ba552[_0x49d221(0x6aa)];const _0x4d63fe=_0x4ba552['note'];return _0x4d63fe[_0x49d221(0x97b)](/<DISPLAY ICON: (\d+)>/i)&&(_0x5ae6f1=Number(RegExp['$1'])),_0x4d63fe[_0x49d221(0x97b)](/<DISPLAY TEXT: (.*)>/i)&&(_0x806cdf=String(RegExp['$1'])),_0x1dc892[_0x49d221(0x92f)](_0x5ae6f1,_0x806cdf);},DataManager['battleCommandName']=function(_0x502ee4){const _0x386b53=_0x1e608f;return _0x502ee4[_0x386b53(0xb2d)][_0x386b53(0x97b)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x502ee4[_0x386b53(0x6aa)];},DataManager[_0x1e608f(0x495)]=function(_0x251ad0){const _0x359b5e=_0x1e608f;return _0x251ad0[_0x359b5e(0xb2d)][_0x359b5e(0x97b)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x251ad0[_0x359b5e(0x359)];},DataManager['swapEnemyIDs']=function(_0x4cd1a6){const _0x9d90bc=_0x1e608f,_0x34ab41=$dataEnemies[_0x4cd1a6];if(_0x34ab41){if('CClNy'!==_0x9d90bc(0xd10)){if(!_0x37949b[_0x9d90bc(0x5f2)]())return;if(!_0x51060a[_0x9d90bc(0x6d5)])return;const _0x570e22=_0x57605d['getLastPluginCommandInterpreter']();if(!_0x570e22)return;_0x570e22[_0x9d90bc(0x7b2)]('battleSkew');}else{if(_0x34ab41['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x9d90bc(0xa55)===_0x9d90bc(0xa55)){const _0x414694=String(RegExp['$1'])[_0x9d90bc(0x783)](/[\r\n]+/)[_0x9d90bc(0x569)](''),_0x21256c=this[_0x9d90bc(0xc8a)](_0x414694);_0x4cd1a6=this['getEnemyIdWithName'](_0x21256c)||_0x4cd1a6,_0x4cd1a6=DataManager[_0x9d90bc(0x4aa)](_0x4cd1a6);}else{const _0x26a227=_0x13a8b7(_0x23c64b['$1'])[_0x9d90bc(0x783)](/[\r\n]+/)[_0x9d90bc(0x569)](''),_0x3a1281=_0x5c6779[_0x9d90bc(0xc8a)](_0x26a227);_0x3e9108[_0x9d90bc(0xb9c)]=_0x24ca26[_0x9d90bc(0xb8b)](_0x3a1281);}}}}return _0x4cd1a6;},DataManager[_0x1e608f(0xc8a)]=function(_0xb68ee3){const _0x27fc7f=_0x1e608f;let _0x2f6403=0x0;const _0x461aa3={};for(const _0xba51af of _0xb68ee3){if('ChKyP'===_0x27fc7f(0x39a)){if(_0xba51af[_0x27fc7f(0x97b)](/(.*):[ ](\d+)/i)){if('WjRBS'==='WjRBS'){const _0x40ef6d=String(RegExp['$1'])[_0x27fc7f(0x2a9)](),_0x40f687=Number(RegExp['$2']);_0x461aa3[_0x40ef6d]=_0x40f687,_0x2f6403+=_0x40f687;}else return this[_0x27fc7f(0xc93)]();}else{if(_0xba51af[_0x27fc7f(0x97b)](/(.*):[ ](\d+\.?\d+)/i)){const _0x45ec16=String(RegExp['$1'])[_0x27fc7f(0x2a9)](),_0x320345=Number(RegExp['$2']);_0x461aa3[_0x45ec16]=_0x320345,_0x2f6403+=_0x320345;}else{if(_0xba51af!==''){if(_0x27fc7f(0xc16)!==_0x27fc7f(0xc16))return _0x3190b6[_0x27fc7f(0xce2)][_0x27fc7f(0x4a9)][_0x27fc7f(0x409)][_0x27fc7f(0xd7c)];else _0x461aa3[_0xba51af]=0x1,_0x2f6403++;}}}}else return this[_0x27fc7f(0xb04)]()?(_0x7172a9=this[_0x27fc7f(0xc51)](),this[_0x27fc7f(0x242)](_0x129746)):(this[_0x27fc7f(0x1a7)]=-0x1,_0xe2d685[_0x27fc7f(0xb79)](...this[_0x27fc7f(0xaa9)]()),this['repeatTargets'](_0x16405e));}if(_0x2f6403<=0x0)return'';let _0x4b6668=Math[_0x27fc7f(0xb41)]()*_0x2f6403;for(const _0x16495e in _0x461aa3){if(_0x27fc7f(0xb45)===_0x27fc7f(0xd33))return this[_0x27fc7f(0x8e1)]=this['_battleBalloonSprites']||[],this[_0x27fc7f(0x8e1)][_0x27fc7f(0xcaf)]>0x0;else{_0x4b6668-=_0x461aa3[_0x16495e];if(_0x4b6668<=0x0)return _0x16495e;}}return'';},DataManager[_0x1e608f(0xae4)]=function(_0x4656d1){const _0x7b205e=_0x1e608f;if(!_0x4656d1)return![];if(!VisuMZ['BattleCore'][_0x7b205e(0x4a9)]['ActionSequence'][_0x7b205e(0xd06)])return![];if(_0x4656d1[_0x7b205e(0xb2d)][_0x7b205e(0x97b)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4656d1[_0x7b205e(0xb2d)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x585d9c of _0x4656d1[_0x7b205e(0x6c6)]){if(!_0x585d9c)continue;if(_0x585d9c[_0x7b205e(0x24d)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager['createTroopNote']=function(_0x56ff97){const _0x218375=_0x1e608f,_0x4b04fd=$dataTroops[_0x56ff97];if(!_0x4b04fd)return'';let _0x2138c4='';_0x2138c4+=_0x4b04fd['name'];for(const _0x42d911 of _0x4b04fd[_0x218375(0x8a7)]){if(_0x218375(0x50e)===_0x218375(0x50e))for(const _0x42d6b7 of _0x42d911[_0x218375(0x68e)]){if(_0x218375(0x13c)!==_0x218375(0xc65))[0x6c,0x198][_0x218375(0xc3d)](_0x42d6b7[_0x218375(0x24d)])&&(_0x2138c4+='\x0a',_0x2138c4+=_0x42d6b7[_0x218375(0x54c)][0x0]);else return 0x1;}else{const _0x5db996=_0x4cff7f[_0x218375(0xce2)][_0x218375(0x4a9)][_0x218375(0x680)];if(_0x5db996&&_0x5db996[_0x218375(0x41a)])return _0x5db996[_0x218375(0x41a)][_0x218375(0x2d7)](this);this[_0x218375(0x78f)]=_0x447f31[_0x218375(0x78f)],this[_0x218375(0x96b)]=_0x3e939[_0x218375(0x96b)];const _0x16a353=_0x223694['max'](0x1,this[_0x218375(0x78f)]/this[_0x218375(0x34b)][_0x218375(0x78f)]),_0x347dcc=_0x1d6586['max'](0x1,this[_0x218375(0x96b)]/this['bitmap'][_0x218375(0x96b)]),_0x5978b5=_0x349a5f[_0x218375(0x127)](_0x16a353,_0x347dcc);this['scale']['x']=_0x5978b5,this[_0x218375(0x6e9)]['y']=_0x5978b5,this['x']=(_0x18d367['width']-this[_0x218375(0x78f)])/0x2,this['y']=_0x797f19[_0x218375(0x96b)]-this[_0x218375(0x96b)];}}return _0x2138c4;},ConfigManager[_0x1e608f(0x29e)]=ConfigManager[_0x1e608f(0x29e)]??![],ConfigManager[_0x1e608f(0xc25)]=ConfigManager[_0x1e608f(0xc25)]??![],ConfigManager[_0x1e608f(0xc49)]=ConfigManager[_0x1e608f(0xc49)]??!![],VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x45a)]=ConfigManager['makeData'],ConfigManager[_0x1e608f(0x415)]=function(){const _0x4e2418=_0x1e608f,_0xadeff5=VisuMZ[_0x4e2418(0xce2)][_0x4e2418(0x45a)]['call'](this);return _0xadeff5[_0x4e2418(0x29e)]=this[_0x4e2418(0x29e)],_0xadeff5[_0x4e2418(0xc25)]=this['autoBattleUseSkills'],_0xadeff5[_0x4e2418(0xc49)]=this[_0x4e2418(0xc49)],_0xadeff5;},VisuMZ['BattleCore'][_0x1e608f(0x1d3)]=ConfigManager[_0x1e608f(0xd28)],ConfigManager[_0x1e608f(0xd28)]=function(_0x1b682c){const _0x53ec83=_0x1e608f;VisuMZ[_0x53ec83(0xce2)][_0x53ec83(0x1d3)]['call'](this,_0x1b682c);_0x53ec83(0x29e)in _0x1b682c?this[_0x53ec83(0x29e)]=_0x1b682c['autoBattleAtStart']:_0x53ec83(0x67d)!=='lhtfJ'?this[_0x53ec83(0x29e)]=![]:_0x40b01d=![];_0x53ec83(0xc25)in _0x1b682c?this[_0x53ec83(0xc25)]=_0x1b682c[_0x53ec83(0xc25)]:this[_0x53ec83(0xc25)]=![];if(_0x53ec83(0xc49)in _0x1b682c){if(_0x53ec83(0x4ca)===_0x53ec83(0x4ca))this['visualHpGauge']=_0x1b682c['visualHpGauge'];else{if(!_0x169c5f[_0x53ec83(0x5f2)]())return;const _0x559974=_0x4a87eb['_logWindow'];_0x559974[_0x53ec83(0x7e7)]();}}else _0x53ec83(0x180)!==_0x53ec83(0x180)?this[_0x53ec83(0x6c9)](_0x53ec83(0xcf6)):this[_0x53ec83(0xc49)]=!![];},ImageManager[_0x1e608f(0x295)]=ImageManager['svActorHorzCells']||0x9,ImageManager[_0x1e608f(0x8f0)]=ImageManager[_0x1e608f(0x8f0)]||0x6,VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x9f0)]=BattleManager[_0x1e608f(0x429)],BattleManager[_0x1e608f(0x429)]=function(_0x5bf286,_0x94e680,_0x1ae3c3){const _0x13a91e=_0x1e608f;VisuMZ[_0x13a91e(0xce2)][_0x13a91e(0x9f0)][_0x13a91e(0x2d7)](this,_0x5bf286,_0x94e680,_0x1ae3c3),this[_0x13a91e(0xaa2)]={};},VisuMZ['BattleCore'][_0x1e608f(0x620)]=BattleManager[_0x1e608f(0x5a7)],BattleManager[_0x1e608f(0x5a7)]=function(){const _0x187d12=_0x1e608f;VisuMZ[_0x187d12(0xce2)][_0x187d12(0x620)]['call'](this),this[_0x187d12(0x4cd)]=[];},BattleManager['refreshStatusWindow']=function(){const _0x4df61b=_0x1e608f;if(!SceneManager[_0x4df61b(0x5f2)]())return;const _0x5ef614=SceneManager[_0x4df61b(0x327)][_0x4df61b(0x496)];if(_0x5ef614)_0x5ef614[_0x4df61b(0x316)]();},BattleManager[_0x1e608f(0xbf8)]=function(){const _0x4ad9ce=_0x1e608f;if(BattleManager[_0x4ad9ce(0x643)]())return _0x4ad9ce(0x655);return _0x4ad9ce(0xb3b);},BattleManager[_0x1e608f(0x2a2)]=function(_0x47ff04){const _0x4b7e38=_0x1e608f;return _0x47ff04=_0x47ff04['toUpperCase']()[_0x4b7e38(0x2a9)](),this[_0x4b7e38(0xbf8)]()===_0x47ff04;},BattleManager[_0x1e608f(0xb8e)]=function(){const _0x432bc3=_0x1e608f;return this[_0x432bc3(0x2a2)]('DTB');},BattleManager[_0x1e608f(0x562)]=function(){return this['isDTB']();},BattleManager[_0x1e608f(0x2bc)]=function(){const _0x16befa=_0x1e608f;return!this[_0x16befa(0x562)]();},BattleManager['isTeamBased']=function(){const _0x5ee7b1=_0x1e608f;return!this[_0x5ee7b1(0x562)]()&&!this[_0x5ee7b1(0x2bc)]();},BattleManager[_0x1e608f(0x6e5)]=function(_0x58c0a4){const _0x5493b8=_0x1e608f;this['_battlerKeyCache']=this['_battlerKeyCache']||{};if(this[_0x5493b8(0xaa2)][_0x58c0a4]!==undefined)return this[_0x5493b8(0xaa2)][_0x58c0a4];this[_0x5493b8(0xaa2)][_0x58c0a4]=null;const _0x17752a=this[_0x5493b8(0xcca)](),_0xf50715=_0x17752a[_0x5493b8(0xd05)](_0x2f4561=>_0x2f4561[_0x5493b8(0xb6c)]()===_0x58c0a4);if(_0xf50715)this[_0x5493b8(0xaa2)][_0x58c0a4]=_0xf50715;return this[_0x5493b8(0xaa2)][_0x58c0a4];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xb6c)]=function(){const _0xc2cd9a=_0x1e608f;return _0xc2cd9a(0x305)[_0xc2cd9a(0x92f)](this[_0xc2cd9a(0x28c)]()?_0xc2cd9a(0x532):_0xc2cd9a(0x366),this[_0xc2cd9a(0x6aa)]());},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x3e2)]=function(_0x1e67f0){const _0x2402e7=_0x1e608f;if(this['_targetBattlerKey']!=='')return;if(typeof _0x1e67f0===_0x2402e7(0xb07))this[_0x2402e7(0x6ad)]=_0x1e67f0[_0x2402e7(0x377)]()[_0x2402e7(0x2a9)]();else{if(_0x2402e7(0x5ed)!=='rIDbb'){const _0x2053b2=_0x445aa0[_0x2402e7(0xb2d)];if(_0x2053b2['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5c11c7=_0x1f69ec(_0x38fd3d['$1']),_0x55022d=_0x4f742b[_0x2402e7(0xce2)][_0x2402e7(0x1eb)](_0x2d21e1,'Targets');_0x149445[_0x2402e7(0xce2)][_0x2402e7(0x521)](_0x5c11c7,_0x55022d);}if(_0x2053b2['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x5bf79d=_0x52ba5a(_0x361112['$1']),_0x25ca2b=_0x418438[_0x2402e7(0xce2)][_0x2402e7(0x1eb)](_0x423569,_0x2402e7(0x1ce));_0xfbe68d['BattleCore']['createCommandVisibleJS'](_0x5bf79d,_0x25ca2b);}}else this[_0x2402e7(0x6ad)]=_0x1e67f0[_0x2402e7(0xb6c)]();}},Game_Action['prototype'][_0x1e608f(0xc51)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x34c)]=function(){const _0x39489a=_0x1e608f,_0x325170=this['_targetBattlerKey']||'',_0x5eaa43=BattleManager['getBattlerFromKey'](_0x325170);if(!_0x5eaa43)return this[_0x39489a(0x16e)]();if(!_0x5eaa43['isAlive']())return this[_0x39489a(0x16e)]();return _0x5eaa43;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x16e)]=function(){const _0x1f80aa=_0x1e608f,_0x10c5cc=this['_targetBattlerKey'];return _0x10c5cc[_0x1f80aa(0x97b)](/ACTOR/i)?_0x1f80aa(0x642)!==_0x1f80aa(0xa11)?this['friendsUnit']()[_0x1f80aa(0xa2c)]():0x24:this[_0x1f80aa(0x8a4)]()[_0x1f80aa(0xa2c)]();},BattleManager[_0x1e608f(0x518)]=function(){const _0x1bbeb2=_0x1e608f;return this[_0x1bbeb2(0xcca)]()['filter'](_0x4ab616=>_0x4ab616[_0x1bbeb2(0xbd7)]());},BattleManager[_0x1e608f(0x344)]=function(_0x57619a){const _0x92946c=_0x1e608f;_0x57619a===_0x92946c(0xd39)&&(this[_0x92946c(0x2ce)]=!![]),$gameParty[_0x92946c(0x344)](_0x57619a),$gameTroop[_0x92946c(0x344)](_0x57619a);},VisuMZ['BattleCore'][_0x1e608f(0xd0d)]=BattleManager[_0x1e608f(0x393)],BattleManager[_0x1e608f(0x393)]=function(){const _0x315a10=_0x1e608f;this[_0x315a10(0x580)]=![],this[_0x315a10(0xb82)]=ConfigManager[_0x315a10(0x29e)],this[_0x315a10(0x2ce)]=![],this[_0x315a10(0x344)](_0x315a10(0xab6)),VisuMZ[_0x315a10(0xce2)]['BattleManager_startBattle'][_0x315a10(0x2d7)](this),this['processBattleCoreJS'](_0x315a10(0xba8));},BattleManager[_0x1e608f(0x2ac)]=function(_0x3f59e1){const _0x141c2b=_0x1e608f,_0x40414a=VisuMZ[_0x141c2b(0xce2)][_0x141c2b(0x4a9)][_0x141c2b(0x3c9)];_0x3f59e1!==_0x141c2b(0x9f8)&&_0x40414a[_0x141c2b(0x730)]&&VisuMZ[_0x141c2b(0xce2)][_0x141c2b(0x66e)](_0x40414a['BattleEndEvent'])&&$gameTemp[_0x141c2b(0xd6f)](_0x40414a[_0x141c2b(0x730)]);const _0x5d3610=_0x141c2b(0x97f)[_0x141c2b(0x92f)](_0x3f59e1);_0x40414a[_0x5d3610]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x40414a[_0x5d3610])&&(_0x141c2b(0x2ea)!==_0x141c2b(0x61c)?$gameTemp[_0x141c2b(0xd6f)](_0x40414a[_0x5d3610]):_0xee3189['prototype'][_0x141c2b(0xa6d)][_0x141c2b(0x2d7)](this));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x86b)]=BattleManager[_0x1e608f(0x5f8)],BattleManager[_0x1e608f(0x5f8)]=function(){const _0x5b91dd=_0x1e608f;if(this[_0x5b91dd(0x1bc)]===_0x5b91dd(0x7fc)){if(_0x5b91dd(0xaa3)!==_0x5b91dd(0xaa3)){if(this['constructor']===_0x3b8c8d)return;_0x226484[_0x5b91dd(0xbe1)]['hide'][_0x5b91dd(0x2d7)](this);}else{if($gameTemp['isCommonEventReserved']())return![];}}return VisuMZ[_0x5b91dd(0xce2)][_0x5b91dd(0x86b)]['call'](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x364)]=BattleManager[_0x1e608f(0x9d8)],BattleManager[_0x1e608f(0x9d8)]=function(){const _0x5030e1=_0x1e608f;this[_0x5030e1(0x2ce)]=!![],this[_0x5030e1(0x344)](_0x5030e1(0xd39)),VisuMZ['BattleCore'][_0x5030e1(0x364)]['call'](this),this[_0x5030e1(0x2ac)]('Victory');},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1f7)]=BattleManager[_0x1e608f(0x3a8)],BattleManager[_0x1e608f(0x3a8)]=function(){const _0x20e6a8=_0x1e608f;this[_0x20e6a8(0x2ce)]=!![],VisuMZ[_0x20e6a8(0xce2)][_0x20e6a8(0x1f7)][_0x20e6a8(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)]['BattleManager_processDefeat']=BattleManager[_0x1e608f(0x144)],BattleManager['processDefeat']=function(){const _0x1d22e9=_0x1e608f;this[_0x1d22e9(0x2ce)]=!![],this['processBattleCoreJS'](_0x1d22e9(0x585)),VisuMZ[_0x1d22e9(0xce2)][_0x1d22e9(0xad5)][_0x1d22e9(0x2d7)](this),this[_0x1d22e9(0x2ac)](_0x1d22e9(0x347));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x240)]=BattleManager[_0x1e608f(0x370)],BattleManager[_0x1e608f(0x370)]=function(_0x54b0fb){const _0x55c8a4=_0x1e608f;this[_0x55c8a4(0x580)]=!![],this[_0x55c8a4(0xb82)]=![],this[_0x55c8a4(0x344)](_0x55c8a4(0x232)),VisuMZ[_0x55c8a4(0xce2)][_0x55c8a4(0x240)]['call'](this,_0x54b0fb),this[_0x55c8a4(0x344)](_0x55c8a4(0x1c4));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x992)]=BattleManager[_0x1e608f(0x5b3)],BattleManager[_0x1e608f(0x5b3)]=function(){const _0x59771d=_0x1e608f;if(this['isTurnBased']())this[_0x59771d(0x344)](_0x59771d(0x26f));VisuMZ['BattleCore'][_0x59771d(0x992)][_0x59771d(0x2d7)](this);if(this['isTurnBased']())this[_0x59771d(0x344)](_0x59771d(0x154));},BattleManager[_0x1e608f(0xa4b)]=function(){const _0x2090de=_0x1e608f,_0x3a5116=this['_subject'],_0x16ad0f=_0x3a5116[_0x2090de(0x509)]();_0x16ad0f?_0x2090de(0x233)===_0x2090de(0xab1)?_0x257125=_0x13b535[_0x2090de(0x979)]:(_0x16ad0f[_0x2090de(0xa16)](),_0x16ad0f[_0x2090de(0x62d)]()?(this[_0x2090de(0xcc0)](),_0x3a5116[_0x2090de(0x224)]()):(_0x3a5116[_0x2090de(0x224)](),this[_0x2090de(0xa86)]())):(this['endAction'](),this[_0x2090de(0x7cb)]=null);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x314)]=BattleManager['startAction'],BattleManager[_0x1e608f(0xcc0)]=function(){const _0x825755=_0x1e608f,_0x3fe8b9=this[_0x825755(0x7cb)][_0x825755(0x509)](),_0x311eba=this[_0x825755(0x7cb)];_0x3fe8b9&&_0x3fe8b9['subject']()===_0x311eba&&_0x3fe8b9[_0x825755(0xb6b)]('PreStartActionJS'),VisuMZ[_0x825755(0xce2)][_0x825755(0x314)][_0x825755(0x2d7)](this),_0x3fe8b9&&_0x3fe8b9[_0x825755(0x8b4)]()===_0x311eba&&_0x3fe8b9[_0x825755(0xb6b)](_0x825755(0x999));},VisuMZ['BattleCore'][_0x1e608f(0x8c1)]=BattleManager[_0x1e608f(0xa86)],BattleManager[_0x1e608f(0xa86)]=function(){const _0x1d6eac=_0x1e608f,_0x542859=this['_action'],_0x26af81=this[_0x1d6eac(0x7cb)];_0x542859&&_0x542859!==this['_lastAction']&&_0x542859[_0x1d6eac(0x8b4)]()===_0x26af81&&_0x542859[_0x1d6eac(0xb6b)]('PreEndActionJS'),this['_subject']?VisuMZ[_0x1d6eac(0xce2)][_0x1d6eac(0x8c1)][_0x1d6eac(0x2d7)](this):'YSVHl'!==_0x1d6eac(0x59f)?this[_0x1d6eac(0x1bc)]=_0x1d6eac(0x7fc):(_0x1d874f--,_0x515bf2++),_0x542859&&_0x542859!==this[_0x1d6eac(0x3be)]&&_0x542859[_0x1d6eac(0x8b4)]()===_0x26af81&&_0x542859[_0x1d6eac(0xb6b)]('PostEndActionJS'),this[_0x1d6eac(0x7d5)](this[_0x1d6eac(0xcca)]()),this[_0x1d6eac(0x3be)]=this[_0x1d6eac(0xa4d)];},BattleManager[_0x1e608f(0x7d5)]=function(_0x475842){const _0x32a25b=_0x1e608f;for(const _0x458246 of _0x475842){if(_0x32a25b(0x109)===_0x32a25b(0x4d6))_0x8185c3[_0x32a25b(0x77a)](0x0);else{if(!_0x458246)continue;if(!_0x458246['battler']())continue;_0x458246['battler']()[_0x32a25b(0x36c)]();}}},BattleManager[_0x1e608f(0x25d)]=function(){const _0x549afe=_0x1e608f;!this[_0x549afe(0xa66)][_0x549afe(0xcdd)]()&&this[_0x549afe(0xa86)]();},Game_Battler['prototype'][_0x1e608f(0x423)]=function(){const _0x3911a2=_0x1e608f;this[_0x3911a2(0xd6a)]();if(Imported[_0x3911a2(0x3ef)]){const _0x357ef5=VisuMZ['SkillsStatesCore'][_0x3911a2(0x4a9)][_0x3911a2(0x6d8)];if(_0x357ef5&&_0x357ef5['ActionEndUpdate']===![]){if(_0x3911a2(0x2f1)!==_0x3911a2(0x2f1)){_0x2c1830[_0x3911a2(0xbe1)]['refresh'][_0x3911a2(0x2d7)](this),this[_0x3911a2(0x1c9)][_0x3911a2(0x639)]();if(!this[_0x3911a2(0x366)]())return;this[_0x3911a2(0x149)]();}else this['removeStatesAuto'](0x1);}}else this[_0x3911a2(0x3de)](0x1);this['removeBuffsAuto']();},BattleManager[_0x1e608f(0x7f1)]=function(){const _0x4728be=_0x1e608f;this[_0x4728be(0x983)]=VisuMZ[_0x4728be(0xce2)][_0x4728be(0x4a9)][_0x4728be(0x3c9)][_0x4728be(0x384)][_0x4728be(0x2d7)](this);},VisuMZ['BattleCore'][_0x1e608f(0x17b)]=BattleManager[_0x1e608f(0x160)],BattleManager[_0x1e608f(0x160)]=function(){const _0x387bd7=_0x1e608f;this[_0x387bd7(0x344)](_0x387bd7(0x842)),BattleManager[_0x387bd7(0x4b1)][_0x387bd7(0x25a)](),VisuMZ['BattleCore'][_0x387bd7(0x17b)][_0x387bd7(0x2d7)](this),this[_0x387bd7(0x2ac)](_0x387bd7(0xa56));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x5cc)]=BattleManager['onEscapeFailure'],BattleManager[_0x1e608f(0x84d)]=function(){const _0x28c1d2=_0x1e608f;this[_0x28c1d2(0x344)](_0x28c1d2(0x7bb));const _0x1ed067=this[_0x28c1d2(0x983)];VisuMZ[_0x28c1d2(0xce2)]['BattleManager_onEscapeFailure'][_0x28c1d2(0x2d7)](this),this[_0x28c1d2(0x983)]=_0x1ed067+VisuMZ[_0x28c1d2(0xce2)][_0x28c1d2(0x4a9)][_0x28c1d2(0x3c9)][_0x28c1d2(0x3b0)]['call'](this),this['_inputting']=![],this[_0x28c1d2(0x2ac)](_0x28c1d2(0x9f8));},BattleManager[_0x1e608f(0x95f)]=function(){const _0x5a81d4=_0x1e608f;let _0x2921bf=![];if(this[_0x5a81d4(0x3e8)]())for(const _0x407ecf of $gameTroop[_0x5a81d4(0x4ac)]()){this[_0x5a81d4(0xa66)]['push'](_0x5a81d4(0xac5),TextManager[_0x5a81d4(0x682)][_0x5a81d4(0x92f)](_0x407ecf)),this[_0x5a81d4(0xa66)][_0x5a81d4(0xb79)](_0x5a81d4(0x380)),_0x2921bf=!![];}if(this[_0x5a81d4(0x898)])this[_0x5a81d4(0xa66)]['push'](_0x5a81d4(0xac5),TextManager[_0x5a81d4(0xc01)][_0x5a81d4(0x92f)]($gameParty[_0x5a81d4(0x6aa)]())),this[_0x5a81d4(0xa66)][_0x5a81d4(0xb79)]('wait');else{if(this[_0x5a81d4(0xcd1)]){if(_0x5a81d4(0x741)==='cZBta'){const _0x361220=_0xe19212[_0x5a81d4(0xce2)][_0x5a81d4(0x4a9)]['Mechanics'],_0x17924c=_0x361220['BattleStartEvent'];_0x17924c&&_0x11e925['BattleCore'][_0x5a81d4(0x66e)](_0x17924c)&&(this[_0x5a81d4(0x256)]=!![],_0x42b78f[_0x5a81d4(0xd6f)](_0x361220[_0x5a81d4(0x8c3)]),_0x539dcc['updateInterpreter'](),_0x5cdee6['_interpreter'][_0x5a81d4(0xd4d)]=!![]),_0x361220[_0x5a81d4(0x2ae)]>0x0&&(this['_canLose']=!![]);}else this[_0x5a81d4(0xa66)][_0x5a81d4(0xb79)](_0x5a81d4(0xac5),TextManager[_0x5a81d4(0x118)][_0x5a81d4(0x92f)]($gameParty[_0x5a81d4(0x6aa)]())),this['_logWindow'][_0x5a81d4(0xb79)]('wait');}}_0x2921bf&&(this[_0x5a81d4(0xa66)]['push'](_0x5a81d4(0x380)),this[_0x5a81d4(0xa66)][_0x5a81d4(0xb79)]('clear')),this[_0x5a81d4(0x643)]()&&this[_0x5a81d4(0x4f3)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x1e608f(0x3e8)]=function(){const _0x6c634b=_0x1e608f;if(BattleManager[_0x6c634b(0xb82)])return![];return VisuMZ['BattleCore']['Settings'][_0x6c634b(0x662)][_0x6c634b(0x690)];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x42f)]=BattleManager['startInput'],BattleManager[_0x1e608f(0x507)]=function(){const _0x56a761=_0x1e608f;VisuMZ[_0x56a761(0xce2)][_0x56a761(0x42f)]['call'](this),this['isDTB']()&&this[_0x56a761(0x4f3)]()&&!this['_surprise']&&$gameParty[_0x56a761(0x67f)]()&&this[_0x56a761(0x49f)]();},BattleManager[_0x1e608f(0x4f3)]=function(){const _0xf400c8=_0x1e608f;return VisuMZ[_0xf400c8(0xce2)][_0xf400c8(0x4a9)][_0xf400c8(0x408)][_0xf400c8(0x77b)];},BattleManager[_0x1e608f(0x8ac)]=function(){const _0x1c4236=_0x1e608f;this[_0x1c4236(0x329)]()&&this[_0x1c4236(0x49f)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd23)]=Scene_Battle[_0x1e608f(0xbe1)]['startActorCommandSelection'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x278)]=function(){const _0x1dfffd=_0x1e608f;VisuMZ['BattleCore'][_0x1dfffd(0xd23)]['call'](this);if(BattleManager[_0x1dfffd(0x643)]()&&BattleManager[_0x1dfffd(0x71b)]){if(_0x1dfffd(0x6ed)===_0x1dfffd(0x6ed))BattleManager[_0x1dfffd(0x71b)]=![],this[_0x1dfffd(0xae3)]();else return![];}},BattleManager[_0x1e608f(0xb93)]=function(_0x1b9537,_0x22487d,_0x5e52b8){const _0x12ed67=_0x1e608f;if(!_0x5e52b8)return;if(!_0x1b9537)return;if(!_0x22487d)return;const _0x5be8b9=this[_0x12ed67(0xa4d)];this[_0x12ed67(0xa4d)]=new Game_Action(_0x1b9537);if(DataManager[_0x12ed67(0x989)](_0x5e52b8))this[_0x12ed67(0xa4d)]['setItem'](_0x5e52b8['id']);if(DataManager[_0x12ed67(0x8fb)](_0x5e52b8))this[_0x12ed67(0xa4d)][_0x12ed67(0x5cf)](_0x5e52b8['id']);if(this[_0x12ed67(0xa4d)][_0x12ed67(0xa0b)]())BattleManager['invokeAction'](_0x1b9537,_0x22487d);this[_0x12ed67(0xa4d)]=_0x5be8b9;},BattleManager[_0x1e608f(0x48e)]=function(_0x20ff1a,_0x50296c){const _0xae5db7=_0x1e608f;this[_0xae5db7(0xa4d)][_0xae5db7(0x820)]=_0x50296c,this[_0xae5db7(0xa66)]['displayReflection'](_0x50296c),this['_logWindow'][_0xae5db7(0xbc3)](_0x20ff1a,this[_0xae5db7(0xa4d)]),this[_0xae5db7(0xa4d)][_0xae5db7(0x967)](_0x20ff1a),this['_logWindow'][_0xae5db7(0xccb)](_0x20ff1a,_0x20ff1a);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x169)]=BattleManager[_0x1e608f(0x206)],BattleManager[_0x1e608f(0x206)]=function(){const _0x43920c=_0x1e608f;VisuMZ['BattleCore'][_0x43920c(0x169)][_0x43920c(0x2d7)](this),this[_0x43920c(0x5ba)]=this[_0x43920c(0x5ba)]['filter'](_0x5be275=>_0x5be275&&_0x5be275[_0x43920c(0x5d6)]());},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xbea)]=BattleManager[_0x1e608f(0x501)],BattleManager[_0x1e608f(0x501)]=function(_0x33c597){const _0x4a1dd6=_0x1e608f;if(this[_0x4a1dd6(0x1bc)]===_0x4a1dd6(0x21e)){if(_0x4a1dd6(0x33b)!==_0x4a1dd6(0x13f))this['updateCustomActionSequence']();else{if(!this[_0x4a1dd6(0xa5d)][_0x4a1dd6(0x2a0)](_0x2467c4['id']))return![];}}else this['_phase']==='forceAction'?this['updateForceAction']():VisuMZ['BattleCore']['BattleManager_updatePhase']['call'](this,_0x33c597);},BattleManager['prepareCustomActionSequence']=function(){const _0x1d15b2=_0x1e608f;this[_0x1d15b2(0x8b7)]=this[_0x1d15b2(0xb02)]['slice'](0x0),this[_0x1d15b2(0x1a7)]=0x0,this['_target']=this[_0x1d15b2(0x8b7)][0x0]||null,this[_0x1d15b2(0x1bc)]=_0x1d15b2(0x21e);},BattleManager[_0x1e608f(0xbb2)]=function(){const _0x5a0bc9=_0x1e608f;!this['updateEventMain']()&&!this[_0x5a0bc9(0xa66)][_0x5a0bc9(0xcdd)]()&&(this[_0x5a0bc9(0x1bc)]=_0x5a0bc9(0xbc7));},BattleManager[_0x1e608f(0x463)]=function(_0x197cdc){const _0xcfa643=_0x1e608f;this[_0xcfa643(0x5ba)]['remove'](_0x197cdc);if(_0x197cdc===this[_0xcfa643(0x7cb)])return;const _0x2acfa4=JsonEx[_0xcfa643(0x346)](_0x197cdc[_0xcfa643(0x509)]());this[_0xcfa643(0x4cd)]['push']([_0x197cdc,_0x2acfa4]);},BattleManager[_0x1e608f(0x24f)]=function(){},BattleManager[_0x1e608f(0x35e)]=function(){const _0x101cf2=_0x1e608f;if(this[_0x101cf2(0x643)]())this['_phase']=_0x101cf2(0x7fc);else{if(this[_0x101cf2(0x4cd)]['length']>0x0)this[_0x101cf2(0x1bc)]=_0x101cf2(0x7fc);else{if('nBrjG'===_0x101cf2(0xcf1))return _0x401091[_0x101cf2(0xbe1)][_0x101cf2(0x57b)][_0x101cf2(0x2d7)](this);else this[_0x101cf2(0x507)]();}}},BattleManager[_0x1e608f(0x841)]=function(){const _0x2119ac=_0x1e608f,_0x128da1=this[_0x2119ac(0x7cb)];_0x128da1&&this[_0x2119ac(0x643)]()&&_0x128da1[_0x2119ac(0xd7f)](_0x2119ac(0x35c));for(;;){const _0x4351e6=this[_0x2119ac(0xccc)]();if(!_0x4351e6)return null;if(_0x4351e6[_0x2119ac(0xd3b)]()&&_0x4351e6[_0x2119ac(0x205)]()){if(_0x2119ac(0x891)===_0x2119ac(0x15c))_0x3e6033[_0x17db16]=null;else return _0x4351e6;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x365153=_0x1e608f;if(this[_0x365153(0x4cd)][_0x365153(0xcaf)]>0x0){if('rCcmw'===_0x365153(0x4dc))_0x428dd8[_0x365153(0xce2)][_0x365153(0x7b0)]['call'](this),this[_0x365153(0xb1b)]=this['_iconIndex']>0x0?0xff:0x0;else{const _0x863724=this[_0x365153(0x4cd)][_0x365153(0x97d)](),_0xd2098b=_0x863724[0x0];return _0xd2098b[_0x365153(0x49d)]=_0xd2098b[_0x365153(0x49d)]||[],_0xd2098b[_0x365153(0x49d)][0x0]=_0x863724[0x1],_0xd2098b;}}else return this[_0x365153(0x5ba)][_0x365153(0x97d)]();},VisuMZ[_0x1e608f(0xce2)]['Game_Battler_forceAction']=Game_Battler['prototype']['forceAction'],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x463)]=function(_0x531762,_0x5ac635){const _0x5127e0=_0x1e608f;VisuMZ[_0x5127e0(0xce2)][_0x5127e0(0x17e)]['call'](this,_0x531762,_0x5ac635),this[_0x5127e0(0x49d)][this[_0x5127e0(0x49d)][_0x5127e0(0xcaf)]-0x1][_0x5127e0(0xa92)]=!![];},Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x65c)]=function(_0x38ee36){const _0x474922=_0x1e608f;return this[_0x474922(0x663)](_0x38ee36[0x0],_0x38ee36[0x1],_0x406a64=>{const _0x3214d4=_0x474922;if('IdqqK'==='IdqqK'){if(!_0x406a64['isDeathStateAffected']()){if('XQRxj'!==_0x3214d4(0x354)){if(_0x458c87[_0x3214d4(0x256)])return![];return _0x232c85[_0x3214d4(0xce2)][_0x3214d4(0x9aa)][_0x3214d4(0x2d7)](this);}else _0x406a64['forceAction'](_0x38ee36[0x2],_0x38ee36[0x3]),BattleManager[_0x3214d4(0x463)](_0x406a64);}}else return _0x5f37fd[_0x3214d4(0xce2)][_0x3214d4(0x4a9)][_0x3214d4(0x408)][_0x3214d4(0x835)];}),!![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x924)]=Game_Battler['prototype'][_0x1e608f(0x6c0)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x6c0)]=function(){const _0x5658e4=_0x1e608f;VisuMZ[_0x5658e4(0xce2)]['Game_Battler_makeSpeed'][_0x5658e4(0x2d7)](this);if(this['_actions']['length']<=0x0){if(_0x5658e4(0x696)===_0x5658e4(0x7b8))return _0x208ea8['_scene'][_0x5658e4(0x687)]()===_0x5658e4(0xd11)?_0x3f600a[_0x5658e4(0xce2)][_0x5658e4(0x4a9)][_0x5658e4(0x51a)]['SkillItemBorderCols']:_0x1eddad[_0x5658e4(0xce2)][_0x5658e4(0x4a9)][_0x5658e4(0x51a)][_0x5658e4(0x93f)];else this[_0x5658e4(0x261)]=Number[_0x5658e4(0x7d6)];}},BattleManager['shouldHideBattleEndPopups']=function(){const _0x50cacf=_0x1e608f;if(VisuMZ[_0x50cacf(0xce2)][_0x50cacf(0x4a9)]['Damage'][_0x50cacf(0x49c)]??!![])return![];return SceneManager[_0x50cacf(0x5f2)]()&&this['_endingBattle'];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb31)]=BattleManager[_0x1e608f(0x49f)],BattleManager[_0x1e608f(0x49f)]=function(){const _0x4d7f34=_0x1e608f;this[_0x4d7f34(0x643)]()?this[_0x4d7f34(0x867)]():VisuMZ[_0x4d7f34(0xce2)][_0x4d7f34(0xb31)][_0x4d7f34(0x2d7)](this);},BattleManager[_0x1e608f(0x867)]=function(){const _0x5669a2=_0x1e608f;if(this[_0x5669a2(0x6e3)]){if(this[_0x5669a2(0x6e3)][_0x5669a2(0x49f)]()){if('VDbpS'!=='lfZHF')return;else _0x599f79[_0x5669a2(0xce2)][_0x5669a2(0x5fa)][_0x5669a2(0x2d7)](this);}this[_0x5669a2(0x79a)](),this['checkTpbInputClose'](),!this[_0x5669a2(0x7cb)]&&!this[_0x5669a2(0x6e3)]&&SceneManager[_0x5669a2(0x327)]['updateBattleProcess']();}else{if(!this[_0x5669a2(0x7cb)]){if('uUtTB'!==_0x5669a2(0xace))this['selectNextActor']();else{if(!this[_0x5669a2(0xc72)]())return;if(!this['_borderPortraitSprite'])this[_0x5669a2(0x2e5)]();this[_0x5669a2(0xa51)](),this[_0x5669a2(0x2b9)]();}}}},BattleManager['checkTpbInputClose']=function(){const _0x5ec839=_0x1e608f;(!this[_0x5ec839(0x329)]()||this[_0x5ec839(0xbf0)]())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0x5ec839(0xb46)]()['includes'](this[_0x5ec839(0x38c)])&&(_0x5ec839(0x6d4)===_0x5ec839(0x6d4)?this[_0x5ec839(0x38c)]=null:_0x29ea0f[_0x5ec839(0xb2d)]+='<CUSTOM\x20ACTION\x20SEQUENCE>')),!this[_0x5ec839(0x38c)]?_0x5ec839(0x69f)===_0x5ec839(0x69f)?(this[_0x5ec839(0x158)](),this[_0x5ec839(0x6e3)]=null,this['_inputting']=![]):this[_0x5ec839(0x675)]=_0x5ec839(0x702):this[_0x5ec839(0xcdf)]());},BattleManager[_0x1e608f(0xcdf)]=function(){const _0x442d07=_0x1e608f;if(!$gameParty['battleMembers']()['includes'](this['_tpbSceneChangeCacheActor'])){if(_0x442d07(0x6b3)!=='ZzoXT')this[_0x442d07(0x38c)]=null;else{if(!this[_0x442d07(0xbcb)]()&&_0x4d9bb3[_0x442d07(0xb82)])return!![];return _0x54c66f[_0x442d07(0xbe1)]['isAutoBattle'][_0x442d07(0x2d7)](this);}}if(this['_tpbSceneChangeCacheActor'])_0x442d07(0x656)===_0x442d07(0x656)?(this[_0x442d07(0x6e3)]=this['_tpbSceneChangeCacheActor'],this[_0x442d07(0x6e3)][_0x442d07(0x92c)]='charged',this[_0x442d07(0xaee)]=!![],this[_0x442d07(0x38c)]=null):(_0x5f5973['BattleCore'][_0x442d07(0x47e)]['call'](this),_0x35faa1[_0x442d07(0x389)]());else{if(_0x442d07(0x517)!=='lTEVo')return _0x5dab8f['_motionSpeed'];else this[_0x442d07(0x158)](),this[_0x442d07(0x6e3)]=null,this['_inputting']=![];}},VisuMZ[_0x1e608f(0xce2)]['BattleManager_isTpbMainPhase']=BattleManager[_0x1e608f(0x879)],BattleManager[_0x1e608f(0x879)]=function(){const _0x2833ce=_0x1e608f;if(this[_0x2833ce(0x1bc)]===_0x2833ce(0x21e)){if(_0x2833ce(0x38b)!==_0x2833ce(0x83c))return this[_0x2833ce(0x6bb)]();else{if(this[_0x2833ce(0xc0f)]()<=0x0)return;}}else return VisuMZ['BattleCore']['BattleManager_isTpbMainPhase'][_0x2833ce(0x2d7)](this);},BattleManager[_0x1e608f(0x6bb)]=function(){const _0xea983f=_0x1e608f;return this[_0xea983f(0x3a2)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xaf4)]=BattleManager[_0x1e608f(0x158)],BattleManager[_0x1e608f(0x158)]=function(){const _0x5c30b8=_0x1e608f;this[_0x5c30b8(0x643)]()&&this[_0x5c30b8(0x1bc)]==='battleEnd'&&(this['_currentActor']=null),VisuMZ[_0x5c30b8(0xce2)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ['BattleCore'][_0x1e608f(0x9e9)]=BattleManager[_0x1e608f(0x9cc)],BattleManager['inputtingAction']=function(){const _0x45dadd=_0x1e608f,_0x1ea7d1=this['_currentActor'];if(_0x1ea7d1&&!_0x1ea7d1[_0x45dadd(0x9cc)]()){const _0x33a7da=_0x1ea7d1[_0x45dadd(0x81f)];_0x1ea7d1['_actions'][_0x33a7da]=new Game_Action(_0x1ea7d1);}return VisuMZ[_0x45dadd(0xce2)][_0x45dadd(0x9e9)][_0x45dadd(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)]['BattleManager_checkSubstitute']=BattleManager[_0x1e608f(0x333)],BattleManager[_0x1e608f(0x333)]=function(_0x55b82e){const _0x4ace89=_0x1e608f;if(this['_action'][_0x4ace89(0xbdb)]())return![];return VisuMZ['BattleCore'][_0x4ace89(0x99d)][_0x4ace89(0x2d7)](this,_0x55b82e);},SceneManager['isSceneBattle']=function(){const _0x35ea21=_0x1e608f;return this['_scene']&&this[_0x35ea21(0x327)][_0x35ea21(0x5c0)]===Scene_Battle;},SceneManager[_0x1e608f(0xcff)]=function(){const _0x5d79b8=_0x1e608f;return Spriteset_Battle['prototype'][_0x5d79b8(0x369)]();},SceneManager[_0x1e608f(0x6e0)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x1a4797=_0x1e608f;if(SceneManager[_0x1a4797(0xb2a)](Scene_Options))return!![];return![];},SceneManager[_0x1e608f(0x5af)]=function(_0x19508e){const _0x2bfa51=_0x1e608f;if(!SceneManager[_0x2bfa51(0x5f2)]())return!![];const _0x10116a=['Scene_Options','Scene_Party'];return _0x10116a['includes'](_0x19508e[_0x2bfa51(0x6aa)]);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x355)]=SceneManager[_0x1e608f(0xb79)],SceneManager[_0x1e608f(0xb79)]=function(_0x40f079){const _0xc7bf0=_0x1e608f;if(!SceneManager[_0xc7bf0(0x5af)](_0x40f079)){if(_0xc7bf0(0x929)===_0xc7bf0(0xa71)){_0x1fc7c8=_0x430ede||'',_0x2c22cc=_0x2270ea||'';_0x4ca808===''&&_0x3076bc===''&&(_0x375a44=this[_0xc7bf0(0x267)]['battleback1Name'](),_0x183331=this[_0xc7bf0(0xcef)][_0xc7bf0(0x8d3)]());const _0x2f823d=_0x44e131[_0xc7bf0(0x571)](_0x7129b3),_0x598053=_0x5c468e[_0xc7bf0(0x98b)](_0x4d00d9);_0x2f823d[_0xc7bf0(0x10f)](this[_0xc7bf0(0x767)][_0xc7bf0(0xcdb)](this,this[_0xc7bf0(0x267)],this[_0xc7bf0(0xcef)],_0x2f823d,_0x598053));}else return this['displayBattleCoreTransitionErrorMsg'](_0x40f079);}VisuMZ[_0xc7bf0(0xce2)][_0xc7bf0(0x355)]['call'](this,_0x40f079);},SceneManager[_0x1e608f(0x55d)]=function(_0x43e64f){const _0x335737=_0x1e608f;if(!$gameTemp[_0x335737(0x324)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x335737(0xb57)]=!![];let _0xbe7414='';_0xbe7414+=_0x335737(0x3a5),_0xbe7414+=_0x335737(0x260)[_0x335737(0x92f)](_0x43e64f[_0x335737(0x6aa)]),alert(_0xbe7414);},VisuMZ['BattleCore'][_0x1e608f(0xca6)]=Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0xb89)],Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(){const _0x5d8ab0=_0x1e608f;VisuMZ[_0x5d8ab0(0xce2)]['Game_Temp_initialize'][_0x5d8ab0(0x2d7)](this),this['_battleBalloonQueue']=[];},VisuMZ['BattleCore']['Game_Temp_requestAnimation']=Game_Temp[_0x1e608f(0xbe1)]['requestAnimation'],Game_Temp[_0x1e608f(0xbe1)]['requestAnimation']=function(_0x2bc0b3,_0x473e4c,_0x97740d){const _0x58a984=_0x1e608f;_0x2bc0b3=_0x2bc0b3['filter']((_0x3b1693,_0x41d586,_0x806447)=>_0x806447['indexOf'](_0x3b1693)===_0x41d586);if(SceneManager['isSceneBattle']()&&SceneManager[_0x58a984(0xcff)]()){if('BqjXY'!==_0x58a984(0x53a))_0x97740d=!_0x97740d;else{_0x1c1b26['changeWeather'](_0x5c2e42[0x0],_0x2ffd26[0x1],_0x14dbd5[0x2]);if(_0x581f3f[0x3])this['wait'](_0x28375d[0x2]);return!![];}}VisuMZ[_0x58a984(0xce2)][_0x58a984(0x216)]['call'](this,_0x2bc0b3,_0x473e4c,_0x97740d),SceneManager[_0x58a984(0x5f2)]()&&BattleManager[_0x58a984(0x4b1)]['processAnimationRequests']();},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x5c3)]=function(_0x26daa6){const _0x3c7922=_0x1e608f;this[_0x3c7922(0x2f5)]=_0x26daa6;},Game_Temp['prototype'][_0x1e608f(0x68b)]=function(){const _0x396436=_0x1e608f;return this[_0x396436(0x2f5)];},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0xbad)]=function(){const _0x14c79e=_0x1e608f;this[_0x14c79e(0x36d)]=undefined;},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x71c)]=function(_0x5d5036){const _0x315cd1=_0x1e608f;if($gameMap&&$dataMap&&$dataMap[_0x315cd1(0xb2d)]){if('ByEtV'!==_0x315cd1(0x5e2))this[_0x315cd1(0x5f5)]($dataMap['note']);else{let _0x52d4fc=null;_0x4d05bc[_0x315cd1(0x6f4)]&&_0x535cb4[_0x315cd1(0x70d)](_0xe6f99e[_0x315cd1(0xb6e)])?_0x52d4fc=new _0x5f5ae0():_0x52d4fc=new _0x437594(),_0x52d4fc[_0x315cd1(0x72a)]=_0x2af7f0[_0x315cd1(0x1da)],_0x52d4fc[_0x315cd1(0xa40)]=_0x2acbf3,_0x52d4fc[_0x315cd1(0xa40)][_0x315cd1(0x87f)]=_0x3a1b35,_0x52d4fc[_0x315cd1(0x429)](_0x25b839,_0x1fcd9a[_0x315cd1(0xb6e)]),_0x10d10a['addChildToUiContainer'](_0x52d4fc),this['_battleBalloonSprites'][_0x315cd1(0xb79)](_0x52d4fc);}}const _0x3a3caa=$dataTroops[_0x5d5036];if(_0x3a3caa){if(_0x315cd1(0x1ae)!==_0x315cd1(0xd3a)){let _0x2e6b80=DataManager['createTroopNote'](_0x3a3caa['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x2e6b80);}else this[_0x315cd1(0xc27)]['y']=this[_0x315cd1(0x96b)]*0.5,this[_0x315cd1(0xc27)]['y']+=_0x4fc93a['randomInt'](this['_shakeFlinchPower'])*(_0x5a2de9[_0x315cd1(0xb41)]()<0.5?-0x1:0x1);}},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x5f5)]=function(_0x5a8f7c){const _0x4e7cf6=_0x1e608f;if(!_0x5a8f7c)return;if(_0x5a8f7c[_0x4e7cf6(0x97b)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){if(_0x4e7cf6(0x457)!==_0x4e7cf6(0x457)){if(this['_cache']['hardDamageCap']!==_0xc76478)return this[_0x4e7cf6(0xa80)][_0x4e7cf6(0x579)];const _0x15b10a=/<DAMAGE CAP:[ ](\d+)>/i,_0x1b29e6=this[_0x4e7cf6(0x6ab)]()[_0x4e7cf6(0x725)](_0xd37a0=>_0xd37a0&&_0xd37a0['note']['match'](_0x15b10a)?_0x42f2b7(_0x1a0a8f['$1']):0x0);let _0x5877f4=_0x1b29e6['length']>0x0?_0x30386a[_0x4e7cf6(0x127)](..._0x1b29e6):0x0;if(_0x5877f4<=0x0)_0x5877f4=_0xaf5ac0['BattleCore'][_0x4e7cf6(0x4a9)][_0x4e7cf6(0x2db)]['DefaultHardCap'];return this[_0x4e7cf6(0xa80)]['hardDamageCap']=_0x5877f4,this[_0x4e7cf6(0xa80)]['hardDamageCap'];}else{const _0x2ec332=String(RegExp['$1']);if(_0x2ec332['match'](/DEFAULT/i))this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x702);else{if(_0x2ec332[_0x4e7cf6(0x97b)](/LIST/i))this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x68e);else{if(_0x2ec332['match'](/XP/i))_0x4e7cf6(0xcf2)!==_0x4e7cf6(0xcf2)?(_0x5e79f4[_0x4e7cf6(0xce2)][_0x4e7cf6(0xc78)][_0x4e7cf6(0x2d7)](this),this[_0x4e7cf6(0x4e6)]()):this[_0x4e7cf6(0x36d)]='xp';else{if(_0x2ec332[_0x4e7cf6(0x97b)](/PORTRAIT/i))_0x4e7cf6(0x8ec)!=='TvHDd'?(_0x53455a[_0x4e7cf6(0x8d4)](_0x8762e0),[_0x4e7cf6(0x937),_0x4e7cf6(0xa69),_0x4e7cf6(0x963)]['includes'](_0x13b7b3)&&this['performWeaponAnimation']()):this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x3d5);else{if(_0x2ec332[_0x4e7cf6(0x97b)](/BORDER/i))this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0xd11);else{if(_0x2ec332['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x4e7cf6(0x1e5)!==_0x4e7cf6(0x454))Imported[_0x4e7cf6(0xb49)]?this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x247):this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x702);else{const _0x5daecd=new _0x4b55d8();return _0x116f92[_0x3eae7a]=_0x5daecd,this[_0x4e7cf6(0x718)](_0x5daecd),this[_0x4e7cf6(0x718)](this[_0x4e7cf6(0x9b0)]),_0x5daecd;}}else _0x2ec332[_0x4e7cf6(0x97b)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x4e7cf6(0xb5d)]?this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x44e):_0x4e7cf6(0x791)===_0x4e7cf6(0x791)?this[_0x4e7cf6(0x36d)]=_0x4e7cf6(0x702):this[_0x4e7cf6(0xb1b)]=0x0);}}}}}}}},VisuMZ['BattleCore'][_0x1e608f(0x4a5)]=Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0xa68)],Game_Temp[_0x1e608f(0xbe1)]['requestBalloon']=function(_0x5c622d,_0x3199d1){const _0x4c381d=_0x1e608f;if(SceneManager[_0x4c381d(0x5f2)]())this['requestBattleBalloon'](_0x5c622d,_0x3199d1);else{if(_0x4c381d(0xc54)!==_0x4c381d(0xc54))return!![];else VisuMZ[_0x4c381d(0xce2)][_0x4c381d(0x4a5)][_0x4c381d(0x2d7)](this,_0x5c622d,_0x3199d1);}},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x320)]=function(_0x38e652,_0x5beb73){const _0x11b2aa=_0x1e608f,_0x4968ba={'target':_0x38e652,'balloonId':_0x5beb73};this[_0x11b2aa(0x701)]=this[_0x11b2aa(0x701)]||[],this[_0x11b2aa(0x701)][_0x11b2aa(0xb79)](_0x4968ba);},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x1cd)]=function(){const _0x5a8caf=_0x1e608f;return this[_0x5a8caf(0x701)]=this[_0x5a8caf(0x701)]||[],this[_0x5a8caf(0x701)]['shift']();},Game_Temp[_0x1e608f(0xbe1)][_0x1e608f(0x498)]=function(){const _0xa1dd3b=_0x1e608f;this[_0xa1dd3b(0x701)]=[];},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x610)]=function(){const _0x37d4d3=_0x1e608f;this[_0x37d4d3(0x8e1)]===undefined&&(_0x37d4d3(0xb50)===_0x37d4d3(0xb50)?this[_0x37d4d3(0x8e1)]=[]:(this[_0x37d4d3(0x132)]=new _0x4f45a0(),this['addChild'](this[_0x37d4d3(0x132)])));for(const _0x2c06d9 of this['_battleBalloonSprites']){if(_0x37d4d3(0x1a9)!=='aRVtf'){if(this[_0x37d4d3(0xd6b)]()){let _0x5a59ad=_0xe83740[_0x37d4d3(0xb02)];_0x5851d9/=_0x5a59ad['length'],this[_0x37d4d3(0x65a)]()&&(_0x519450*=this[_0x37d4d3(0x8b4)]()['attackTimesAdd']()+0x1),_0x27a0a4=_0xaf6f9d>0x0?_0x47eee7[_0x37d4d3(0x958)](_0x18ce17):_0x413bbd['floor'](_0x38cee1);}return _0x58a473;}else!_0x2c06d9[_0x37d4d3(0x69d)]()&&this[_0x37d4d3(0x65f)](_0x2c06d9);}this['processBattleBalloonRequests']();},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x5b9)]=function(){const _0x46dced=_0x1e608f;for(;;){if(_0x46dced(0x4a3)!=='ERavk'){const _0x500b24=$gameTemp[_0x46dced(0x1cd)]();if(_0x500b24)this[_0x46dced(0xb54)](_0x500b24);else break;}else return _0x1a6a77(_0x7f59a1['$2']);}},Spriteset_Battle[_0x1e608f(0xbe1)]['createBattleBalloon']=function(_0x2c9d17){const _0x2ed20e=_0x1e608f,_0x20dc65=this[_0x2ed20e(0x192)](_0x2c9d17[_0x2ed20e(0x1da)]);if(_0x20dc65){if('iInKM'!==_0x2ed20e(0x68d))_0x2702f3[_0x2ed20e(0x7e3)](_0x6a0e86(_0x5f21c2['$1']));else{let _0x3c570f=null;Imported['VisuMZ_4_IconBalloons']&&Array[_0x2ed20e(0x70d)](_0x2c9d17['balloonId'])?_0x3c570f=new Sprite_IconBalloon():_0x3c570f=new Sprite_Balloon(),_0x3c570f[_0x2ed20e(0x72a)]=_0x2c9d17[_0x2ed20e(0x1da)],_0x3c570f['_target']=_0x20dc65,_0x3c570f['_target'][_0x2ed20e(0x87f)]=_0x20dc65,_0x3c570f[_0x2ed20e(0x429)](_0x20dc65,_0x2c9d17[_0x2ed20e(0xb6e)]),BattleManager[_0x2ed20e(0x40e)](_0x3c570f),this[_0x2ed20e(0x8e1)][_0x2ed20e(0xb79)](_0x3c570f);}}},Spriteset_Battle['prototype'][_0x1e608f(0x65f)]=function(_0x5e63fb){const _0x3d416c=_0x1e608f;this[_0x3d416c(0x8e1)][_0x3d416c(0x569)](_0x5e63fb),BattleManager[_0x3d416c(0x368)](_0x5e63fb),_0x5e63fb[_0x3d416c(0x74a)]();},Sprite_Battler['prototype'][_0x1e608f(0x21b)]=function(_0x2044d6,_0x2ee284){},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x601)]=function(){return![];},Spriteset_Battle[_0x1e608f(0xbe1)]['isAnyBattleBalloonPlaying']=function(){const _0x381e0f=_0x1e608f;return this['_battleBalloonSprites']=this[_0x381e0f(0x8e1)]||[],this[_0x381e0f(0x8e1)][_0x381e0f(0xcaf)]>0x0;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x26d)]=Game_System[_0x1e608f(0xbe1)]['initialize'],Game_System[_0x1e608f(0xbe1)]['initialize']=function(){const _0x2b2c4c=_0x1e608f;VisuMZ[_0x2b2c4c(0xce2)]['Game_System_initialize'][_0x2b2c4c(0x2d7)](this),this[_0x2b2c4c(0xb15)]();},Game_System[_0x1e608f(0xbe1)][_0x1e608f(0xb15)]=function(){const _0x5118dd=_0x1e608f;this[_0x5118dd(0x111)]=this[_0x5118dd(0x111)]||[];},Game_System['prototype']['getDefeatedEnemies']=function(){const _0x445768=_0x1e608f;if(this[_0x445768(0x111)]===undefined)this[_0x445768(0xb15)]();return this[_0x445768(0x111)];},Game_System[_0x1e608f(0xbe1)]['registerDefeatedEnemy']=function(_0x1836cf){const _0x5838d6=_0x1e608f;if(this[_0x5838d6(0x111)]===undefined)this[_0x5838d6(0xb15)]();if(!_0x1836cf)return;if(this[_0x5838d6(0x111)][_0x5838d6(0xc3d)](_0x1836cf))return;this['_defeatedEnemies'][_0x5838d6(0xb79)](_0x1836cf),this[_0x5838d6(0x111)]['sort']((_0x426ab5,_0x5a5d73)=>_0x426ab5-_0x5a5d73);},VisuMZ['BattleCore']['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x873)],Game_BattlerBase['prototype'][_0x1e608f(0x873)]=function(_0x1c6352){const _0x7168b6=_0x1e608f,_0x3cb3da=this[_0x7168b6(0x205)](),_0x341efc=this[_0x7168b6(0x9c5)]();VisuMZ['BattleCore'][_0x7168b6(0x450)][_0x7168b6(0x2d7)](this,_0x1c6352),this[_0x7168b6(0xbab)]()&&_0x3cb3da&&this['isDead']()&&(_0x7168b6(0x944)===_0x7168b6(0x3c7)?_0x56fe59[_0x7168b6(0x7b2)]('battleAnimation'):(this[_0x7168b6(0xa18)]=!this[_0x7168b6(0xb67)](),$gameSystem['registerDefeatedEnemy'](this[_0x7168b6(0x89b)]()))),SceneManager[_0x7168b6(0x5f2)]()&&_0x341efc!==this[_0x7168b6(0x9c5)]()&&(this[_0x7168b6(0x8dd)]()&&this[_0x7168b6(0x8dd)]()[_0x7168b6(0x36c)]());},Game_Enemy[_0x1e608f(0xbe1)]['hasBeenDefeatedBefore']=function(){const _0x45c990=_0x1e608f;return $gameSystem[_0x45c990(0xd7e)]()['includes'](this[_0x45c990(0x170)]);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc57)]=Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x19b)],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x19b)]=function(_0x2d4d33){const _0x4d9c39=_0x1e608f;VisuMZ[_0x4d9c39(0xce2)][_0x4d9c39(0xc57)]['call'](this,_0x2d4d33),this[_0x4d9c39(0xbab)]()&&_0x2d4d33===this[_0x4d9c39(0x56e)]()&&this[_0x4d9c39(0x205)]()&&(_0x4d9c39(0x6dc)!==_0x4d9c39(0x4a2)?this[_0x4d9c39(0xa18)]=![]:this[_0x4d9c39(0xb5a)]('pageup',this[_0x4d9c39(0x4db)][_0x4d9c39(0xcdb)](this))),!this['_tempActor']&&!this['_tempBattler']&&SceneManager[_0x4d9c39(0x5f2)]()&&this[_0x4d9c39(0xc75)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xbe5)]=Game_Action['prototype'][_0x1e608f(0x639)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x639)]=function(){const _0x241746=_0x1e608f;VisuMZ[_0x241746(0xce2)][_0x241746(0xbe5)][_0x241746(0x2d7)](this),this[_0x241746(0x262)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x241746(0x3e0)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x241746(0x934)]=_0x241746(0x702),this['clearTargetBattlerKey']();},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x34e)]=function(){const _0x12fadb=_0x1e608f;this[_0x12fadb(0x6ad)]='';},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x980)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x885)],Game_Action[_0x1e608f(0xbe1)]['setSubject']=function(_0x5557cd){const _0x26ec07=_0x1e608f;VisuMZ[_0x26ec07(0xce2)]['Game_Action_setSubject'][_0x26ec07(0x2d7)](this,_0x5557cd),this[_0x26ec07(0x34e)]();},VisuMZ[_0x1e608f(0xce2)]['Game_Action_setSkill']=Game_Action['prototype'][_0x1e608f(0x5cf)],Game_Action[_0x1e608f(0xbe1)]['setSkill']=function(_0x2592b9){const _0x1e3728=_0x1e608f;VisuMZ[_0x1e3728(0xce2)]['Game_Action_setSkill']['call'](this,_0x2592b9),this['clearTargetBattlerKey']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x88c)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x590)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x590)]=function(_0x699a1b){const _0x5c13bc=_0x1e608f;VisuMZ['BattleCore']['Game_Action_setItem'][_0x5c13bc(0x2d7)](this,_0x699a1b),this[_0x5c13bc(0x34e)]();},Game_Action['prototype'][_0x1e608f(0x819)]=function(_0x178bb5,_0x5da790){const _0x289cc7=_0x1e608f;return VisuMZ[_0x289cc7(0xce2)]['Settings'][_0x289cc7(0x2db)][_0x289cc7(0x1ea)][_0x289cc7(0x2d7)](this,_0x178bb5,_0x5da790);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9ad)]=function(_0x34f3c1,_0x4b9930){const _0x910507=_0x1e608f;return VisuMZ[_0x910507(0xce2)][_0x910507(0x4a9)][_0x910507(0x2db)][_0x910507(0x2ab)]['call'](this,_0x34f3c1,_0x4b9930);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x665)]=function(_0x2647d7,_0x12b439){const _0x468ccf=_0x1e608f;return VisuMZ['BattleCore']['Settings'][_0x468ccf(0x2db)][_0x468ccf(0x650)]['call'](this,_0x2647d7,_0x12b439);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4be)]=Game_Action['prototype']['itemHit'],Game_Action['prototype'][_0x1e608f(0xd57)]=function(_0x4e5c89){const _0x22b4c7=_0x1e608f,_0x3943f1=this[_0x22b4c7(0xa0b)]()[_0x22b4c7(0xb2d)];if(_0x3943f1[_0x22b4c7(0x97b)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x3943f1[_0x22b4c7(0x97b)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4e1478=VisuMZ[_0x22b4c7(0xce2)][_0x22b4c7(0x4be)][_0x22b4c7(0x2d7)](this,_0x4e5c89);return _0x4e1478=this[_0x22b4c7(0x3e0)][_0x22b4c7(0xc47)]*_0x4e1478+this[_0x22b4c7(0x3e0)][_0x22b4c7(0xa45)],_0x4e1478;}}},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xc61)]=function(_0x2fde77){const _0x4a3fc7=_0x1e608f;if(!this['item']()['damage'][_0x4a3fc7(0x2f4)])return 0x0;let _0xb6da7e=VisuMZ[_0x4a3fc7(0xce2)][_0x4a3fc7(0x4a9)][_0x4a3fc7(0x2db)]['CriticalHitRateJS'][_0x4a3fc7(0x2d7)](this,_0x2fde77);return _0xb6da7e=this[_0x4a3fc7(0x3e0)]['criticalHitRate']*_0xb6da7e+this[_0x4a3fc7(0x3e0)][_0x4a3fc7(0x58c)],_0xb6da7e;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xa0e)]=function(_0x273fb6){const _0x233095=_0x1e608f;return _0x273fb6=VisuMZ[_0x233095(0xce2)][_0x233095(0x4a9)][_0x233095(0x2db)]['CriticalHitMultiplier'][_0x233095(0x2d7)](this,_0x273fb6),_0x273fb6=this[_0x233095(0x3e0)]['criticalDmgRate']*_0x273fb6+this[_0x233095(0x3e0)][_0x233095(0x2d0)],_0x273fb6;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4b9)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x8ed)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x8ed)]=function(_0x33dfc2){const _0x51f1fb=_0x1e608f;if(this[_0x51f1fb(0x934)]!==_0x51f1fb(0x702))return this['customDamageFormula'](_0x33dfc2);else return DataManager[_0x51f1fb(0x530)](this[_0x51f1fb(0xa0b)]())===_0x51f1fb(0x77e)?VisuMZ[_0x51f1fb(0xce2)]['Game_Action_evalDamageFormula'][_0x51f1fb(0x2d7)](this,_0x33dfc2):this['evalDamageFormulaBattleCore'](_0x33dfc2);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x313)]=function(_0x32e7ae){const _0x5abb5d=_0x1e608f;this[_0x5abb5d(0x934)]=_0x32e7ae;},Game_Action['prototype'][_0x1e608f(0xbec)]=function(_0x28deae){const _0x281e2f=_0x1e608f,_0x5b49db=this['item'](),_0x144e9d=_0x5b49db[_0x281e2f(0x848)][_0x281e2f(0x485)];_0x5b49db['damage'][_0x281e2f(0x485)]=this[_0x281e2f(0x934)];let _0xc16767=VisuMZ['BattleCore'][_0x281e2f(0x4b9)][_0x281e2f(0x2d7)](this,_0x28deae);return _0x5b49db[_0x281e2f(0x848)][_0x281e2f(0x485)]=_0x144e9d,_0xc16767;},Game_Action['prototype'][_0x1e608f(0x892)]=function(){const _0x55d37c=_0x1e608f;if(this[_0x55d37c(0xa0b)]()[_0x55d37c(0xb2d)][_0x55d37c(0x97b)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x55d37c(0x3e5)!==_0x55d37c(0x424)){const _0x372a11=String(RegExp['$1'])[_0x55d37c(0xb11)]()[_0x55d37c(0x2a9)]();return _0x372a11;}else return!![];}return _0x55d37c(0x77e);},Game_Action['prototype'][_0x1e608f(0x4e2)]=function(_0x17e5c0){const _0x586665=_0x1e608f,_0x1e89f9=DataManager[_0x586665(0x530)](this[_0x586665(0xa0b)]()),_0x3b6508=VisuMZ[_0x586665(0x855)][_0x1e89f9];try{if(_0x586665(0x709)!=='trrGs')!this[_0x586665(0xb1e)]()&&!this[_0x586665(0xa66)][_0x586665(0xcdd)]()&&(this[_0x586665(0x1bc)]=_0x586665(0xbc7));else return _0x3b6508[_0x586665(0x1d2)]['call'](this,_0x17e5c0);}catch(_0x2690fc){if($gameTemp[_0x586665(0x324)]())console[_0x586665(0xd43)](_0x2690fc);return VisuMZ[_0x586665(0xce2)][_0x586665(0x4b9)]['call'](this);}},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xcf0)]=function(_0x49808e,_0x277fad){const _0x3bec36=_0x1e608f;if(this['isCertainHit']())return _0x277fad;const _0xd6c38f=this[_0x3bec36(0x8b4)](),_0x5ec8b1=_0x49808e;let _0x277ff7=[],_0x58dc73=[];_0x277ff7[_0x3bec36(0xb79)](this['_armorPenetration']['arPenFlat'],this[_0x3bec36(0x262)][_0x3bec36(0x186)]),_0x58dc73[_0x3bec36(0xb79)](this[_0x3bec36(0x262)][_0x3bec36(0x385)],this[_0x3bec36(0x262)][_0x3bec36(0x42c)]);const _0x495ed4=this[_0x3bec36(0x350)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x458234=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x16f4c4=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x15761d=this[_0x3bec36(0x350)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x277ff7=_0x277ff7[_0x3bec36(0xbe2)](_0x5ec8b1[_0x3bec36(0x6ab)]()[_0x3bec36(0x725)](_0x556e01=>_0x556e01&&_0x556e01[_0x3bec36(0xb2d)][_0x3bec36(0x97b)](_0x495ed4)?Number(RegExp['$1']):0x0)),_0x58dc73=_0x58dc73['concat'](_0x5ec8b1['traitObjects']()[_0x3bec36(0x725)](_0x22dbd5=>_0x22dbd5&&_0x22dbd5['note'][_0x3bec36(0x97b)](_0x458234)?Number(RegExp['$1'])/0x64:0x0)),_0x277ff7=_0x277ff7['concat'](_0xd6c38f[_0x3bec36(0x6ab)]()[_0x3bec36(0x725)](_0x2f019b=>_0x2f019b&&_0x2f019b[_0x3bec36(0xb2d)][_0x3bec36(0x97b)](_0x16f4c4)?Number(RegExp['$1']):0x0)),_0x58dc73=_0x58dc73[_0x3bec36(0xbe2)](_0xd6c38f[_0x3bec36(0x6ab)]()['map'](_0x54e094=>_0x54e094&&_0x54e094[_0x3bec36(0xb2d)][_0x3bec36(0x97b)](_0x15761d)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x3bec36(0xb2d)]['match'](_0x16f4c4)&&_0x277ff7['push'](Number(RegExp['$1'])),this[_0x3bec36(0xa0b)]()['note'][_0x3bec36(0x97b)](_0x15761d)&&(_0x3bec36(0x83f)===_0x3bec36(0x640)?_0x480705=_0x192d8f[_0x3bec36(0x127)](_0x339858,_0x1ff30c):_0x58dc73[_0x3bec36(0xb79)](Number(RegExp['$1']))),_0x277fad=_0x277ff7[_0x3bec36(0x6a6)]((_0x56acee,_0xccdde6)=>_0x56acee-_0xccdde6,_0x277fad),_0x277fad>0x0&&(_0x277fad=_0x58dc73[_0x3bec36(0x6a6)]((_0x60465b,_0x401150)=>_0x60465b*(0x1-_0x401150),_0x277fad)),_0x277fad;},VisuMZ[_0x1e608f(0xce2)]['Game_Action_executeDamage']=Game_Action['prototype'][_0x1e608f(0xa82)],Game_Action[_0x1e608f(0xbe1)]['executeDamage']=function(_0x58f669,_0x1e8ff5){const _0x4a3caf=_0x1e608f;_0x1e8ff5=_0x1e8ff5*this[_0x4a3caf(0x3e0)][_0x4a3caf(0xd87)],_0x1e8ff5+=this[_0x4a3caf(0x3e0)][_0x4a3caf(0x7b6)]*(_0x1e8ff5>=0x0?0x1:-0x1),_0x1e8ff5=this[_0x4a3caf(0x488)](_0x4a3caf(0xd8a),_0x58f669,_0x1e8ff5,![]),_0x1e8ff5=this[_0x4a3caf(0xc66)](_0x1e8ff5),_0x1e8ff5=Math['round'](_0x1e8ff5),this[_0x4a3caf(0xd52)]=_0x1e8ff5,this['_totalValue']=this[_0x4a3caf(0xc6c)]||0x0,this[_0x4a3caf(0xc6c)]+=_0x1e8ff5,VisuMZ[_0x4a3caf(0xce2)][_0x4a3caf(0xbd2)][_0x4a3caf(0x2d7)](this,_0x58f669,_0x1e8ff5),this[_0x4a3caf(0x488)](_0x4a3caf(0x8ee),_0x58f669,_0x1e8ff5,!![]);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xc66)]=function(_0x54e51e){const _0x4d4e81=_0x1e608f;if(this[_0x4d4e81(0xd2f)]())return _0x54e51e;return _0x54e51e=this[_0x4d4e81(0x4c5)](_0x54e51e),_0x54e51e=this[_0x4d4e81(0x371)](_0x54e51e),_0x54e51e;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xd2f)]=function(){const _0x9fa000=_0x1e608f,_0x1b92fc=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x9fa000(0xb2d)][_0x9fa000(0x97b)](_0x1b92fc))return!![];if(this[_0x9fa000(0x8b4)]()[_0x9fa000(0x6ab)]()[_0x9fa000(0x93a)](_0x3ad6d6=>_0x3ad6d6&&_0x3ad6d6[_0x9fa000(0xb2d)][_0x9fa000(0x97b)](_0x1b92fc)))return!![];return!VisuMZ[_0x9fa000(0xce2)][_0x9fa000(0x4a9)]['Damage'][_0x9fa000(0x1b6)];},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x4c5)]=function(_0x25c7c1){const _0x5a63dc=_0x1e608f;if(!VisuMZ[_0x5a63dc(0xce2)]['Settings']['Damage'][_0x5a63dc(0x361)])return _0x25c7c1;const _0x125479=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x5a63dc(0xb2d)][_0x5a63dc(0x97b)](_0x125479))return _0x25c7c1;if(this[_0x5a63dc(0x8b4)]()[_0x5a63dc(0x6ab)]()[_0x5a63dc(0x93a)](_0x5acaba=>_0x5acaba&&_0x5acaba['note'][_0x5a63dc(0x97b)](_0x125479)))return _0x25c7c1;const _0x1cc77c=_0x25c7c1<0x0?-0x1:0x1;_0x25c7c1=Math[_0x5a63dc(0x799)](_0x25c7c1);let _0x1d9b91=this['subject']()[_0x5a63dc(0xc64)]();this[_0x5a63dc(0xa0b)]()[_0x5a63dc(0xb2d)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x5a63dc(0xb7b)!==_0x5a63dc(0xb7b)?(_0x2323df[_0x5a63dc(0xbe1)]['initMembers'][_0x5a63dc(0x2d7)](this),this[_0x5a63dc(0xb1b)]=0x0,this[_0x5a63dc(0xb98)]=null,this[_0x5a63dc(0x2f7)]['x']=0.5,this[_0x5a63dc(0x2f7)]['y']=0x0):_0x1d9b91+=Number(RegExp['$1'])/0x64);_0x1d9b91=_0x1d9b91[_0x5a63dc(0xb1d)](0.01,0x1);const _0x45f905=this[_0x5a63dc(0x70f)](),_0x2e727b=_0x1d9b91*_0x45f905;if(_0x25c7c1>_0x2e727b&&_0x45f905>_0x2e727b){_0x25c7c1-=_0x2e727b;const _0x545f2d=VisuMZ[_0x5a63dc(0xce2)][_0x5a63dc(0x4a9)]['Damage'][_0x5a63dc(0x9d9)],_0x7b8f90=Math['max'](0x1-_0x25c7c1/((_0x45f905-_0x2e727b)*_0x545f2d+_0x25c7c1),0.01);_0x25c7c1*=_0x7b8f90,_0x25c7c1+=_0x2e727b;}return _0x25c7c1*_0x1cc77c;},Game_Action['prototype'][_0x1e608f(0x70f)]=function(){const _0x45f5dd=_0x1e608f;return this['item']()[_0x45f5dd(0xb2d)][_0x45f5dd(0x97b)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x45f5dd(0x8b4)]()[_0x45f5dd(0x579)]();},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x371)]=function(_0x51b026){const _0x376e02=_0x1e608f;console[_0x376e02(0xd43)](_0x51b026);let _0x4e4d6e=this[_0x376e02(0x70f)]();return _0x51b026[_0x376e02(0xb1d)](-_0x4e4d6e,_0x4e4d6e);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xd6b)]=function(){const _0xf2a7fa=_0x1e608f;if(!this[_0xf2a7fa(0xa0b)]())return![];if(!$gameParty[_0xf2a7fa(0xc89)]())return![];return(this[_0xf2a7fa(0xa0b)]()[_0xf2a7fa(0xb2d)]||'')[_0xf2a7fa(0x97b)](/<DISPERSE DAMAGE>/i);},Game_Action['prototype']['disperseDamage']=function(_0x2f1556){const _0x117fdb=_0x1e608f;if(this[_0x117fdb(0xd6b)]()){if(_0x117fdb(0x4c2)===_0x117fdb(0x597))return this[_0x117fdb(0xd32)]();else{let _0x3e88af=BattleManager[_0x117fdb(0xb02)];_0x2f1556/=_0x3e88af['length'];if(this[_0x117fdb(0x65a)]()){if(_0x117fdb(0x9dd)==='Ypgot'){const _0x1cd7cd=_0x44ceca['BattleCore'][_0x117fdb(0x499)][_0x117fdb(0x2d7)](this);if(this[_0x117fdb(0xb42)]())_0x1cd7cd[_0x117fdb(0x569)](this['subject']());return _0x1cd7cd;}else _0x2f1556*=this['subject']()[_0x117fdb(0x13b)]()+0x1;}_0x2f1556=_0x2f1556>0x0?Math[_0x117fdb(0x958)](_0x2f1556):Math['floor'](_0x2f1556);}}return _0x2f1556;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xce3)]=Game_Action[_0x1e608f(0xbe1)]['makeDamageValue'],Game_Action['prototype']['makeDamageValue']=function(_0x90478e,_0x17fe4a){const _0x2b6af9=_0x1e608f;let _0x45e486=VisuMZ[_0x2b6af9(0xce2)]['Game_Action_makeDamageValueDisperse'][_0x2b6af9(0x2d7)](this,_0x90478e,_0x17fe4a);return this[_0x2b6af9(0x458)](_0x45e486);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x732)]=function(_0x273227,_0x131c6a){const _0x20a840=_0x1e608f;let _0x5ca802=(_0x273227[_0x20a840(0x5a3)]*_0x131c6a[_0x20a840(0xbd9)]+_0x131c6a[_0x20a840(0x669)])*_0x273227[_0x20a840(0x8c5)];_0x5ca802=this[_0x20a840(0x458)](_0x5ca802),this[_0x20a840(0x989)]()&&(_0x5ca802*=this['subject']()['pha']),_0x5ca802=Math[_0x20a840(0x14d)](_0x5ca802),_0x5ca802!==0x0&&(_0x273227[_0x20a840(0xa9a)](_0x5ca802),this[_0x20a840(0xbda)](_0x273227));},Game_Action[_0x1e608f(0xbe1)]['itemEffectRecoverMp']=function(_0x697df,_0x2b96dc){const _0x158aa1=_0x1e608f;let _0x1dc2d3=(_0x697df[_0x158aa1(0x153)]*_0x2b96dc[_0x158aa1(0xbd9)]+_0x2b96dc[_0x158aa1(0x669)])*_0x697df['rec'];_0x1dc2d3=this[_0x158aa1(0x458)](_0x1dc2d3);if(this['isItem']()){if(_0x158aa1(0xa91)===_0x158aa1(0xa91))_0x1dc2d3*=this[_0x158aa1(0x8b4)]()['pha'];else{const _0x5655b1=this['_shadowSprite'][_0x158aa1(0x34b)];this[_0x158aa1(0x574)][_0x158aa1(0x23f)](0x0,0x0,_0x5655b1[_0x158aa1(0x78f)],_0x5655b1[_0x158aa1(0x96b)]);}}_0x1dc2d3=Math[_0x158aa1(0x14d)](_0x1dc2d3),_0x1dc2d3!==0x0&&(_0x697df['gainMp'](_0x1dc2d3),this['makeSuccess'](_0x697df));},Game_Action['prototype'][_0x1e608f(0x4d9)]=function(_0x24f55b,_0x317535){const _0x9b04cd=_0x1e608f;let _0x681aa6=Math['floor'](_0x317535['value1']);_0x681aa6=this[_0x9b04cd(0x458)](_0x681aa6),_0x681aa6!==0x0&&(_0x24f55b[_0x9b04cd(0xd67)](_0x681aa6),this[_0x9b04cd(0xbda)](_0x24f55b));},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action[_0x1e608f(0xbe1)]['apply'],Game_Action['prototype'][_0x1e608f(0x967)]=function(_0x555e48){const _0x149ed1=_0x1e608f;this[_0x149ed1(0x488)]('PreApply%1JS',_0x555e48,0x0,!![]),VisuMZ[_0x149ed1(0xce2)]['Game_Action_apply']['call'](this,_0x555e48),this['applyBattleCoreJS'](_0x149ed1(0xd00),_0x555e48,this[_0x149ed1(0xd52)]||0x0,!![]),this[_0x149ed1(0x1dc)](_0x555e48);},Game_Action[_0x1e608f(0xbe1)]['applyBattleCoreJS']=function(_0x30d52e,_0x45065c,_0x3abade,_0x470636){const _0x3133ed=_0x1e608f;if(this[_0x3133ed(0x2a7)]||this[_0x3133ed(0x959)])return;_0x3abade=_0x3abade||0x0;const _0x359762=_0x3abade,_0x31be32=VisuMZ['BattleCore'][_0x3133ed(0x4a9)][_0x3133ed(0x3c9)],_0x2f0327=_0x30d52e[_0x3133ed(0x92f)]('');if(_0x31be32[_0x2f0327]){_0x3abade=_0x31be32[_0x2f0327][_0x3133ed(0x2d7)](this,_0x3abade,_0x45065c);if(_0x470636)_0x3abade=_0x359762;}let _0x10c6a5=VisuMZ[_0x3133ed(0xce2)][_0x3133ed(0x1eb)](this[_0x3133ed(0xa0b)](),_0x30d52e[_0x3133ed(0x92f)](''));if(VisuMZ[_0x3133ed(0xce2)]['JS'][_0x10c6a5]){_0x3abade=VisuMZ[_0x3133ed(0xce2)]['JS'][_0x10c6a5]['call'](this,this[_0x3133ed(0x8b4)](),_0x45065c,this['item'](),_0x3abade);if(_0x470636)_0x3abade=_0x359762;}for(const _0x3da9a7 of this['subject']()[_0x3133ed(0x6ab)]()){if(!_0x3da9a7)continue;_0x10c6a5=VisuMZ[_0x3133ed(0xce2)]['createKeyJS'](_0x3da9a7,_0x30d52e[_0x3133ed(0x92f)](_0x3133ed(0x4cf)));if(VisuMZ['BattleCore']['JS'][_0x10c6a5]){_0x3abade=VisuMZ[_0x3133ed(0xce2)]['JS'][_0x10c6a5][_0x3133ed(0x2d7)](this,this['subject'](),_0x45065c,_0x3da9a7,_0x3abade);if(_0x470636)_0x3abade=_0x359762;}}for(const _0x1aac56 of _0x45065c['traitObjects']()){if(!_0x1aac56)continue;_0x10c6a5=VisuMZ[_0x3133ed(0xce2)][_0x3133ed(0x1eb)](_0x1aac56,_0x30d52e['format'](_0x3133ed(0xaa1)));if(VisuMZ[_0x3133ed(0xce2)]['JS'][_0x10c6a5]){_0x3abade=VisuMZ['BattleCore']['JS'][_0x10c6a5][_0x3133ed(0x2d7)](this,this[_0x3133ed(0x8b4)](),_0x45065c,_0x1aac56,_0x3abade);if(_0x470636)_0x3abade=_0x359762;}}return _0x3abade;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xb6b)]=function(_0x51c6de){const _0x21ad75=_0x1e608f,_0x48142e=this[_0x21ad75(0xc6c)]||0x0,_0x589bf9=VisuMZ[_0x21ad75(0xce2)]['Settings'][_0x21ad75(0x3c9)],_0x4d2907=_0x51c6de[_0x21ad75(0x92f)]('');_0x589bf9[_0x4d2907]&&_0x589bf9[_0x4d2907][_0x21ad75(0x2d7)](this,_0x48142e);let _0x518e81=VisuMZ[_0x21ad75(0xce2)][_0x21ad75(0x1eb)](this[_0x21ad75(0xa0b)](),_0x51c6de);VisuMZ[_0x21ad75(0xce2)]['JS'][_0x518e81]&&VisuMZ[_0x21ad75(0xce2)]['JS'][_0x518e81][_0x21ad75(0x2d7)](this,this[_0x21ad75(0x8b4)](),this[_0x21ad75(0x8b4)](),this[_0x21ad75(0xa0b)](),_0x48142e);for(const _0x3f1cfc of this[_0x21ad75(0x8b4)]()['traitObjects']()){if(_0x21ad75(0x821)===_0x21ad75(0x766))_0x4d2dd3['prototype']['resetFontSettings'][_0x21ad75(0x2d7)](this),this[_0x21ad75(0x1c9)][_0x21ad75(0x422)]=_0x3e285a['BattleCore'][_0x21ad75(0x4a9)][_0x21ad75(0x662)]['NameFontSize'];else{if(!_0x3f1cfc)continue;_0x518e81=VisuMZ['BattleCore'][_0x21ad75(0x1eb)](_0x3f1cfc,_0x51c6de),VisuMZ[_0x21ad75(0xce2)]['JS'][_0x518e81]&&VisuMZ[_0x21ad75(0xce2)]['JS'][_0x518e81][_0x21ad75(0x2d7)](this,this['subject'](),this[_0x21ad75(0x8b4)](),_0x3f1cfc,_0x48142e);}}},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x443)]=function(){const _0x2097af=_0x1e608f;return VisuMZ[_0x2097af(0xce2)][_0x2097af(0x4a9)][_0x2097af(0x3c9)][_0x2097af(0xc59)][_0x2097af(0x2d7)](this);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x778)]=function(){const _0x4a083e=_0x1e608f;return VisuMZ[_0x4a083e(0xce2)][_0x4a083e(0x4a9)]['Mechanics'][_0x4a083e(0x69c)];},Game_Action['prototype'][_0x1e608f(0x302)]=function(){const _0x382b3e=_0x1e608f;if(this[_0x382b3e(0x6ad)]===_0x382b3e(0x3a0))return![];if(this[_0x382b3e(0x6ad)]===_0x382b3e(0x18c))return![];if(!this[_0x382b3e(0xa0b)]())return![];return this['item']()[_0x382b3e(0xb2d)][_0x382b3e(0x97b)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x1e608f(0x5a9)]=function(){const _0x1889e4=_0x1e608f;if(this[_0x1889e4(0x6ad)]===_0x1889e4(0x3a0))return![];if(this[_0x1889e4(0x6ad)]==='all\x20enemies')return![];if(!this[_0x1889e4(0xba0)]&&this[_0x1889e4(0x8b4)]()[_0x1889e4(0xbcb)]())return![];if(this[_0x1889e4(0x302)]())return!![];if(!this[_0x1889e4(0xa0b)]())return![];return typeof this[_0x1889e4(0xa0b)]()[_0x1889e4(0x250)]==='string';},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc0e)]=Game_Action['prototype'][_0x1e608f(0xaef)],Game_Action['prototype'][_0x1e608f(0xaef)]=function(){const _0x1a71a6=_0x1e608f;if(this['_targetBattlerKey']===_0x1a71a6(0x3a0))return![];if(this[_0x1a71a6(0x6ad)]===_0x1a71a6(0x18c))return!![];return this[_0x1a71a6(0x5a9)]()&&!this['isCustomBattleScope']()?this[_0x1a71a6(0x494)]():VisuMZ[_0x1a71a6(0xce2)][_0x1a71a6(0xc0e)]['call'](this);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x494)]=function(){const _0x77377=_0x1e608f,_0x1d7457=this['item']()[_0x77377(0x250)];if(_0x1d7457[_0x77377(0x97b)](/ANY/i))return!![];return _0x1d7457['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc1e)]=Game_Action['prototype'][_0x1e608f(0xbdb)],Game_Action[_0x1e608f(0xbe1)]['isForFriend']=function(){const _0x17b539=_0x1e608f;if(this['_targetBattlerKey']===_0x17b539(0x3a0))return!![];if(this[_0x17b539(0x6ad)]===_0x17b539(0x18c))return![];return this[_0x17b539(0x5a9)]()&&!this[_0x17b539(0x302)]()?this[_0x17b539(0x29c)]():VisuMZ[_0x17b539(0xce2)][_0x17b539(0xc1e)][_0x17b539(0x2d7)](this);},Game_Action['prototype'][_0x1e608f(0x29c)]=function(){const _0x56c6e2=_0x1e608f,_0xee0e5a=this[_0x56c6e2(0xa0b)]()[_0x56c6e2(0x250)];return _0xee0e5a[_0x56c6e2(0x97b)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x74d)]=function(){const _0x24fcfa=_0x1e608f;if(this[_0x24fcfa(0x5a9)]()&&!this[_0x24fcfa(0x302)]()){const _0xd367fe=this[_0x24fcfa(0xa0b)]()['scope'];return _0xd367fe[_0x24fcfa(0x97b)](/(?:ENEMY|FOE)/i)&&_0xd367fe['match'](/OR/i)&&_0xd367fe[_0x24fcfa(0x97b)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x1fc)]=function(){const _0x33bd7d=_0x1e608f;if(this[_0x33bd7d(0x74d)]()){const _0x54c781=this[_0x33bd7d(0xa0b)]()[_0x33bd7d(0x250)];if(_0x54c781[_0x33bd7d(0x97b)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x61d)]=function(){const _0x3ca624=_0x1e608f;if(this[_0x3ca624(0x74d)]()){const _0x298e78=this[_0x3ca624(0xa0b)]()[_0x3ca624(0x250)];if(_0x298e78[_0x3ca624(0x97b)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x1e608f(0xce2)]['Game_Action_isForAliveFriend']=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x218)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x218)]=function(){const _0x2579a8=_0x1e608f;if(this[_0x2579a8(0x6ad)]===_0x2579a8(0x3a0)){if(_0x2579a8(0x2f3)===_0x2579a8(0x3dd)){const _0x10a782=_0x550370['loadPicture'](_0x4bf866);this['_borderPortraitSprite'][_0x2579a8(0xb1b)]=0x0,_0x10a782[_0x2579a8(0x10f)](this[_0x2579a8(0xb55)][_0x2579a8(0xcdb)](this,_0x10a782));}else return!![];}return this['isBattleCoreTargetScope']()&&!this[_0x2579a8(0x302)]()?this['isForAliveFriendBattleCore']():VisuMZ[_0x2579a8(0xce2)][_0x2579a8(0x365)]['call'](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x877)]=Game_Action['prototype'][_0x1e608f(0x392)],Game_Action['prototype'][_0x1e608f(0x392)]=function(){const _0x38dabc=_0x1e608f;if(this[_0x38dabc(0x6ad)]===_0x38dabc(0x3a0)){if(_0x38dabc(0xca0)!==_0x38dabc(0xca0))this[_0x38dabc(0x9b1)]['splice'](_0x9e58a4,0x0,_0x460301);else return VisuMZ['BattleCore'][_0x38dabc(0x877)][_0x38dabc(0x2d7)](this);}return VisuMZ['BattleCore'][_0x38dabc(0x877)][_0x38dabc(0x2d7)](this);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x4fd)]=function(){const _0x2d123b=_0x1e608f;if(this[_0x2d123b(0x74d)]())return!![];return![];},Game_Action[_0x1e608f(0xbe1)]['isForNotUser']=function(){const _0x53bf6b=_0x1e608f;return this['item']()&&this[_0x53bf6b(0xa0b)]()[_0x53bf6b(0xb2d)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x1e608f(0xce2)]['Game_Action_isForOne']=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x470)],Game_Action[_0x1e608f(0xbe1)]['isForOne']=function(){const _0x5b109e=_0x1e608f;if(this[_0x5b109e(0x6ad)]==='all\x20actors')return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(this[_0x5b109e(0x5a9)]()&&!this['isCustomBattleScope']()){if(_0x5b109e(0x2ba)!=='jmyUz')return this[_0x5b109e(0x7d4)]();else this[_0x5b109e(0xb89)](...arguments);}else return VisuMZ[_0x5b109e(0xce2)][_0x5b109e(0x290)]['call'](this);},Game_Action['prototype'][_0x1e608f(0x7d4)]=function(){const _0x58c9d9=_0x1e608f;if(this[_0x58c9d9(0x74d)]())return!![];return![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x214)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xd2a)],Game_Action['prototype'][_0x1e608f(0xd2a)]=function(){const _0x52ef1a=_0x1e608f;if(this['_targetBattlerKey']===_0x52ef1a(0x3a0))return![];if(this[_0x52ef1a(0x6ad)]===_0x52ef1a(0x18c))return![];return this[_0x52ef1a(0x5a9)]()&&!this['isCustomBattleScope']()?this['isForRandomBattleCore']():VisuMZ['BattleCore']['Game_Action_isForRandom'][_0x52ef1a(0x2d7)](this);},Game_Action[_0x1e608f(0xbe1)]['isForRandomBattleCore']=function(){const _0x308916=_0x1e608f,_0x3a2459=this[_0x308916(0xa0b)]()[_0x308916(0x250)];return _0x3a2459[_0x308916(0x97b)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x972)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xb35)],Game_Action[_0x1e608f(0xbe1)]['isForAll']=function(){const _0x301d8b=_0x1e608f;if(this[_0x301d8b(0x6ad)]===_0x301d8b(0x3a0))return!![];if(this[_0x301d8b(0x6ad)]===_0x301d8b(0x18c))return!![];return VisuMZ[_0x301d8b(0xce2)][_0x301d8b(0x972)]['call'](this);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x36f)]=function(){const _0x3dd575=_0x1e608f;if(!this[_0x3dd575(0xa0b)]())return![];if(this[_0x3dd575(0x392)]())return![];return(this[_0x3dd575(0xa0b)]()['note']||'')[_0x3dd575(0x97b)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ['BattleCore'][_0x1e608f(0x8d1)]=Game_Action[_0x1e608f(0xbe1)]['testApply'],Game_Action[_0x1e608f(0xbe1)]['testApply']=function(_0x21b716){const _0x538210=_0x1e608f;if(this[_0x538210(0xb42)]()&&_0x21b716===this['subject']())return![];return VisuMZ['BattleCore'][_0x538210(0x8d1)][_0x538210(0x2d7)](this,_0x21b716);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x499)]=Game_Action['prototype'][_0x1e608f(0x87b)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x87b)]=function(){const _0x552053=_0x1e608f,_0x469995=VisuMZ[_0x552053(0xce2)]['Game_Action_itemTargetCandidates'][_0x552053(0x2d7)](this);if(this['isForNotUser']())_0x469995[_0x552053(0x569)](this[_0x552053(0x8b4)]());return _0x469995;},VisuMZ['BattleCore'][_0x1e608f(0x9e0)]=Game_Action[_0x1e608f(0xbe1)]['needsSelection'],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9bb)]=function(){const _0x296b68=_0x1e608f;return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x296b68(0x2f2)]():VisuMZ['BattleCore'][_0x296b68(0x9e0)][_0x296b68(0x2d7)](this);},Game_Action['prototype'][_0x1e608f(0x2f2)]=function(){const _0x42d224=_0x1e608f,_0x523f15=this[_0x42d224(0xa0b)]()[_0x42d224(0x250)];if(_0x523f15[_0x42d224(0x97b)](/RANDOM/i))return![];if(_0x523f15[_0x42d224(0x97b)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x523f15['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x523f15['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x523f15[_0x42d224(0x97b)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x42d224(0xce2)][_0x42d224(0x9e0)][_0x42d224(0x2d7)](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xa54)],Game_Action[_0x1e608f(0xbe1)]['makeTargets']=function(){const _0x5d5ebd=_0x1e608f;let _0xb3608e=[];if(this[_0x5d5ebd(0x5a9)]()){if(_0x5d5ebd(0xbaf)==='clmOP'){if(this[_0x5d5ebd(0x302)]()){if(_0x5d5ebd(0x6ec)===_0x5d5ebd(0x6ec))_0xb3608e=this['makeTargetsBattleCoreJS']();else{if(_0x3622a7[_0x5d5ebd(0xb66)](_0x2638f9))return!![];return![];}}else _0xb3608e=this['makeTargetsBattleCore']();}else _0x17517d=!_0x4e529f;}else _0xb3608e=VisuMZ[_0x5d5ebd(0xce2)][_0x5d5ebd(0xc69)][_0x5d5ebd(0x2d7)](this);return _0xb3608e=this[_0x5d5ebd(0xb9b)](_0xb3608e),_0xb3608e;},Game_Action['prototype'][_0x1e608f(0xb04)]=function(){const _0x29186e=_0x1e608f;return this[_0x29186e(0x8b4)]()[_0x29186e(0x28c)]()&&!this['subject']()[_0x29186e(0x7d1)]();},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xcd2)]=function(){const _0x44914c=_0x1e608f,_0x1251a6=VisuMZ[_0x44914c(0xce2)][_0x44914c(0x1eb)](this[_0x44914c(0xa0b)](),_0x44914c(0x6d6));if(VisuMZ[_0x44914c(0xce2)]['JS'][_0x1251a6]){targets=VisuMZ[_0x44914c(0xce2)]['Game_Action_makeTargets']['call'](this);const _0x389934=VisuMZ[_0x44914c(0xce2)][_0x44914c(0x1eb)](this[_0x44914c(0xa0b)](),_0x44914c(0x6d6));return targets=VisuMZ['BattleCore']['JS'][_0x389934][_0x44914c(0x2d7)](this,this[_0x44914c(0x8b4)](),targets),this['repeatTargets'](targets);}return this[_0x44914c(0xb47)]();},Game_Action[_0x1e608f(0xbe1)]['makeTargetsBattleCore']=function(){const _0x3326d6=_0x1e608f;let _0x186d1b=[];const _0x72ac3d=String(this[_0x3326d6(0xa0b)]()['scope']);if(this['isForAnyoneFocusOpponents']()){if(_0x3326d6(0x4fe)===_0x3326d6(0x4fe)){if(this[_0x3326d6(0xb04)]())return _0x186d1b=this[_0x3326d6(0xc51)](),this[_0x3326d6(0x242)](_0x186d1b);else{if('oaOHt'===_0x3326d6(0xa01))return this['_targetIndex']=-0x1,_0x186d1b[_0x3326d6(0xb79)](...this['targetsForOpponents']()),this[_0x3326d6(0x242)](_0x186d1b);else _0x4a0e84=_0x27aadc;}}else this[_0x3326d6(0x6c9)]('abnormal');}if(this[_0x3326d6(0x1fc)]()){if(this[_0x3326d6(0xb04)]()){if(_0x3326d6(0xbba)==='OUdSz')_0x3ca026[_0x3326d6(0xd6f)](_0x4474e0[_0x489e6f]);else return _0x186d1b=this[_0x3326d6(0xc51)](),this[_0x3326d6(0x242)](_0x186d1b);}else{if(Imported[_0x3326d6(0xb52)]){if(VisuMZ[_0x3326d6(0x8cb)]['version']<1.19){if(_0x3326d6(0x319)===_0x3326d6(0x319)){let _0xf13eb6='';_0xf13eb6+=_0x3326d6(0x66f),_0xf13eb6+=_0x3326d6(0xc71),_0xf13eb6+=_0x3326d6(0x90d),alert(_0xf13eb6),SceneManager[_0x3326d6(0x3ea)]();}else _0x3450db[_0x3326d6(0xd1b)]()?_0x5401af['prototype'][_0x3326d6(0xd29)][_0x3326d6(0x2d7)](this):_0x2138b6[_0x3326d6(0xce2)][_0x3326d6(0x846)][_0x3326d6(0x2d7)](this),_0x146c4d[_0x3326d6(0x498)](),this['clearOnceParallelInterpreters']();}}return this['_targetIndex']=-0x1,_0x186d1b[_0x3326d6(0xb79)](...this[_0x3326d6(0xaeb)]()),this[_0x3326d6(0x242)](_0x186d1b);}}if(_0x72ac3d[_0x3326d6(0x97b)](/(\d+) RANDOM ANY/i)){let _0x2368f4=Number(RegExp['$1']);while(_0x2368f4--){const _0x22a0e7=Math[_0x3326d6(0xab4)](0x2)===0x0?this[_0x3326d6(0x8a4)]():this[_0x3326d6(0x406)]();_0x186d1b[_0x3326d6(0xb79)](_0x22a0e7[_0x3326d6(0xa2c)]());}return this['repeatTargets'](_0x186d1b);}if(_0x72ac3d[_0x3326d6(0x97b)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x3326d6(0x4ae)===_0x3326d6(0x4ae)){let _0x5c27c9=Number(RegExp['$1']);while(_0x5c27c9--){_0x186d1b['push'](this[_0x3326d6(0x8a4)]()[_0x3326d6(0xa2c)]());}return this['repeatTargets'](_0x186d1b);}else{if(!_0x2b5eb2[_0x3326d6(0x324)]())return;_0x580a43['log'](this['_methods'][_0x3326d6(0x725)](_0x18e913=>_0x18e913[_0x3326d6(0x6aa)])[_0x3326d6(0x4c7)]('\x0a'));}}if(_0x72ac3d[_0x3326d6(0x97b)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x37d54d=Number(RegExp['$1']);while(_0x37d54d--){_0x186d1b[_0x3326d6(0xb79)](this['friendsUnit']()[_0x3326d6(0xa2c)]());}return this[_0x3326d6(0x242)](_0x186d1b);}if(_0x72ac3d[_0x3326d6(0x97b)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('cCisW'===_0x3326d6(0xd77)){if(this['constructor']!==_0x3ec33c)return![];if(!_0x5757ca[_0x3326d6(0x5f2)]())return![];return _0x325556['BattleCore'][_0x3326d6(0x4a9)][_0x3326d6(0x51a)][_0x3326d6(0x163)];}else return _0x186d1b[_0x3326d6(0xb79)](...this[_0x3326d6(0x406)]()[_0x3326d6(0x588)]()[_0x3326d6(0x9f1)](_0x5b9c9a=>_0x5b9c9a!==this[_0x3326d6(0x8b4)]())),this[_0x3326d6(0x242)](_0x186d1b);}return VisuMZ[_0x3326d6(0xce2)][_0x3326d6(0xc69)][_0x3326d6(0x2d7)](this);},Game_Action[_0x1e608f(0xbe1)]['randomTargets']=function(_0x356320){const _0xc924a5=_0x1e608f,_0x23a500=[];for(let _0x129028=0x0;_0x129028<this[_0xc924a5(0xb97)]();_0x129028++){_0x23a500['push'](_0x356320[_0xc924a5(0xa2c)]());}return _0x23a500;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xb9b)]=function(_0x7ef17d){const _0x5d3b82=_0x1e608f;if(!this[_0x5d3b82(0xa0b)]())return _0x7ef17d;const _0xa092b7=this[_0x5d3b82(0xa0b)]()[_0x5d3b82(0xb2d)];if(this[_0x5d3b82(0xb42)]()){this[_0x5d3b82(0xb35)]()&&_0x7ef17d[_0x5d3b82(0x569)](this[_0x5d3b82(0x8b4)]());if(_0x7ef17d[_0x5d3b82(0xc3d)](this[_0x5d3b82(0x8b4)]())){if(_0x5d3b82(0xcb4)!=='NQuiR')return _0x5f1a66[_0x5d3b82(0x8e8)]?this[_0x5d3b82(0x914)](_0x59f68e):_0x3ddc00[_0x5d3b82(0xce2)][_0x5d3b82(0x484)][_0x5d3b82(0x2d7)](this,_0x244dfe);else{const _0x4fad08=this[_0x5d3b82(0x406)]()[_0x5d3b82(0x588)]()[_0x5d3b82(0x569)](this[_0x5d3b82(0x8b4)]());if(_0x4fad08[_0x5d3b82(0xcaf)]>0x0){_0x4fad08[_0x5d3b82(0x7f4)]((_0x534776,_0x43eb77)=>_0x534776[_0x5d3b82(0x212)]()-_0x43eb77['hpRate']());while(_0x7ef17d['includes'](this['subject']())){if(_0x5d3b82(0x194)!==_0x5d3b82(0xa0a)){const _0x511132=_0x7ef17d[_0x5d3b82(0x8fc)](this[_0x5d3b82(0x8b4)]());_0x7ef17d[_0x511132]=_0x4fad08[Math[_0x5d3b82(0xab4)](_0x4fad08[_0x5d3b82(0xcaf)])];}else _0x1f8dd8[_0x5d3b82(0xce2)][_0x5d3b82(0x7d2)]&&_0xc8d740[_0x5d3b82(0xce2)][_0x5d3b82(0x7d2)][_0x5d3b82(0x2d7)](this,_0x177630),_0xea9180[_0x5d3b82(0xce2)][_0x5d3b82(0x21f)](_0x5449c3);}}else{if('EkShp'===_0x5d3b82(0x245))_0x7ef17d[_0x5d3b82(0x569)](this[_0x5d3b82(0x8b4)]());else{const _0x40b76e=this[_0x5d3b82(0xb60)];this[_0x5d3b82(0x9b0)]['move'](_0x40b76e,_0x40b76e),this[_0x5d3b82(0x9b0)]['x']=_0x40b76e-this[_0x5d3b82(0xd7a)]['x'],this['_cursorArea']['y']=_0x40b76e-this['origin']['y'],this[_0x5d3b82(0x5b5)]>0x0&&this[_0x5d3b82(0xacd)]>0x0?this[_0x5d3b82(0x9b0)][_0x5d3b82(0x734)]=this[_0x5d3b82(0x84b)]():this[_0x5d3b82(0x9b0)][_0x5d3b82(0x734)]=![];}}}}}return _0x7ef17d;},VisuMZ['BattleCore'][_0x1e608f(0x81d)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x67b)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x67b)]=function(_0x5d1eed,_0x402738){const _0x4e1aff=_0x1e608f;VisuMZ['BattleCore'][_0x4e1aff(0x81d)][_0x4e1aff(0x2d7)](this,_0x5d1eed,_0x402738);if(!_0x5d1eed[_0x4e1aff(0x60f)]())return;for(const _0x5c11ac of this['subject']()[_0x4e1aff(0xa14)]()){if(_0x5c11ac===_0x5d1eed[_0x4e1aff(0x56e)]()){let _0xc1378e=_0x402738[_0x4e1aff(0xbd9)];_0xc1378e*=_0x5d1eed[_0x4e1aff(0x85c)](_0x5c11ac),_0xc1378e*=this['subject']()[_0x4e1aff(0x9ba)](_0x5c11ac),_0xc1378e*=this[_0x4e1aff(0x351)](_0x5d1eed);if(Math[_0x4e1aff(0xb41)]()<_0xc1378e){if(_0x4e1aff(0x9da)!==_0x4e1aff(0x63b))_0x5d1eed[_0x4e1aff(0xc1f)]=!![],this[_0x4e1aff(0xbda)](_0x5d1eed);else{this[_0x4e1aff(0xb79)](_0x4e1aff(0x961),_0x386faa);_0x2e78dd[_0x4e1aff(0xce2)][_0x4e1aff(0x4a9)][_0x4e1aff(0x151)][_0x4e1aff(0x52f)]&&this['push']('showAnimation',_0x4f9c6b,[_0x3833c8[_0x4e1aff(0x7cb)]],-0x1);if(!_0x1ee7c3['BattleCore'][_0x4e1aff(0x4a9)][_0x4e1aff(0x409)][_0x4e1aff(0x802)])return;this['push'](_0x4e1aff(0xac5),_0x4ea4e2['counterAttack'][_0x4e1aff(0x92f)](_0x9fdd9f[_0x4e1aff(0x6aa)]()));}}}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x9ac)]=Game_Action['prototype']['itemEffectAddNormalState'],Game_Action['prototype']['itemEffectAddNormalState']=function(_0x4376bf,_0x23a1a8){const _0x5fee6f=_0x1e608f;VisuMZ['BattleCore'][_0x5fee6f(0x9ac)][_0x5fee6f(0x2d7)](this,_0x4376bf,_0x23a1a8);if(!_0x4376bf[_0x5fee6f(0x60f)]())return;if(_0x23a1a8['dataId']!==_0x4376bf[_0x5fee6f(0x56e)]())return;let _0x19887c=_0x23a1a8[_0x5fee6f(0xbd9)];if(!this[_0x5fee6f(0x43e)]()){if(_0x5fee6f(0x1ed)!=='zcVRR')return this[_0x5fee6f(0x701)]=this[_0x5fee6f(0x701)]||[],this[_0x5fee6f(0x701)][_0x5fee6f(0x97d)]();else _0x19887c*=_0x4376bf[_0x5fee6f(0x85c)](_0x23a1a8[_0x5fee6f(0x587)]),_0x19887c*=this[_0x5fee6f(0x351)](_0x4376bf);}if(Math[_0x5fee6f(0xb41)]()<_0x19887c){if(_0x5fee6f(0x777)==='UXCxa'){if(this[_0x5fee6f(0x1bc)]===_0x5fee6f(0x7fc)){if(_0x4f47c2['isCommonEventReserved']())return![];}return _0x379fdb[_0x5fee6f(0xce2)][_0x5fee6f(0x86b)][_0x5fee6f(0x2d7)](this);}else _0x4376bf[_0x5fee6f(0xc1f)]=!![],this['makeSuccess'](_0x4376bf);}},VisuMZ['BattleCore'][_0x1e608f(0x728)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x97c)],Game_Action['prototype'][_0x1e608f(0x97c)]=function(){const _0x47219b=_0x1e608f;VisuMZ['BattleCore'][_0x47219b(0x728)][_0x47219b(0x2d7)](this),this[_0x47219b(0xaca)](),this[_0x47219b(0x9f5)]();},Game_Action[_0x1e608f(0xbe1)]['applyGlobalCommonEventNotetags']=function(){const _0x5613ba=_0x1e608f;if(!SceneManager[_0x5613ba(0x5f2)]())return;const _0x283385=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2e6948=this[_0x5613ba(0xa0b)]()[_0x5613ba(0xb2d)][_0x5613ba(0x97b)](_0x283385);if(_0x2e6948){if(_0x5613ba(0xd75)===_0x5613ba(0xd75))for(const _0x59165f of _0x2e6948){if(!_0x59165f)continue;_0x59165f['match'](_0x283385);const _0xec78cb=String(RegExp['$1'])['split'](',')[_0x5613ba(0x725)](_0x1669ee=>String(_0x1669ee)[_0x5613ba(0x2a9)]()),_0x258810=_0xec78cb['map'](_0x38d930=>DataManager[_0x5613ba(0x608)](_0x38d930));for(const _0x148a9c of _0x258810){const _0x48b095=$dataCommonEvents[_0x148a9c];_0x48b095&&$gameTemp[_0x5613ba(0xd6f)](_0x148a9c);}}else{if(!_0x15db53[_0x5613ba(0x875)])return;const _0x3bfe15=_0x4d4dbc[_0x5613ba(0x327)]['_spriteset'];if(!_0x3bfe15)return;_0x1e79fd[_0x5613ba(0x47c)](_0x1c5760,_0x230c7e);const _0x3f0652=_0x382b5a['X']||0x0,_0x31fc3b=_0x53d684['Y']||0x0,_0x9528db=_0x1a00db[_0x5613ba(0x341)]||0x0,_0x4b8d93=_0x1543be['Radius']||0x0,_0x5549b2=_0x126c89['Duration']||0x1,_0x317ae3=_0x3daca6[_0x5613ba(0x9a8)]||_0x5613ba(0xa73);_0x3bfe15[_0x5613ba(0x653)](_0x9528db,_0x3f0652,_0x31fc3b,_0x4b8d93,_0x5549b2,_0x317ae3);}}},DataManager[_0x1e608f(0x608)]=function(_0x62695b){const _0x1c6961=_0x1e608f;_0x62695b=_0x62695b[_0x1c6961(0xb11)]()[_0x1c6961(0x2a9)](),this[_0x1c6961(0xd26)]=this[_0x1c6961(0xd26)]||{};if(this[_0x1c6961(0xd26)][_0x62695b])return this[_0x1c6961(0xd26)][_0x62695b];for(const _0x540be6 of $dataCommonEvents){if(!_0x540be6)continue;let _0x5776d6=_0x540be6[_0x1c6961(0x6aa)];_0x5776d6=_0x5776d6[_0x1c6961(0x5e4)](/\x1I\[(\d+)\]/gi,''),_0x5776d6=_0x5776d6[_0x1c6961(0x5e4)](/\\I\[(\d+)\]/gi,''),this[_0x1c6961(0xd26)][_0x5776d6[_0x1c6961(0xb11)]()[_0x1c6961(0x2a9)]()]=_0x540be6['id'];}return this[_0x1c6961(0xd26)][_0x62695b]||0x0;},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9f5)]=function(){const _0x12476e=_0x1e608f;if(!SceneManager[_0x12476e(0x5f2)]())return;const _0x58ce38=VisuMZ[_0x12476e(0xce2)]['Settings']['Mechanics'];_0x58ce38[_0x12476e(0xb32)]&&$gameSwitches[_0x12476e(0xb83)](_0x58ce38[_0x12476e(0xb32)],![]);_0x58ce38[_0x12476e(0xd46)]&&$gameSwitches[_0x12476e(0xb83)](_0x58ce38[_0x12476e(0xd46)],![]);if(_0x58ce38[_0x12476e(0x825)]){if(_0x12476e(0x9d0)!==_0x12476e(0x9d0))return!this[_0x12476e(0x562)]()&&!this[_0x12476e(0x2bc)]();else $gameVariables[_0x12476e(0xb83)](_0x58ce38['VariableDmg'],0x0);}_0x58ce38[_0x12476e(0x29a)]&&$gameVariables[_0x12476e(0xb83)](_0x58ce38[_0x12476e(0x29a)],0x0);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x1dc)]=function(_0x3de64a){const _0x3ecc1c=_0x1e608f;if(!SceneManager['isSceneBattle']())return;if(!_0x3de64a)return;const _0x327ef9=_0x3de64a[_0x3ecc1c(0x5b2)](),_0x5295d0=VisuMZ[_0x3ecc1c(0xce2)][_0x3ecc1c(0x4a9)][_0x3ecc1c(0x3c9)];if(_0x5295d0[_0x3ecc1c(0xb32)]&&_0x327ef9['critical']){if(_0x3ecc1c(0x78b)===_0x3ecc1c(0x790))return _0x3b0dc9[_0x3ecc1c(0xd7e)]()['includes'](this['_enemyId']);else $gameSwitches[_0x3ecc1c(0xb83)](_0x5295d0['SwitchCritical'],!![]);}if(_0x5295d0['SwitchMissEvade']&&(_0x327ef9[_0x3ecc1c(0xa7e)]||_0x327ef9[_0x3ecc1c(0x3c8)])){if(_0x3ecc1c(0x882)!==_0x3ecc1c(0x882))return _0x3c812d[_0x3ecc1c(0x5f2)]()?_0x2f2412['_scene']['_spriteset'][_0x3ecc1c(0x67e)]:this[_0x3ecc1c(0xbb5)];else $gameSwitches['setValue'](_0x5295d0['SwitchMissEvade'],!![]);}if(_0x5295d0['VariableDmg']){if(_0x3ecc1c(0x523)!==_0x3ecc1c(0x523)){if(!_0x5b03ae[_0x3ecc1c(0x5f2)]())return;if(_0x3d2185[_0x3ecc1c(0x12d)]())return;if(!this['battler']())return;if(_0xae1a88[_0x3ecc1c(0xcaf)]<=0x0)return;_0x3f6dcf=_0x25ce79||{},_0x3f2f92[_0x3ecc1c(0x500)]=_0x86db5e[_0x3ecc1c(0x500)]||_0x3ecc1c(0x939),_0xd222e6[_0x3ecc1c(0xaa6)]=_0x4587ae[_0x3ecc1c(0xaa6)]||[0x0,0x0,0x0,0x0],_0x7ab059[_0x3ecc1c(0x464)]=_0x4a5b1f[_0x3ecc1c(0x464)]||0x0,this[_0x3ecc1c(0x8dd)]()[_0x3ecc1c(0x2ca)](_0x1284fa,_0x239101);}else{let _0x3d8895=$gameVariables[_0x3ecc1c(0x1c6)](_0x5295d0[_0x3ecc1c(0x825)]);_0x327ef9[_0x3ecc1c(0xae9)]>0x0&&(_0x3d8895+=Math[_0x3ecc1c(0x799)](_0x327ef9['hpDamage'])),$gameVariables['setValue'](_0x5295d0[_0x3ecc1c(0x825)],_0x3d8895);}}if(_0x5295d0[_0x3ecc1c(0x29a)]){if('EXfGt'===_0x3ecc1c(0x62f)){let _0x1b432b=$gameVariables[_0x3ecc1c(0x1c6)](_0x5295d0[_0x3ecc1c(0x29a)]);_0x327ef9[_0x3ecc1c(0xae9)]<0x0&&(_0x1b432b+=Math['abs'](_0x327ef9['hpDamage'])),$gameVariables[_0x3ecc1c(0xb83)](_0x5295d0[_0x3ecc1c(0x29a)],_0x1b432b);}else this[_0x3ecc1c(0xa9c)]['x']=(_0x2ba71d[_0x3ecc1c(0x78f)]-_0x3bc1a5[_0x3ecc1c(0x748)])/0x2,this[_0x3ecc1c(0xa9c)]['y']=(_0x5cc87d[_0x3ecc1c(0x96b)]-_0x54d1a5[_0x3ecc1c(0x865)])/0x2;}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4eb)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x6e1)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9a0)],Game_Action[_0x1e608f(0xbe1)]['executeHpDamage']=function(_0x43cb3c,_0x101a6f){const _0x3949a1=_0x1e608f;VisuMZ[_0x3949a1(0xce2)]['Game_Action_executeHpDamage']['call'](this,_0x43cb3c,_0x101a6f);if(!this[_0x3949a1(0x31a)]()&&_0x43cb3c&&_0x43cb3c[_0x3949a1(0x5b2)]()['hpDamage']>0x0){if('QDlBe'===_0x3949a1(0xd59))this[_0x3949a1(0xa64)]('HP',_0x43cb3c,_0x43cb3c[_0x3949a1(0x5b2)]()[_0x3949a1(0xae9)]);else return this[_0x3949a1(0x500)](_0x4f1869(_0x1ad921));}if(_0x43cb3c){this['_executeHpDamage']=this['_executeHpDamage']||{};const _0x379c83=_0x43cb3c['battlerKey']();this[_0x3949a1(0x24e)][_0x379c83]=_0x101a6f;}},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x982)]=function(_0x3c5b6b){const _0x5f49f9=_0x1e608f;this[_0x5f49f9(0x24e)]=this[_0x5f49f9(0x24e)]||{};const _0x458609=_0x3c5b6b[_0x5f49f9(0xb6c)]();return this[_0x5f49f9(0x24e)][_0x458609]||0x0;},VisuMZ['BattleCore']['Game_Action_executeMpDamage']=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9e8)],Game_Action[_0x1e608f(0xbe1)]['executeMpDamage']=function(_0x451acb,_0xe9eafd){const _0xf5b4f6=_0x1e608f;VisuMZ['BattleCore'][_0xf5b4f6(0x883)][_0xf5b4f6(0x2d7)](this,_0x451acb,_0xe9eafd),!this[_0xf5b4f6(0x31a)]()&&_0x451acb&&_0x451acb[_0xf5b4f6(0x5b2)]()['mpDamage']>0x0&&this[_0xf5b4f6(0xa64)]('MP',_0x451acb,_0x451acb['result']()['mpDamage']);},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xa64)]=function(_0x333c72,_0x1969f5,_0x3cd1a2){const _0x15081f=_0x1e608f;_0x333c72=_0x333c72[_0x15081f(0xb11)]()[_0x15081f(0x2a9)]();const _0xbc51e1=this[_0x15081f(0x386)](_0x333c72,_0x1969f5);if(_0xbc51e1<=0x0)return;const _0x3ced21=Math['round'](_0x3cd1a2*_0xbc51e1);if(_0x3ced21<=0x0)return;let _0x5c5c70=this[_0x15081f(0x8b4)]();if(this[_0x15081f(0x820)])_0x5c5c70=this['_reflectionTarget'];const _0x362301=_0x1969f5['isNegativeLifeSteal'](_0x333c72)?-0x1:0x1;if(_0x333c72==='HP')_0x5c5c70[_0x15081f(0xa9a)](_0x362301*_0x3ced21);if(_0x333c72==='MP')_0x5c5c70[_0x15081f(0x22f)](_0x362301*_0x3ced21);},Game_Action[_0x1e608f(0xbe1)]['lifeStealRate']=function(_0xcb6146,_0x482657){const _0x3f2c1b=_0x1e608f;if(this[_0x3f2c1b(0xc7c)](_0xcb6146))return 0x0;if(this['subject']()[_0x3f2c1b(0x762)](_0xcb6146))return 0x0;if(_0x482657['isGuardLifeSteal'](_0xcb6146))return 0x0;let _0x15ce68=0x0;return _0x15ce68+=this[_0x3f2c1b(0x46e)](_0xcb6146),_0x15ce68+=this[_0x3f2c1b(0x8b4)]()[_0x3f2c1b(0x386)](_0xcb6146,this[_0x3f2c1b(0xa0b)]()[_0x3f2c1b(0x416)]),_0x15ce68[_0x3f2c1b(0xb1d)](0x0,0x1);},Game_Action[_0x1e608f(0xbe1)]['isCancelLifeSteal']=function(_0x381a61){const _0x3d69d8=_0x1e608f;_0x381a61=_0x381a61[_0x3d69d8(0xb11)]()[_0x3d69d8(0x2a9)]();const _0x40ab6a=VisuMZ['BattleCore'][_0x3d69d8(0x4eb)],_0x456635=this[_0x3d69d8(0xa0b)]()['note']||'';if(_0x456635[_0x3d69d8(0x97b)](_0x40ab6a[_0x3d69d8(0xc85)]))return!![];if(_0x381a61==='HP'&&_0x456635[_0x3d69d8(0x97b)](_0x40ab6a[_0x3d69d8(0xcd5)])){if(_0x3d69d8(0x736)===_0x3d69d8(0x5dc))this['createHpGaugeSprite']();else return!![];}if(_0x381a61==='MP'&&_0x456635[_0x3d69d8(0x97b)](_0x40ab6a['cancelMpLifeSteal'])){if('TBnvN'===_0x3d69d8(0x4ed)){if(!_0x11ca1c[_0x3d69d8(0xce2)]['Settings'][_0x3d69d8(0x409)][_0x3d69d8(0xa03)])return;_0x5e8fbf[_0x3d69d8(0xce2)][_0x3d69d8(0x20f)][_0x3d69d8(0x2d7)](this,_0x585721);}else return!![];}return![];},Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x46e)]=function(_0x54757b){const _0x44e4db=_0x1e608f,_0x3d79f0=VisuMZ['BattleCore'][_0x44e4db(0x4eb)],_0x2418d9=this[_0x44e4db(0xa0b)]()[_0x44e4db(0xb2d)]||'';_0x54757b=_0x54757b[_0x44e4db(0xb11)]()['trim']();const _0x5ade38=_0x2418d9[_0x44e4db(0x97b)](_0x3d79f0['lifeSteaItem']);if(_0x5ade38)for(const _0x551ebe of _0x5ade38){_0x551ebe[_0x44e4db(0x97b)](_0x3d79f0[_0x44e4db(0xaaf)]);const _0x43cacb=String(RegExp['$1'])[_0x44e4db(0xb11)]()[_0x44e4db(0x2a9)](),_0x809bbb=Number(RegExp['$2'])*0.01;if(_0x43cacb!==_0x54757b)continue;return _0x809bbb;}return 0x0;},Game_BattlerBase['prototype'][_0x1e608f(0x386)]=function(_0x2d98a4,_0x55afaf){const _0x1abdcb=_0x1e608f,_0x13788=VisuMZ[_0x1abdcb(0xce2)][_0x1abdcb(0x4eb)];let _0x247db1=0x0;_0x2d98a4=_0x2d98a4[_0x1abdcb(0xb11)]()[_0x1abdcb(0x2a9)]();for(const _0x16b93c of this[_0x1abdcb(0x6ab)]()){if(_0x1abdcb(0x97a)!==_0x1abdcb(0x97a))this['addEscapeCommand']();else{if(!_0x16b93c)continue;const _0x4e81b5=_0x16b93c['note']||'',_0x4e7458=_0x4e81b5['match'](_0x13788[_0x1abdcb(0x211)]);if(_0x4e7458)for(const _0x15ca32 of _0x4e7458){_0x15ca32[_0x1abdcb(0x97b)](_0x13788[_0x1abdcb(0x211)]);const _0x378e13=String(RegExp['$1'])[_0x1abdcb(0xb11)]()['trim'](),_0x4b9caf=String(RegExp['$2']),_0x2ee9db=Number(RegExp['$3'])*0.01;if(_0x378e13!==_0x2d98a4)continue;if(_0x55afaf===Game_Action['HITTYPE_CERTAIN']&&_0x4b9caf[_0x1abdcb(0x97b)](/CERTAIN/i))_0x247db1+=_0x2ee9db;else{if(_0x55afaf===Game_Action['HITTYPE_PHYSICAL']&&_0x4b9caf[_0x1abdcb(0x97b)](/PHYS/i))_0x247db1+=_0x2ee9db;else _0x55afaf===Game_Action['HITTYPE_MAGICAL']&&_0x4b9caf[_0x1abdcb(0x97b)](/MAGIC/i)&&(_0x247db1+=_0x2ee9db);}}}}return _0x247db1;},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x762)]=function(_0x2b85d8){const _0x4f318b=_0x1e608f;_0x2b85d8=_0x2b85d8[_0x4f318b(0xb11)]()['trim']();const _0x2aa89d=VisuMZ[_0x4f318b(0xce2)][_0x4f318b(0x4eb)];for(const _0x131776 of this[_0x4f318b(0x6ab)]()){if(_0x4f318b(0x459)===_0x4f318b(0x459)){if(!_0x131776)continue;const _0x3522a2=_0x131776[_0x4f318b(0xb2d)]||'';if(_0x3522a2[_0x4f318b(0x97b)](_0x2aa89d[_0x4f318b(0xd7d)])){if(_0x4f318b(0xb78)===_0x4f318b(0x96a))_0x54fda0[_0x4f318b(0xce2)][_0x4f318b(0xc94)]&&_0x55c257['BattleCore'][_0x4f318b(0xc94)][_0x4f318b(0x2d7)](this,_0x29c3e1),_0x1e7ff8[_0x4f318b(0xce2)]['Parse_Notetags_TraitObjects'](_0x250a8b);else return!![];}if(_0x2b85d8==='HP'&&_0x3522a2[_0x4f318b(0x97b)](_0x2aa89d[_0x4f318b(0x54f)]))return _0x4f318b(0x3d4)===_0x4f318b(0xbbc)?(_0x47e3b3[_0x4f318b(0x327)][_0x4f318b(0x4b1)][_0x4f318b(0x557)](_0x2bb4f9[0x0],_0x174d64[0x1]),!![]):!![];if(_0x2b85d8==='MP'&&_0x3522a2[_0x4f318b(0x97b)](_0x2aa89d[_0x4f318b(0x9cb)]))return!![];}else this[_0x4f318b(0x5f5)](_0x5aeced[_0x4f318b(0xb2d)]);}return![];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x996)]=function(_0x8f1729){const _0x444fcd=_0x1e608f;_0x8f1729=_0x8f1729[_0x444fcd(0xb11)]()[_0x444fcd(0x2a9)]();const _0x22e4d7=VisuMZ['BattleCore'][_0x444fcd(0x4eb)];for(const _0x2378b3 of this[_0x444fcd(0x6ab)]()){if('xbTmJ'===_0x444fcd(0xc7d)){const _0x71e87a=this[_0x444fcd(0x96e)];this[_0x444fcd(0xabb)]=this[_0x444fcd(0xabb)]*(_0x71e87a-0x1)/_0x71e87a,this[_0x444fcd(0x96e)]--,this[_0x444fcd(0x96e)]<=0x0&&(this[_0x444fcd(0xabb)]=0x0);}else{if(!_0x2378b3)continue;const _0x23cea2=_0x2378b3[_0x444fcd(0xb2d)]||'';if(_0x23cea2[_0x444fcd(0x97b)](_0x22e4d7[_0x444fcd(0x3ec)])){if(_0x444fcd(0xaff)==='uWedS'){if(this[_0x444fcd(0x6ad)]===_0x444fcd(0x3a0))return![];if(this[_0x444fcd(0x6ad)]===_0x444fcd(0x18c))return!![];return this[_0x444fcd(0x5a9)]()&&!this[_0x444fcd(0x302)]()?this['isForOpponentBattleCore']():_0x36026d['BattleCore'][_0x444fcd(0xc0e)][_0x444fcd(0x2d7)](this);}else return!![];}if(_0x8f1729==='HP'&&_0x23cea2['match'](_0x22e4d7['negativeHpLifeSteal']))return!![];if(_0x8f1729==='MP'&&_0x23cea2[_0x444fcd(0x97b)](_0x22e4d7[_0x444fcd(0x9b6)]))return!![];}}return![];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x125)]=function(_0x492710){const _0x201d07=_0x1e608f;_0x492710=_0x492710['toUpperCase']()[_0x201d07(0x2a9)]();const _0x4c3771=VisuMZ['BattleCore'][_0x201d07(0x4eb)];for(const _0x390bbe of this['traitObjects']()){if(_0x201d07(0x2dc)!==_0x201d07(0x2dc)){if(_0x65dbfb[_0x201d07(0x85d)]())this['preparePartyRefresh'](),this['_requestRefresh']=![],_0x5ed558[_0x201d07(0x82f)]();else this[_0x201d07(0x7ae)]&&(this[_0x201d07(0x7ae)]=![],this[_0x201d07(0xd5d)](),this[_0x201d07(0x8d2)]());}else{if(!_0x390bbe)continue;const _0x7cd015=_0x390bbe['note']||'';if(_0x7cd015[_0x201d07(0x97b)](_0x4c3771['guardLifeSteal'])){if('PtwKT'!==_0x201d07(0x223)){const _0x5360da=this[_0x201d07(0x8f6)][_0x201d07(0x42e)]();this[_0x201d07(0x34b)]=new _0x8c57ce(_0x5360da[_0x201d07(0x78f)],_0x5360da[_0x201d07(0x96b)]),this[_0x201d07(0xc27)][_0x201d07(0x34b)]=new _0x229446(0x1,0x1);}else return!![];}if(_0x492710==='HP'&&_0x7cd015[_0x201d07(0x97b)](_0x4c3771[_0x201d07(0x5fb)])){if(_0x201d07(0x6b8)!==_0x201d07(0x200))return!![];else this[_0x201d07(0x74f)]='',this[_0x201d07(0x532)]()&&this[_0x201d07(0x532)]()[_0x201d07(0xb2d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=_0x4ebe0b(_0x5d4276['$1']));}if(_0x492710==='MP'&&_0x7cd015[_0x201d07(0x97b)](_0x4c3771[_0x201d07(0x2c0)])){if(_0x201d07(0x925)===_0x201d07(0x871)){const _0x45f8aa=this[_0x201d07(0x645)](_0x201d07(0x86c),_0x56f265['stypeId']);this[_0x201d07(0x184)](_0x45f8aa||0x0);}else return!![];}}}return![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x39c)]=Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x5a7)],Game_BattlerBase['prototype'][_0x1e608f(0x5a7)]=function(){const _0x138426=_0x1e608f;VisuMZ[_0x138426(0xce2)][_0x138426(0x39c)][_0x138426(0x2d7)](this),this[_0x138426(0x4ff)]();},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x4ff)]=function(){this['_immortal']=![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb2e)]=Game_BattlerBase[_0x1e608f(0xbe1)]['refresh'],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xd5d)]=function(){const _0x31c7df=_0x1e608f;this[_0x31c7df(0xa80)]={},VisuMZ[_0x31c7df(0xce2)][_0x31c7df(0xb2e)][_0x31c7df(0x2d7)](this);},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x629)]=function(_0x41b1d5){const _0x57fced=_0x1e608f;return this[_0x57fced(0xa80)]=this[_0x57fced(0xa80)]||{},this[_0x57fced(0xa80)][_0x41b1d5]!==undefined;},Game_BattlerBase[_0x1e608f(0xbe1)]['hardDamageCap']=function(){const _0x20ee8f=_0x1e608f;if(this[_0x20ee8f(0xa80)]['hardDamageCap']!==undefined)return this[_0x20ee8f(0xa80)][_0x20ee8f(0x579)];const _0x4974b7=/<DAMAGE CAP:[ ](\d+)>/i,_0xf67a6d=this[_0x20ee8f(0x6ab)]()[_0x20ee8f(0x725)](_0x23b24d=>_0x23b24d&&_0x23b24d[_0x20ee8f(0xb2d)][_0x20ee8f(0x97b)](_0x4974b7)?Number(RegExp['$1']):0x0);let _0x432b3c=_0xf67a6d['length']>0x0?Math['max'](..._0xf67a6d):0x0;if(_0x432b3c<=0x0)_0x432b3c=VisuMZ[_0x20ee8f(0xce2)][_0x20ee8f(0x4a9)][_0x20ee8f(0x2db)][_0x20ee8f(0x672)];return this[_0x20ee8f(0xa80)][_0x20ee8f(0x579)]=_0x432b3c,this['_cache'][_0x20ee8f(0x579)];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xc64)]=function(){const _0x26f35e=_0x1e608f;if(this[_0x26f35e(0xa80)]['softDamageCap']!==undefined)return this[_0x26f35e(0xa80)]['softDamageCap'];let _0x53b1aa=VisuMZ['BattleCore'][_0x26f35e(0x4a9)][_0x26f35e(0x2db)][_0x26f35e(0xa89)];const _0x3a760f=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x12c190=this[_0x26f35e(0x6ab)]()['map'](_0x5052d1=>_0x5052d1&&_0x5052d1[_0x26f35e(0xb2d)][_0x26f35e(0x97b)](_0x3a760f)?Number(RegExp['$1'])/0x64:0x0);return _0x53b1aa=_0x12c190[_0x26f35e(0x6a6)]((_0x3941c8,_0x3a3f54)=>_0x3941c8+_0x3a3f54,_0x53b1aa),this['_cache'][_0x26f35e(0x43d)]=_0x53b1aa,this[_0x26f35e(0xa80)][_0x26f35e(0x43d)][_0x26f35e(0xb1d)](0.01,0x1);},VisuMZ['BattleCore'][_0x1e608f(0xd79)]=Game_BattlerBase['prototype'][_0x1e608f(0x4ea)],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x4ea)]=function(){const _0x161873=_0x1e608f;VisuMZ[_0x161873(0xce2)][_0x161873(0xd79)]['call'](this),SceneManager[_0x161873(0x5f2)]()&&this['requestMotion'](_0x161873(0x2bf));},Game_BattlerBase[_0x1e608f(0xbe1)]['battler']=function(){const _0x24a566=_0x1e608f;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x24a566(0x327)][_0x24a566(0x4b1)])return null;return SceneManager[_0x24a566(0x327)][_0x24a566(0x4b1)]['findTargetSprite'](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x563bff=_0x1e608f;return VisuMZ[_0x563bff(0xce2)]['Settings'][_0x563bff(0xa6a)]['AnchorX'];},Game_BattlerBase['prototype']['svBattlerAnchorY']=function(){const _0xf4d77c=_0x1e608f;return VisuMZ[_0xf4d77c(0xce2)][_0xf4d77c(0x4a9)]['Actor']['AnchorY'];},Game_BattlerBase['prototype'][_0x1e608f(0xa0c)]=function(){const _0x141294=_0x1e608f;if(this[_0x141294(0x28c)]&&this[_0x141294(0x28c)]()){if(_0x141294(0x390)!==_0x141294(0x390)){this[_0x141294(0x64b)]=null,_0xcc09aa[_0x141294(0xce2)][_0x141294(0x1ec)]['call'](this,_0x355c96);if(_0x37c17d[_0x141294(0x73d)]){if(_0x1fe3a7['AggroControlSystem'][_0x141294(0x37f)]<1.12){let _0x5de182='';_0x5de182+=_0x141294(0x140),_0x5de182+=_0x141294(0x658),_0x5de182+=_0x141294(0x90d),_0x5ebaf6(_0x5de182),_0x208f37[_0x141294(0x3ea)]();}}}else return VisuMZ['BattleCore'][_0x141294(0x4a9)][_0x141294(0xa6a)][_0x141294(0x438)];}else{if('uNEyY'===_0x141294(0x6a5))this[_0x141294(0x565)]=(this[_0x141294(0x565)]*(_0x55a007-0x1)+this[_0x141294(0x455)])/_0x4e8c35,this[_0x141294(0x37b)]=(this[_0x141294(0x37b)]*(_0x1ecb03-0x1)+this[_0x141294(0x1e0)])/_0x4ae214;else return VisuMZ[_0x141294(0xce2)]['Settings']['Enemy'][_0x141294(0x438)];}},Game_BattlerBase['prototype'][_0x1e608f(0x4f8)]=function(){return!![];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xc29)]=function(){return 0x0;},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x7c9)]=function(){return 0x0;},Game_BattlerBase[_0x1e608f(0xbe1)]['createBattleUIOffsetX']=function(_0x485762){const _0x7f00f=_0x1e608f;if(!_0x485762)return 0x0;let _0x2807d1=0x0;const _0x31e9f7=_0x485762[_0x7f00f(0xb2d)];return _0x31e9f7[_0x7f00f(0x97b)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x2807d1+=Number(RegExp['$1'])),_0x31e9f7['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x2807d1+=Number(RegExp['$1'])),_0x2807d1;},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x5c2)]=function(_0x55a0c2){const _0x2dab6d=_0x1e608f;if(!_0x55a0c2)return 0x0;let _0x7de9f3=0x0;const _0x460ae5=_0x55a0c2['note'];if(_0x460ae5[_0x2dab6d(0x97b)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x2dab6d(0x489)!==_0x2dab6d(0x489))return this[_0x2dab6d(0x881)]();else _0x7de9f3+=Number(RegExp['$1']);}if(_0x460ae5[_0x2dab6d(0x97b)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('GqdPO'===_0x2dab6d(0x7db))_0x7de9f3+=Number(RegExp['$2']);else return!![];}return _0x7de9f3;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x628)]=Game_BattlerBase['prototype'][_0x1e608f(0x72d)],Game_BattlerBase['prototype']['isStateResist']=function(_0x3c46ef){const _0x40bd1a=_0x1e608f;if(_0x3c46ef===this[_0x40bd1a(0x56e)]()&&this[_0x40bd1a(0x60f)]())return!![];return VisuMZ['BattleCore'][_0x40bd1a(0x628)]['call'](this,_0x3c46ef);},Game_BattlerBase['prototype']['isImmortal']=function(){const _0x1317bb=_0x1e608f;return this[_0x1317bb(0x447)];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x165)]=function(_0x5216c8){const _0x3faf12=_0x1e608f;if(_0x5216c8)this[_0x3faf12(0xb24)]();else{if(_0x3faf12(0x69a)!==_0x3faf12(0x69a)){if(!_0x341fc4[_0x3faf12(0x5f2)]())return;if(!_0x20c513[_0x3faf12(0x8fd)])return;_0x20762c['ConvertParams'](_0x252da1,_0x51c5c3),_0x25fcf1[_0x3faf12(0xce2)][_0x3faf12(0x549)]();const _0x18616c=_0x29634c[_0x3faf12(0x68b)](),_0x20644a=_0x2ea7b3[_0x3faf12(0x5ea)];if(!_0x18616c)return;const _0x4ed69b=_0x3a7360[_0x3faf12(0x4b1)];if(!_0x4ed69b)return;_0x4ed69b['createActionSequenceProjectile'](_0x136ebe);if(_0x20644a)_0x18616c['setWaitMode'](_0x3faf12(0xc99));}else this[_0x3faf12(0xa31)]();}},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xb24)]=function(){const _0x365afa=_0x1e608f;if(this[_0x365afa(0xbdc)]())return;this[_0x365afa(0x447)]=!![],this[_0x365afa(0xc1f)]=![];},Game_BattlerBase['prototype'][_0x1e608f(0xa31)]=function(){const _0x455779=_0x1e608f,_0x4a522e=this[_0x455779(0x205)]();this[_0x455779(0x447)]=![],_0x4a522e&&this[_0x455779(0xc1f)]&&this['die'](),this[_0x455779(0xc1f)]=![],this[_0x455779(0xd5d)](),this[_0x455779(0xbdc)]()&&_0x4a522e&&(_0x455779(0xc28)!==_0x455779(0xc28)?(this[_0x455779(0xb79)](_0x455779(0x7e7)),this[_0x455779(0x462)](_0x263d04),this[_0x455779(0x866)](_0x4b0f81),this[_0x455779(0xb79)]('waitForNewLine')):(this[_0x455779(0x73a)](),this[_0x455779(0xc75)]()));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb59)]=Game_Action['prototype'][_0x1e608f(0x51d)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x51d)]=function(){const _0x2ff49b=_0x1e608f;if(this[_0x2ff49b(0xa0b)]())return VisuMZ[_0x2ff49b(0xce2)]['Game_Action_numRepeats'][_0x2ff49b(0x2d7)](this);else{if('WAlpm'===_0x2ff49b(0xad8))_0x58aaaa=_0x16534f;else return 0x0;}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa1c)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0xa62)],Game_Action['prototype'][_0x1e608f(0xa62)]=function(){const _0x31309f=_0x1e608f;this[_0x31309f(0x8b4)]()&&this['subject']()[_0x31309f(0xa90)]()?VisuMZ[_0x31309f(0xce2)][_0x31309f(0xa1c)][_0x31309f(0x2d7)](this):'afRHH'!=='afRHH'?_0x190154[_0x31309f(0xce2)][_0x31309f(0x426)][_0x31309f(0x2d7)](this):this[_0x31309f(0x639)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3d2)]=Game_BattlerBase[_0x1e608f(0xbe1)]['canAttack'],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0xa90)]=function(){const _0x7860cc=_0x1e608f;if(!this[_0x7860cc(0x49e)]())return![];return VisuMZ[_0x7860cc(0xce2)]['Game_BattlerBase_canAttack'][_0x7860cc(0x2d7)](this);},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x49e)]=function(){const _0x12d6e3=_0x1e608f;for(const _0x582f30 of this['traitObjects']()){if(_0x12d6e3(0xafa)===_0x12d6e3(0xafa)){if(!_0x582f30)continue;if(_0x582f30[_0x12d6e3(0xb2d)][_0x12d6e3(0x97b)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}else _0x3f2397+=(_0x13aaaa[_0x12d6e3(0xbab)]()?-0x1:0x1)*_0x54e1bd[_0x12d6e3(0xcc4)]()/0x2;}return!![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x2cd)]=Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9a9)],Game_Action[_0x1e608f(0xbe1)][_0x1e608f(0x9a9)]=function(){const _0x2518ba=_0x1e608f;this[_0x2518ba(0x8b4)]()[_0x2518ba(0x34a)]()&&VisuMZ[_0x2518ba(0xce2)]['Game_Action_setGuard'][_0x2518ba(0x2d7)](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase['prototype'][_0x1e608f(0x34a)],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x34a)]=function(){const _0x4b228e=_0x1e608f;if(!this[_0x4b228e(0x93c)]())return![];return VisuMZ[_0x4b228e(0xce2)][_0x4b228e(0x6f5)][_0x4b228e(0x2d7)](this);},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x93c)]=function(){const _0x435061=_0x1e608f;for(const _0x3f6173 of this[_0x435061(0x6ab)]()){if(!_0x3f6173)continue;if(_0x3f6173['note'][_0x435061(0x97b)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x300)]=function(){const _0x16435a=_0x1e608f;for(const _0x59ccec of this[_0x16435a(0x6ab)]()){if('KmXDS'!=='KmXDS')return _0xd80460[_0x16435a(0xce2)]['Game_Action_numRepeats'][_0x16435a(0x2d7)](this);else{if(!_0x59ccec)continue;if(_0x59ccec[_0x16435a(0xb2d)][_0x16435a(0x97b)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1b4)]=Game_BattlerBase[_0x1e608f(0xbe1)]['meetsUsableItemConditions'],Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x3d9)]=function(_0x5ce145){const _0xa2abdb=_0x1e608f;if(_0x5ce145&&_0x5ce145['note'][_0xa2abdb(0x97b)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x26379e=this[_0xa2abdb(0x406)]()[_0xa2abdb(0x588)]();if(_0x26379e[_0xa2abdb(0xcaf)]===0x1&&_0x26379e[0x0]===this)return![];}return VisuMZ[_0xa2abdb(0xce2)]['Game_BattlerBase_meetsUsableItemConditions'][_0xa2abdb(0x2d7)](this,_0x5ce145);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x778)]=function(){const _0x40c532=_0x1e608f;return VisuMZ[_0x40c532(0xce2)][_0x40c532(0x4a9)][_0x40c532(0x3c9)][_0x40c532(0x69c)];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x433)]=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x56d)],Game_Battler[_0x1e608f(0xbe1)]['regenerateAll']=function(){const _0x45ad74=_0x1e608f;if(SceneManager[_0x45ad74(0x5f2)]()){if(BattleManager[_0x45ad74(0x643)]()){if(_0x45ad74(0xc62)===_0x45ad74(0xc62)){if(this[_0x45ad74(0xc0f)]()<=0x0)return;}else{if(!_0x47ad4d)return![];return _0x10857a['friendsUnit']()===this[_0x45ad74(0x406)]();}}else{if($gameTroop[_0x45ad74(0xc0f)]()<=0x0){if(_0x45ad74(0xc6f)!==_0x45ad74(0xc6f))this[_0x45ad74(0xc27)][_0x45ad74(0x34b)]=_0x120043,this['bitmap']=new _0x2b3033(_0x302919[_0x45ad74(0x78f)],_0x3b32dc['height']);else return;}}}if(SceneManager[_0x45ad74(0x5f2)]()&&BattleManager[_0x45ad74(0x643)]()&&this[_0x45ad74(0xc9a)]===Graphics['frameCount'])return;this[_0x45ad74(0xc9a)]=Graphics[_0x45ad74(0xd01)],SceneManager[_0x45ad74(0x5f2)]()&&this[_0x45ad74(0x344)](_0x45ad74(0x5a1)),VisuMZ['BattleCore'][_0x45ad74(0x433)][_0x45ad74(0x2d7)](this),SceneManager[_0x45ad74(0x5f2)]()&&(this[_0x45ad74(0xd17)](),this[_0x45ad74(0x344)](_0x45ad74(0x801)));},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xd17)]=function(){const _0x41a372=_0x1e608f;if(SceneManager['isSceneBattle']()){if(_0x41a372(0x26c)===_0x41a372(0x6ee))_0x248729['_spriteset'][_0x41a372(0x7ee)]();else for(const _0x4f716d of this['traitObjects']()){if(!_0x4f716d)continue;this['onRegeneratePlayStateAnimation'](_0x4f716d);}}},Game_Battler[_0x1e608f(0xbe1)]['onRegeneratePlayStateAnimation']=function(_0x5a0d01){const _0x4532d2=_0x1e608f;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x4532d2(0x5f2)]())return;if(this[_0x4532d2(0xbdc)]())return;if(this[_0x4532d2(0xb69)]())return;if(_0x5a0d01['note']['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x289993=Number(RegExp['$1']);$gameTemp[_0x4532d2(0x161)]([this],_0x289993,![],![]);}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x382)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x382)]=function(){const _0x3d7452=_0x1e608f;this[_0x3d7452(0x344)](_0x3d7452(0x26f)),VisuMZ['BattleCore']['Game_Battler_startTpbTurn'][_0x3d7452(0x2d7)](this),this[_0x3d7452(0x344)](_0x3d7452(0x154));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x44f)]=Game_Battler[_0x1e608f(0xbe1)]['onTurnEnd'],Game_Battler['prototype'][_0x1e608f(0x40b)]=function(){const _0x3535dc=_0x1e608f;this['processBattleCoreJS'](_0x3535dc(0x2e2)),VisuMZ[_0x3535dc(0xce2)][_0x3535dc(0x44f)][_0x3535dc(0x2d7)](this),VisuMZ[_0x3535dc(0xce2)][_0x3535dc(0x4a9)]['Mechanics'][_0x3535dc(0x63e)]&&(_0x3535dc(0x90b)===_0x3535dc(0x90b)?this[_0x3535dc(0xcc2)]():this[_0x3535dc(0x6c9)]('sleep')),this[_0x3535dc(0x344)](_0x3535dc(0x909));},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x344)]=function(_0x17f208){const _0x3866ed=_0x1e608f;if(this[_0x3866ed(0x2a7)]||this[_0x3866ed(0x959)])return;const _0x3291f2=VisuMZ[_0x3866ed(0xce2)][_0x3866ed(0x4a9)][_0x3866ed(0x3c9)];if(_0x3291f2[_0x17f208])_0x3291f2[_0x17f208][_0x3866ed(0x2d7)](this);for(const _0x439572 of this['traitObjects']()){if(!_0x439572)continue;key=VisuMZ[_0x3866ed(0xce2)][_0x3866ed(0x1eb)](_0x439572,_0x17f208),VisuMZ['BattleCore']['JS'][key]&&(_0x3866ed(0x22d)!==_0x3866ed(0xd1f)?VisuMZ['BattleCore']['JS'][key][_0x3866ed(0x2d7)](this,this,this,_0x439572,0x0):_0x43c46e[_0x3866ed(0x5f2)]()?this['requestBattleBalloon'](_0x1066a2,_0x494dda):_0x3810c3[_0x3866ed(0xce2)][_0x3866ed(0x4a5)][_0x3866ed(0x2d7)](this,_0x25bbb3,_0x168575));}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xabc)]=function(){const _0x20cca5=_0x1e608f;return VisuMZ[_0x20cca5(0xce2)][_0x20cca5(0x4a9)][_0x20cca5(0xa6a)][_0x20cca5(0x670)]||![];},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xcd3)]=function(){const _0x194443=_0x1e608f;if(this[_0x194443(0x845)]()){if(_0x194443(0x739)!==_0x194443(0x739))return this[_0x194443(0x35d)]>0x0;else{if(this[_0x194443(0xabc)]()){if(_0x194443(0xa2b)!==_0x194443(0xa2b))this[_0x194443(0x8e8)][_0x194443(0x9a5)](this[_0x194443(0x113)]);else{if(this[_0x194443(0x49d)]['some'](_0x410638=>_0x410638[_0x194443(0xa0b)]()&&_0x410638[_0x194443(0x854)]())){if(_0x194443(0x1c3)===_0x194443(0x822)){const _0x50f151=_0x3c9ffc[_0x194443(0xa0b)]();this[_0x194443(0xa22)](_0x19d66a,_0x50f151),this[_0x194443(0xb79)](_0x194443(0x4c9),_0x1eacba,_0x3c3b98,!![]),this['push'](_0x194443(0x834),_0x99087f,_0x8084c2),this[_0x194443(0xb79)](_0x194443(0x83e)),this[_0x194443(0xb79)](_0x194443(0x91c),_0x450e29,_0x2cd32f),this[_0x194443(0xb79)](_0x194443(0xce4));}else return!![];}}}else{if(this[_0x194443(0x49d)][_0x194443(0x93a)](_0x2c1267=>_0x2c1267[_0x194443(0xa0b)]()&&_0x2c1267['isMagicSkill']()))return!![];}}}if(BattleManager[_0x194443(0x643)]()&&this[_0x194443(0x92c)]===_0x194443(0xd36)){if(this[_0x194443(0xabc)]()){if(_0x194443(0x5ce)===_0x194443(0x5ce))return this['currentAction']()&&this[_0x194443(0x509)]()[_0x194443(0xa0b)]()&&this['currentAction']()[_0x194443(0x854)]();else _0xd9ae61+=_0x527ede[_0x194443(0x28c)]()?-_0x340035:_0x2c1d2a,_0x2a0e3e+=_0x7c3522[_0x194443(0x28c)]()?-_0x32855b:_0x450982;}else return this['currentAction']()&&this[_0x194443(0x509)]()[_0x194443(0xa0b)]()&&this[_0x194443(0x509)]()[_0x194443(0xd04)]();}return![];},Game_Battler['prototype'][_0x1e608f(0x135)]=function(){const _0x23eac5=_0x1e608f;if(BattleManager[_0x23eac5(0x643)]()&&this[_0x23eac5(0x92c)]===_0x23eac5(0xd36))return this[_0x23eac5(0xabc)]()?this[_0x23eac5(0x509)]()&&this[_0x23eac5(0x509)]()[_0x23eac5(0xa0b)]()&&!this[_0x23eac5(0x509)]()[_0x23eac5(0x854)]():this[_0x23eac5(0x509)]()&&this[_0x23eac5(0x509)]()[_0x23eac5(0xa0b)]()&&!this[_0x23eac5(0x509)]()[_0x23eac5(0xd04)]();return![];},VisuMZ[_0x1e608f(0xce2)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x258)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x258)]=function(){const _0xeeed21=_0x1e608f;VisuMZ[_0xeeed21(0xce2)][_0xeeed21(0xd72)][_0xeeed21(0x2d7)](this),this[_0xeeed21(0xb0a)]=[];},Game_Battler[_0x1e608f(0xbe1)]['isDamagePopupRequested']=function(){const _0x1206ca=_0x1e608f;if(!this[_0x1206ca(0xb0a)])this[_0x1206ca(0x258)]();return this['_damagePopupArray'][_0x1206ca(0xcaf)]>0x0;},Game_Battler[_0x1e608f(0xbe1)]['startDamagePopup']=function(){const _0xb08b68=_0x1e608f;if(!SceneManager[_0xb08b68(0x5f2)]())return;if(BattleManager[_0xb08b68(0x12d)]())return;if(!this[_0xb08b68(0xb0a)])this[_0xb08b68(0x258)]();this[_0xb08b68(0xcea)]();const _0x253dca=this[_0xb08b68(0x8dd)]();if(_0x253dca)_0x253dca[_0xb08b68(0xcec)]();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xcea)]=function(){const _0x3de719=_0x1e608f,_0x430307=this[_0x3de719(0x5b2)]();if(_0x430307[_0x3de719(0xa7e)]||_0x430307['evaded']){const _0xf27df5=JsonEx['makeDeepCopy'](_0x430307);_0xf27df5['hpAffected']=![],_0xf27df5[_0x3de719(0x6c2)]=0x0,this[_0x3de719(0xb0a)][_0x3de719(0xb79)](_0xf27df5);}if(_0x430307['hpAffected']){const _0x5b15be=JsonEx[_0x3de719(0x346)](_0x430307);_0x5b15be[_0x3de719(0xa7e)]=![],_0x5b15be[_0x3de719(0x3c8)]=![],_0x5b15be[_0x3de719(0x6c2)]=0x0,this['_damagePopupArray'][_0x3de719(0xb79)](_0x5b15be);}if(_0x430307[_0x3de719(0x6c2)]!==0x0){const _0xad7f8b=JsonEx['makeDeepCopy'](_0x430307);_0xad7f8b[_0x3de719(0xa7e)]=![],_0xad7f8b[_0x3de719(0x3c8)]=![],_0xad7f8b[_0x3de719(0x824)]=![],this[_0x3de719(0xb0a)]['push'](_0xad7f8b);}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x1f0)]=function(){const _0x547b24=_0x1e608f;if(!this[_0x547b24(0xb0a)])this['clearDamagePopup']();return VisuMZ['BattleCore'][_0x547b24(0x4a9)][_0x547b24(0x2db)]['NewPopupBottom']?this[_0x547b24(0xb0a)][_0x547b24(0x97d)]():this[_0x547b24(0xb0a)][_0x547b24(0xcfe)]();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x2ca)]=function(_0x3a45be,_0x40841b){const _0x3f6644=_0x1e608f;if(!SceneManager[_0x3f6644(0x5f2)]())return;if(BattleManager[_0x3f6644(0x12d)]())return;if(!this[_0x3f6644(0x8dd)]())return;if(_0x3a45be[_0x3f6644(0xcaf)]<=0x0)return;_0x40841b=_0x40841b||{},_0x40841b[_0x3f6644(0x500)]=_0x40841b[_0x3f6644(0x500)]||_0x3f6644(0x939),_0x40841b[_0x3f6644(0xaa6)]=_0x40841b['flashColor']||[0x0,0x0,0x0,0x0],_0x40841b[_0x3f6644(0x464)]=_0x40841b[_0x3f6644(0x464)]||0x0,this['battler']()[_0x3f6644(0x2ca)](_0x3a45be,_0x40841b);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x8ca)]=function(_0x1ba34d,_0x21a40d,_0x2a3387){const _0x353756=_0x1e608f;if(!SceneManager[_0x353756(0x5f2)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x21a40d[_0x353756(0xcaf)]<=0x0)return;_0x2a3387=_0x2a3387||{},_0x2a3387[_0x353756(0x500)]=_0x2a3387[_0x353756(0x500)]||_0x353756(0x939),_0x2a3387[_0x353756(0xaa6)]=_0x2a3387[_0x353756(0xaa6)]||[0x0,0x0,0x0,0x0],_0x2a3387[_0x353756(0x464)]=_0x2a3387[_0x353756(0x464)]||0x0,this[_0x353756(0x8dd)]()[_0x353756(0x8ca)](_0x1ba34d,_0x21a40d,_0x2a3387);},Game_Battler[_0x1e608f(0xbe1)]['notFocusValid']=function(){const _0xfc39b6=_0x1e608f;if(this[_0xfc39b6(0xb69)]())return![];if(this[_0xfc39b6(0x205)]()&&this['isAppeared']())return!![];if(this['isEnemy']()&&this[_0xfc39b6(0x7dd)]()){if(this[_0xfc39b6(0xbdc)]()&&this[_0xfc39b6(0x1a0)]())return![];}else{if(this[_0xfc39b6(0xbdc)]())return![];}return!![];},VisuMZ['BattleCore'][_0x1e608f(0x3b3)]=Game_Battler['prototype'][_0x1e608f(0xa63)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xa63)]=function(){const _0x136e76=_0x1e608f;VisuMZ[_0x136e76(0xce2)][_0x136e76(0x3b3)][_0x136e76(0x2d7)](this),this['clearFreezeMotion']();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc38)]=function(){return!![];},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x566)]=function(){return![];},VisuMZ[_0x1e608f(0xce2)]['Game_Battler_onBattleStart']=Game_Battler[_0x1e608f(0xbe1)]['onBattleStart'],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x9a2)]=function(_0x4818fa){const _0x161bab=_0x1e608f;VisuMZ[_0x161bab(0xce2)][_0x161bab(0x342)][_0x161bab(0x2d7)](this,_0x4818fa),this['onBattleStartBattleCore'](_0x4818fa),this[_0x161bab(0x258)]();},Game_Battler[_0x1e608f(0xbe1)]['onBattleStartBattleCore']=function(_0x407d6b){const _0x17423f=_0x1e608f;this[_0x17423f(0xc33)](![]),this[_0x17423f(0x6b1)]=undefined,this[_0x17423f(0xa20)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x526)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x526)]=function(){const _0x546b93=_0x1e608f;VisuMZ[_0x546b93(0xce2)]['Game_Battler_onBattleEnd'][_0x546b93(0x2d7)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x1e608f(0xbe1)]['onBattleEndBattleCore']=function(){const _0x1192d0=_0x1e608f;this['_forcedHomeX']=undefined,this[_0x1192d0(0xa20)]=undefined;},VisuMZ[_0x1e608f(0xce2)]['Game_Battler_performActionStart']=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x834)],Game_Battler[_0x1e608f(0xbe1)]['performActionStart']=function(_0x46b9f2){const _0x464ba4=_0x1e608f;VisuMZ['BattleCore'][_0x464ba4(0xbe7)][_0x464ba4(0x2d7)](this,_0x46b9f2);if(!_0x46b9f2[_0x464ba4(0x5c7)]()){const _0x2cb515=this['battler']();_0x2cb515&&(_0x464ba4(0x14a)!=='Ratkl'?_0x2cb515[_0x464ba4(0x533)]():_0x1dbcd7=_0x18ff9b>=_0xe972b9?_0x3c171c:_0x56d17b);}this[_0x464ba4(0xc33)](![]);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x4f6)]=function(){const _0x929d14=_0x1e608f,_0x45f645=this[_0x929d14(0xb76)];this[_0x929d14(0xb76)]=![];if(BattleManager['isActiveTpb']()&&this[_0x929d14(0x886)]()){const _0x554eaf=this[_0x929d14(0x8dd)]();if(_0x554eaf&&_0x45f645)_0x554eaf[_0x929d14(0x533)]();return;}const _0x3b6be8=this[_0x929d14(0x8dd)]();if(_0x3b6be8)_0x3b6be8[_0x929d14(0x56f)]();this[_0x929d14(0xc33)](![]),this[_0x929d14(0xc75)]();},Game_Battler['prototype'][_0x1e608f(0xd0c)]=function(_0x132f9c){const _0x3bdf36=_0x1e608f;if(_0x132f9c[_0x3bdf36(0x65a)]())this['performAttack']();else{if(_0x132f9c[_0x3bdf36(0x5c7)]())this[_0x3bdf36(0x7c6)](_0x3bdf36(0x950));else{if(_0x132f9c[_0x3bdf36(0x854)]())_0x3bdf36(0x110)!==_0x3bdf36(0x51e)?this[_0x3bdf36(0x7c6)](_0x3bdf36(0x668)):(_0x4b7c99['BattleCore'][_0x3bdf36(0xd23)][_0x3bdf36(0x2d7)](this),_0x111852[_0x3bdf36(0x643)]()&&_0x443f9d[_0x3bdf36(0x71b)]&&(_0x1f5e7b[_0x3bdf36(0x71b)]=![],this[_0x3bdf36(0xae3)]()));else{if(_0x132f9c[_0x3bdf36(0x8fb)]())[0x1,0x2,0x5,0x6][_0x3bdf36(0xc3d)](_0x132f9c[_0x3bdf36(0xa0b)]()[_0x3bdf36(0x848)]['type'])?_0x3bdf36(0x8c8)!=='CQcHh'?this[_0x3bdf36(0x237)]():(_0x113162[_0x3bdf36(0xbe1)][_0x3bdf36(0x695)][_0x3bdf36(0x2d7)](this,_0x6fe8ea),this['performActionMotions'](_0x588c47)):this[_0x3bdf36(0x7c6)]('skill');else _0x132f9c[_0x3bdf36(0x989)]()&&this[_0x3bdf36(0x7c6)](_0x3bdf36(0xa0b));}}}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc93)]=function(){const _0x501108=_0x1e608f;return $dataSystem[_0x501108(0x969)][0x0];},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3db)]=function(){const _0x51a3cb=_0x1e608f,_0x358336=this[_0x51a3cb(0xc93)]();return _0x358336?_0x358336[_0x51a3cb(0x497)]:0x0;},Game_Battler[_0x1e608f(0xbe1)]['performSubstitute']=function(_0x56544e){const _0x51aeb4=_0x1e608f;if(!$gameSystem[_0x51aeb4(0x3e6)]())return;const _0x5d662a=this[_0x51aeb4(0x8dd)](),_0x1e77f4=_0x56544e[_0x51aeb4(0x8dd)]();if(!_0x5d662a||!_0x1e77f4)return;const _0x318414=_0x1e77f4['_baseX'],_0x4358c0=_0x1e77f4['_baseY'];this[_0x51aeb4(0x60d)](_0x318414,_0x4358c0,0x0,![],_0x51aeb4(0xa73),-0x1),_0x5d662a[_0x51aeb4(0x234)]();const _0x501508=VisuMZ['BattleCore'][_0x51aeb4(0x4a9)][_0x51aeb4(0x151)];let _0x3e3ac6=(_0x1e77f4['width']+_0x5d662a[_0x51aeb4(0x78f)])/0x2;_0x3e3ac6*=this[_0x51aeb4(0x28c)]()?0x1:-0x1;let _0x4e688c=_0x501508[_0x51aeb4(0xb8c)]*(this['isActor']()?0x1:-0x1);_0x56544e['moveBattlerDistance'](_0x3e3ac6,_0x4e688c,0x0,![],_0x51aeb4(0xa73)),_0x1e77f4[_0x51aeb4(0x234)]();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x7c6)]=function(_0x3b9396){const _0x147780=_0x1e608f;if(SceneManager['isSceneBattle']()){if(_0x147780(0x173)===_0x147780(0x173)){const _0xcdce64=this[_0x147780(0x8dd)]();_0xcdce64&&(_0xcdce64[_0x147780(0x8d4)](_0x3b9396),[_0x147780(0x937),_0x147780(0xa69),_0x147780(0x963)][_0x147780(0xc3d)](_0x3b9396)&&this[_0x147780(0x402)]());}else{if(!_0x5c79b0['isSceneBattle']())return;if(!_0x34139d[_0x147780(0x471)])return;_0x2ae01b['ConvertParams'](_0x3357a5,_0x319110);const _0x89a92f=_0x1aa3cc[_0x147780(0xa4d)],_0x3ba78c=_0x2617b5[_0x147780(0x9f7)];if(!_0x89a92f)return;_0x89a92f[_0x147780(0x869)]=_0x3ba78c;}}this[_0x147780(0x32a)]();},Game_Battler[_0x1e608f(0xbe1)]['performWeaponAnimation']=function(){},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x77a)]=function(_0x24fe7c){const _0x2f6c9d=_0x1e608f;if(SceneManager[_0x2f6c9d(0x5f2)]()){if(_0x2f6c9d(0x1f8)===_0x2f6c9d(0x88f))this['performCollapse'](),this[_0x2f6c9d(0xc75)]();else{const _0xc8cdb8=this[_0x2f6c9d(0x8dd)]();if(_0xc8cdb8)_0xc8cdb8[_0x2f6c9d(0xd45)](_0x24fe7c);}}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x6da)]=function(){const _0x129fae=_0x1e608f;if(SceneManager[_0x129fae(0x5f2)]()){if('tAKlW'!==_0x129fae(0x1b1))this['tpbActorSwitchConditionsMet']()?this[_0x129fae(0x7ef)]():this[_0x129fae(0x91d)]();else{const _0x1ed49f=this[_0x129fae(0x3db)]();this[_0x129fae(0x77a)](_0x1ed49f);}}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x91c)]=function(_0x7ff032,_0xb85723){const _0x4e622b=_0x1e608f;if(!_0x7ff032)return;if(!_0x7ff032[_0x4e622b(0xa0b)]())return;if(_0x7ff032[_0x4e622b(0x65a)]())return;if(_0x7ff032[_0x4e622b(0x5c7)]())return;if(_0x7ff032[_0x4e622b(0x989)]())return;if($gameTemp['_playTestFastMode'])return;let _0x54ce1a=0x0;const _0x48a478=VisuMZ['BattleCore'][_0x4e622b(0x4a9)][_0x4e622b(0x151)],_0x5e33db=_0x7ff032[_0x4e622b(0xa0b)]()['note'];if(_0x5e33db[_0x4e622b(0x97b)](/<CAST ANIMATION: (\d+)>/i)){if(_0x4e622b(0x955)===_0x4e622b(0x955))_0x54ce1a=Number(RegExp['$1']);else return this['partyCommandWindowRect']();}else{if(_0x5e33db[_0x4e622b(0x97b)](/<NO CAST ANIMATION>/i))return;else{if(_0x7ff032['isCertainHit']())_0x54ce1a=_0x48a478['CastCertain'];else{if(_0x7ff032[_0x4e622b(0x350)]())_0x54ce1a=_0x48a478[_0x4e622b(0x1bb)];else _0x7ff032[_0x4e622b(0x854)]()&&(_0x54ce1a=_0x48a478[_0x4e622b(0xcfd)]);}}}_0x54ce1a>0x0&&(_0x4e622b(0xa85)!=='vfCyq'?this[_0x4e622b(0xb24)]():$gameTemp[_0x4e622b(0x156)]([this],_0x54ce1a,!!_0xb85723));},Game_Battler['prototype'][_0x1e608f(0x5ac)]=function(){const _0x5eb6e8=_0x1e608f;SoundManager[_0x5eb6e8(0xa9f)]();let _0x47e702=VisuMZ[_0x5eb6e8(0xce2)][_0x5eb6e8(0x4a9)]['ActionSequence']['ReflectAnimation'];if(_0x47e702>0x0){if(Imported[_0x5eb6e8(0x8b3)]){if('dHecA'===_0x5eb6e8(0x19a))$gameTemp[_0x5eb6e8(0x161)]([this],_0x47e702);else{if(this['contentsOpacity']>0x0)this[_0x5eb6e8(0x2dd)]-=0x10;}}else{if(_0x5eb6e8(0xb56)===_0x5eb6e8(0x619)){if(!this[_0x5eb6e8(0x369)]())return;this[_0x5eb6e8(0xce9)]['scale']['x']=-0x1,this[_0x5eb6e8(0xce9)]['x']=this[_0x5eb6e8(0x552)]['width'],this['_uiContainer'][_0x5eb6e8(0x6e9)]['x']=-0x1,this['_uiContainer']['x']=this[_0x5eb6e8(0x552)][_0x5eb6e8(0x78f)],this[_0x5eb6e8(0x1b2)][_0x5eb6e8(0x6e9)]['x']=-0x1,this['_animationContainer']['x']=this[_0x5eb6e8(0x552)][_0x5eb6e8(0x78f)],this[_0x5eb6e8(0x67e)][_0x5eb6e8(0x6e9)]['x']=-0x1,this[_0x5eb6e8(0x67e)]['x']=this[_0x5eb6e8(0x552)]['x']+this[_0x5eb6e8(0x552)][_0x5eb6e8(0x78f)];}else $gameTemp[_0x5eb6e8(0x156)]([this],_0x47e702);}}},VisuMZ[_0x1e608f(0xce2)]['Game_Battler_performDamage']=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x864)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x864)]=function(){const _0x11578f=_0x1e608f;VisuMZ[_0x11578f(0xce2)]['Game_Battler_performDamage'][_0x11578f(0x2d7)](this),this[_0x11578f(0x5ff)](),this[_0x11578f(0x99e)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb39)]=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc6d)],Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc6d)]=function(){const _0x25b98d=_0x1e608f;VisuMZ[_0x25b98d(0xce2)][_0x25b98d(0xb39)][_0x25b98d(0x2d7)](this),this[_0x25b98d(0x5ff)]();},VisuMZ['BattleCore'][_0x1e608f(0x114)]=Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc0b)],Game_Battler['prototype'][_0x1e608f(0xc0b)]=function(){const _0x56fdad=_0x1e608f;VisuMZ[_0x56fdad(0xce2)][_0x56fdad(0x114)]['call'](this),this['performFlinch']();},Game_Battler[_0x1e608f(0xbe1)]['performFlinch']=function(){const _0x5dd833=_0x1e608f;if(!$gameSystem['isSideView']())return;if(this[_0x5dd833(0xb76)])return;this[_0x5dd833(0xb76)]=!![];const _0x2d017a=this[_0x5dd833(0x8dd)]();if(_0x2d017a)_0x2d017a[_0x5dd833(0x252)]();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x99e)]=function(){const _0x3896c2=_0x1e608f;if(!this[_0x3896c2(0xc38)]())return;const _0x19c64f=VisuMZ['BattleCore']['Settings'][_0x3896c2(0xa6a)];if(!(_0x19c64f['ShakeFlinch']??![]))return;if(this[_0x3896c2(0x73c)]<=0x0)return;const _0xae7b40=this[_0x3896c2(0x8dd)]();if(_0xae7b40){if('CAGSQ'!==_0x3896c2(0x6fb)){const _0x270895=this[_0x3896c2(0x73c)],_0x3d0d1c=(_0x270895/this[_0x3896c2(0x5a3)])[_0x3896c2(0xb1d)](0.8,0x1),_0x298a52=_0x19c64f['ShakeFlinchPower']??0x30,_0x2f82bc=_0x3d0d1c*_0x298a52;_0xae7b40[_0x3896c2(0xb10)](_0x2f82bc,_0x3d0d1c);}else{if(this['battleLayoutStyle']()===_0x3896c2(0xd11))return this['skillItemWindowRectBorderStyle']();else return this[_0x3896c2(0x281)]()?this['skillItemWindowRectMiddle']():_0x3124e7[_0x3896c2(0xce2)][_0x3896c2(0x4c6)][_0x3896c2(0x2d7)](this);}}},Game_Battler['prototype'][_0x1e608f(0xc75)]=function(){const _0x346fb0=_0x1e608f;if(this['isDead']()&&this[_0x346fb0(0x8e6)]!==_0x346fb0(0x2bf)){this[_0x346fb0(0x7c6)](_0x346fb0(0x2bf));return;}if(this[_0x346fb0(0xbdc)]()&&this['_motionType']==='dead')return;if(!!this[_0x346fb0(0xc10)])return;if(this['isEnemy']()){if(!this[_0x346fb0(0xbf1)]()&&this!==BattleManager[_0x346fb0(0x7cb)]){if(this[_0x346fb0(0x8dd)]())this[_0x346fb0(0x8dd)]()[_0x346fb0(0x36c)]();}this['clearFreezeMotion']();return;}if(this['_motionType']===_0x346fb0(0xb86))return;if(this[_0x346fb0(0x8e6)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x346fb0(0x8e6)]===_0x346fb0(0x950)&&!BattleManager['isInputting']())return;this['clearMotion']();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x346fb0(0x7cb)])return;if(this[_0x346fb0(0x8dd)]()&&BattleManager['isInputting']()){if(_0x346fb0(0x87c)===_0x346fb0(0x315)){const _0x5e425b=this[_0x346fb0(0x9c1)](_0x51d6c0),_0x45ff78=this[_0x346fb0(0x8f5)](_0x371da8),_0xd3123b=this[_0x346fb0(0xa3d)](_0x45ff78)['width'];this[_0x346fb0(0x69e)](this[_0x346fb0(0x60c)](_0x5c0931));const _0x27d8ba=this['itemTextAlign']();if(_0x27d8ba===_0x346fb0(0x2d8))this[_0x346fb0(0x53d)](_0x45ff78,_0x5e425b['x']+_0x5e425b[_0x346fb0(0x78f)]-_0xd3123b,_0x5e425b['y'],_0xd3123b);else{if(_0x27d8ba===_0x346fb0(0x624)){const _0x41e1b6=_0x5e425b['x']+_0x3494cf['floor']((_0x5e425b['width']-_0xd3123b)/0x2);this[_0x346fb0(0x53d)](_0x45ff78,_0x41e1b6,_0x5e425b['y'],_0xd3123b);}else this[_0x346fb0(0x53d)](_0x45ff78,_0x5e425b['x'],_0x5e425b['y'],_0xd3123b);}}else{this[_0x346fb0(0x8dd)]()['refreshMotion'](),this[_0x346fb0(0x32a)]();return;}}},Game_Enemy[_0x1e608f(0xbe1)]['isDuringNonLoopingMotion']=function(){const _0x11e9ea=_0x1e608f;if(!this[_0x11e9ea(0x7dd)]())return![];const _0x1dcaff=this[_0x11e9ea(0x8dd)]();if(!_0x1dcaff)return![];const _0x33163a=_0x1dcaff[_0x11e9ea(0xc7b)];if(!_0x33163a)return![];const _0x3f3079=_0x33163a[_0x11e9ea(0x4c8)];return _0x3f3079&&!_0x3f3079['loop'];},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x693)]=function(){const _0x48da5f=_0x1e608f;return this[_0x48da5f(0xae7)];},Game_Battler['prototype'][_0x1e608f(0xc33)]=function(_0x1f622b){const _0x255af3=_0x1e608f;if(!$gameSystem[_0x255af3(0x3e6)]())return;this[_0x255af3(0xae7)]=_0x1f622b;const _0x32f077=this['battler']();if(_0x32f077)_0x32f077['updateFlip']();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3c0)]=function(_0x256667,_0x16a392,_0x1f8f27){const _0x41758a=_0x1e608f;if(!$gameSystem[_0x41758a(0x3e6)]())return;const _0x53e85c=this[_0x41758a(0x8dd)]();if(!_0x53e85c)return;if(_0x256667===_0x53e85c[_0x41758a(0x8d8)])return;let _0x4b2948=![];if(this[_0x41758a(0x28c)]()){if(_0x256667>_0x53e85c['_baseX'])_0x4b2948=!![];if(_0x256667<_0x53e85c[_0x41758a(0x8d8)])_0x4b2948=![];}else{if(this['isEnemy']()){if(_0x256667>_0x53e85c[_0x41758a(0x8d8)])_0x4b2948=![];if(_0x256667<_0x53e85c[_0x41758a(0x8d8)])_0x4b2948=!![];}};this['setBattlerFlip'](_0x1f8f27?!_0x4b2948:_0x4b2948),_0x53e85c[_0x41758a(0x122)]();},Game_Battler[_0x1e608f(0xbe1)]['moveBattlerDistance']=function(_0x4248af,_0x3138b2,_0x66fa5b,_0x5ddd69,_0x1b5fde){const _0x236e8d=_0x1e608f;if(!$gameSystem[_0x236e8d(0x3e6)]())return;const _0x85f251=this[_0x236e8d(0x8dd)]();if(!_0x85f251)return;if(_0x5ddd69)this[_0x236e8d(0x3c0)](_0x4248af+_0x85f251['_baseX'],_0x3138b2+_0x85f251[_0x236e8d(0x171)],![]);_0x4248af+=_0x85f251[_0x236e8d(0x8d8)]-_0x85f251[_0x236e8d(0x565)],_0x3138b2+=_0x85f251[_0x236e8d(0x171)]-_0x85f251[_0x236e8d(0x37b)],_0x85f251[_0x236e8d(0xd62)](_0x4248af,_0x3138b2,_0x66fa5b);if(Imported[_0x236e8d(0x8b3)])_0x85f251[_0x236e8d(0x78c)](_0x1b5fde||'Linear');},Game_Battler['prototype'][_0x1e608f(0x60d)]=function(_0x127fee,_0x2a7e89,_0x3a996b,_0xfbea08,_0x5ed3c8,_0x362dbd){const _0x213f30=_0x1e608f;if(!$gameSystem[_0x213f30(0x3e6)]())return;const _0x376681=this[_0x213f30(0x8dd)]();if(!_0x376681)return;if(_0x127fee===Infinity||_0x2a7e89===Infinity)return;if(isNaN(_0x127fee)||isNaN(_0x2a7e89))return;_0x362dbd=_0x362dbd||0x0;if(_0x362dbd>0x0){if(_0x376681[_0x213f30(0x8d8)]>_0x127fee)_0x127fee+=_0x376681['width']/0x2+_0x362dbd;if(_0x376681[_0x213f30(0x8d8)]<_0x127fee)_0x127fee-=_0x376681['width']/0x2+_0x362dbd;}if(_0xfbea08)this['setBattlerFacePoint'](_0x127fee,_0x2a7e89,![]);_0x127fee-=_0x376681[_0x213f30(0x565)],_0x2a7e89-=_0x376681['_homeY'],_0x376681[_0x213f30(0xd62)](_0x127fee,_0x2a7e89,_0x3a996b);if(Imported[_0x213f30(0x8b3)])_0x376681[_0x213f30(0x78c)](_0x5ed3c8||_0x213f30(0xa73));},Game_Battler['prototype'][_0x1e608f(0xcf3)]=function(_0x3c8cc0,_0x197340,_0x5aca4d,_0x1177bf,_0x365df3){const _0x1d45da=_0x1e608f;if(!$gameSystem['isSideView']())return;const _0x1499c5=this[_0x1d45da(0x8dd)]();if(!_0x1499c5)return;if(_0x1177bf)this[_0x1d45da(0x3c0)](_0x3c8cc0+_0x1499c5[_0x1d45da(0x8d8)],_0x197340+_0x1499c5['_baseY'],![]);_0x3c8cc0+=_0x1499c5[_0x1d45da(0x565)],_0x197340+=_0x1499c5[_0x1d45da(0x37b)],_0x1499c5['startHomeMove'](_0x3c8cc0,_0x197340,_0x5aca4d,_0x365df3),this[_0x1d45da(0x6b1)]=_0x3c8cc0,this[_0x1d45da(0xa20)]=_0x197340;},Game_Battler['prototype'][_0x1e608f(0x3ff)]=function(_0x228180,_0x4a78dc,_0x24b22d,_0x198bc8,_0x933bad,_0x1ab21b){const _0x5c0b1d=_0x1e608f;if(!$gameSystem[_0x5c0b1d(0x3e6)]())return;const _0x2371f6=this[_0x5c0b1d(0x8dd)]();if(!_0x2371f6)return;_0x1ab21b=_0x1ab21b||0x0;if(_0x1ab21b>0x0){if(_0x5c0b1d(0xab3)!==_0x5c0b1d(0x5c5)){if(_0x2371f6['_baseX']>_0x228180)_0x228180+=_0x2371f6[_0x5c0b1d(0x78f)]/0x2+_0x1ab21b;if(_0x2371f6['_baseX']<_0x228180)_0x228180-=_0x2371f6[_0x5c0b1d(0x78f)]/0x2+_0x1ab21b;}else{const _0x5aa3c6=_0x5647df[0x0][_0x5c0b1d(0x92f)](_0x10a20c[0x0],_0x460143[0x0]),_0x34adda=_0x1aa376[0x1][_0x5c0b1d(0x92f)](_0x4065c1[0x1],_0x18ee02[0x1])['trim'](),_0x5ab5b5=new _0x490e11(_0x57b7c3[_0x5c0b1d(0x92f)](_0x34adda),'i');_0x535c63[_0x5aa3c6]=_0x5ab5b5;}}if(_0x198bc8)this[_0x5c0b1d(0x3c0)](_0x228180,_0x4a78dc,![]);_0x2371f6[_0x5c0b1d(0xcf8)](_0x228180,_0x4a78dc,_0x24b22d,_0x933bad),this[_0x5c0b1d(0x6b1)]=_0x228180,this[_0x5c0b1d(0xa20)]=_0x4a78dc;},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x182)]=function(_0x54faf3,_0x37fcc1,_0x3bffee){const _0x4a591e=_0x1e608f;if(!$gameSystem[_0x4a591e(0x3e6)]())return;const _0x5cd2b6=this['battler']();if(!_0x5cd2b6)return;_0x5cd2b6[_0x4a591e(0x8bd)](_0x54faf3,_0x37fcc1,_0x3bffee);},Game_Battler['prototype'][_0x1e608f(0x3e7)]=function(_0x1a13ac,_0x53ad90){const _0x25b902=_0x1e608f;if(!$gameSystem[_0x25b902(0x3e6)]())return;const _0x49f371=this[_0x25b902(0x8dd)]();if(!_0x49f371)return;_0x49f371[_0x25b902(0x363)](_0x1a13ac,_0x53ad90);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3ed)]=function(_0x24968c,_0x40ce1c,_0x4f955e,_0x37f766){const _0x54be42=_0x1e608f;if(!$gameSystem[_0x54be42(0x3e6)]())return;const _0x50e7a9=this['battler']();if(!_0x50e7a9)return;_0x50e7a9[_0x54be42(0x826)](_0x24968c,_0x40ce1c,_0x4f955e,_0x37f766);},Game_Battler['prototype'][_0x1e608f(0x11c)]=function(_0x5c8dd8,_0x33ff7d,_0x6e67ff,_0x408a79){const _0x174437=_0x1e608f;if(!$gameSystem[_0x174437(0x3e6)]())return;const _0x2480d4=this['battler']();if(!_0x2480d4)return;if(this['isActor']()){if(_0x174437(0xbc8)!==_0x174437(0x89e))_0x5c8dd8*=-0x1,_0x33ff7d*=-0x1;else return _0x15bdc6[_0x174437(0x8b3)]?_0x3945be[_0x174437(0xcf7)]('ok'):_0x10edd6[_0x174437(0xce2)][_0x174437(0x4a9)][_0x174437(0x6b5)][_0x174437(0xbed)];}_0x2480d4[_0x174437(0xd49)](_0x5c8dd8,_0x33ff7d,_0x6e67ff,_0x408a79);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x775)]=function(_0x3ea619,_0x29bb20,_0x2342d9,_0x3a4429){const _0x10e789=_0x1e608f;if(!$gameSystem[_0x10e789(0x3e6)]())return;const _0x26f93f=this[_0x10e789(0x8dd)]();if(!_0x26f93f)return;_0x26f93f[_0x10e789(0x649)](_0x3ea619,_0x29bb20,_0x2342d9,_0x3a4429);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xa00)]=function(_0x264dca,_0x32ed8b,_0x23939f){const _0x29a20f=_0x1e608f;if(!$gameSystem[_0x29a20f(0x3e6)]())return;const _0x2cd1fd=this[_0x29a20f(0x8dd)]();if(!_0x2cd1fd)return;_0x2cd1fd[_0x29a20f(0x99b)](_0x264dca,_0x32ed8b,_0x23939f);},Game_Battler[_0x1e608f(0xbe1)]['clearFreezeMotion']=function(){const _0x13cfe4=_0x1e608f,_0x22c932=!!this['_freezeMotionData'];this[_0x13cfe4(0xc10)]=undefined,_0x22c932&&(this['requestMotionRefresh'](),this[_0x13cfe4(0x1d6)]());},Game_Battler[_0x1e608f(0xbe1)]['clearFreezeMotionForWeapons']=function(){const _0x5342ce=_0x1e608f;if(!SceneManager[_0x5342ce(0x5f2)]())return;const _0x84473b=this[_0x5342ce(0x8dd)]();if(!_0x84473b)return;let _0x34470e=this['isActor']()?_0x84473b[_0x5342ce(0xcbb)]:_0x84473b[_0x5342ce(0xc7b)][_0x5342ce(0xcbb)];_0x34470e&&_0x34470e[_0x5342ce(0x429)](0x0);},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xac2)]=function(_0x19fad9,_0x4906c1,_0x1ed36f){const _0x4e581c=_0x1e608f;if(this[_0x4e581c(0xbab)]()&&!this[_0x4e581c(0x7dd)]())return;let _0x3b9ac6=0x0,_0xc46045=0x0;_0x19fad9['match'](/ATTACK[ ](\d+)/i)&&(_0xc46045=Number(RegExp['$1']),_0xc46045--);if(this[_0x4e581c(0x28c)]()){if(_0x4e581c(0xb6f)===_0x4e581c(0xd1a)){if(_0x4bfd51[_0x4e581c(0x5f2)]()){const _0x4dbf89=this[_0x4e581c(0x8dd)]();if(_0x4dbf89)_0x4dbf89[_0x4e581c(0xd45)](_0xe908dd);}}else{const _0x4856da=this['weapons']();_0x3b9ac6=_0x4856da[_0xc46045]?_0x4856da[_0xc46045][_0x4e581c(0xb9c)]:0x0;}}else this[_0x4e581c(0xbab)]()&&(_0x3b9ac6=this[_0x4e581c(0x42e)]()[_0x4e581c(0xb9c)]||0x0);const _0x1b4230=$dataSystem[_0x4e581c(0x969)][_0x3b9ac6];if(_0x19fad9['match'](/attack/i)){if('sIZWX'!==_0x4e581c(0x7c5))_0x19fad9=[_0x4e581c(0xa69),_0x4e581c(0x937),_0x4e581c(0x963)][_0x1b4230['type']]||'swing';else{if(this[_0x4e581c(0x7dd)]()){if(this[_0x4e581c(0x404)]()>=0x1)return!![];return this['svBattlerData']()['collapse'];}else return!![];}}this['_freezeMotionData']={'motionType':_0x19fad9,'weaponImageId':_0x4906c1?_0x1b4230['weaponImageId']:0x0,'pattern':_0x1ed36f};},Game_Battler['prototype'][_0x1e608f(0x5df)]=function(_0x390b2c){const _0x2c60c8=_0x1e608f;if(!_0x390b2c)return![];return _0x390b2c[_0x2c60c8(0x406)]()===this['friendsUnit']();},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x55e)]=function(_0x5eca91){const _0x204b4d=_0x1e608f;if(!_0x5eca91)return![];return _0x5eca91[_0x204b4d(0x8a4)]()===this[_0x204b4d(0x406)]();},Game_Battler['prototype'][_0x1e608f(0x578)]=function(){return![];},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x578)]=function(){const _0x130dd6=_0x1e608f;return this[_0x130dd6(0x90e)]()[_0x130dd6(0x97b)](/\$/i);},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x578)]=function(){const _0x584e83=_0x1e608f;return this[_0x584e83(0x7dd)]()&&this[_0x584e83(0x2ed)]()['match'](/\$/i);},VisuMZ['BattleCore'][_0x1e608f(0x833)]=Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x429)],Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x429)]=function(_0x21d5fd){const _0x20ad32=_0x1e608f;VisuMZ[_0x20ad32(0xce2)][_0x20ad32(0x833)][_0x20ad32(0x2d7)](this,_0x21d5fd),this[_0x20ad32(0x660)]();},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x660)]=function(){const _0x13ad40=_0x1e608f;this[_0x13ad40(0x74f)]='',this[_0x13ad40(0x532)]()&&this[_0x13ad40(0x532)]()['note'][_0x13ad40(0x97b)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x13ad40(0x74f)]=String(RegExp['$1']));},Game_Actor[_0x1e608f(0xbe1)]['getBattlePortraitFilename']=function(){const _0xc66a58=_0x1e608f;if(this[_0xc66a58(0x8f7)]()!=='')return this[_0xc66a58(0x8f7)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0xc66a58(0xa3e)]()!=='')return this['getMenuImage']();}return'';},Game_Actor['prototype'][_0x1e608f(0x8f7)]=function(){const _0x2913cd=_0x1e608f;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this[_0x2913cd(0x74f)];},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbb8)]=function(_0x1c8292){const _0xdfde34=_0x1e608f;if(this[_0xdfde34(0x74f)]===undefined)this[_0xdfde34(0x660)]();this[_0xdfde34(0x74f)]=_0x1c8292;if(SceneManager['isSceneBattle']()&&$gameParty[_0xdfde34(0xb46)]()[_0xdfde34(0xc3d)](this)){const _0x1287f1=SceneManager['_scene'][_0xdfde34(0x496)];_0x1287f1&&(_0xdfde34(0x29b)===_0xdfde34(0x29b)?_0x1287f1[_0xdfde34(0x4ad)](this):_0x24642b=_0x2958fb>=_0x168d92?_0x1902fc:_0x4aa2bb);}},Game_Actor[_0x1e608f(0xbe1)]['isSpriteVisible']=function(){return!![];},Game_Actor['prototype']['isAutoBattle']=function(){const _0x46d156=_0x1e608f;if(!this['isConfused']()&&BattleManager[_0x46d156(0xb82)])return!![];return Game_Battler[_0x46d156(0xbe1)][_0x46d156(0x7d1)][_0x46d156(0x2d7)](this);},VisuMZ['BattleCore']['Game_Actor_makeActionList']=Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xb87)],Game_Actor[_0x1e608f(0xbe1)]['makeActionList']=function(){const _0x3b9c18=_0x1e608f;if(BattleManager['_autoBattle']&&!ConfigManager['autoBattleUseSkills'])return this[_0x3b9c18(0x5cb)]();else{return VisuMZ[_0x3b9c18(0xce2)][_0x3b9c18(0x391)][_0x3b9c18(0x2d7)](this);;}},Game_Actor['prototype'][_0x1e608f(0x5cb)]=function(){const _0x5e1350=_0x1e608f,_0x123c52=[],_0x4855f3=new Game_Action(this);return _0x4855f3[_0x5e1350(0xa62)](),_0x123c52[_0x5e1350(0xb79)](_0x4855f3),_0x123c52;},Game_Actor['prototype'][_0x1e608f(0x888)]=function(){const _0x5194bd=_0x1e608f;return this[_0x5194bd(0xb0c)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x5194bd(0xce2)][_0x5194bd(0x4a9)][_0x5194bd(0x4de)][_0x5194bd(0xc03)];},Game_Actor['prototype'][_0x1e608f(0x920)]=function(){const _0x368215=_0x1e608f;if(this[_0x368215(0xa80)][_0x368215(0x3f7)]!==undefined)return this['_cache'][_0x368215(0x3f7)];return this['actor']()['note'][_0x368215(0x97b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x368215(0xa80)][_0x368215(0x3f7)]=eval(RegExp['$1']),this[_0x368215(0xa80)][_0x368215(0x348)]=eval(RegExp['$2'])):_0x368215(0x9d7)!==_0x368215(0x9d7)?this['opacity']=0x0:this[_0x368215(0xa80)][_0x368215(0x3f7)]=Game_Battler[_0x368215(0xbe1)][_0x368215(0x920)]['call'](this),this[_0x368215(0xa80)][_0x368215(0x3f7)];},Game_Actor['prototype']['svBattlerAnchorY']=function(){const _0x5e69fa=_0x1e608f;if(this[_0x5e69fa(0xa80)][_0x5e69fa(0x348)]!==undefined)return this[_0x5e69fa(0xa80)]['svAnchorY'];return this[_0x5e69fa(0x532)]()[_0x5e69fa(0xb2d)][_0x5e69fa(0x97b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x5e69fa(0x3f7)]=eval(RegExp['$1']),this[_0x5e69fa(0xa80)][_0x5e69fa(0x348)]=eval(RegExp['$2'])):this[_0x5e69fa(0xa80)][_0x5e69fa(0x348)]=Game_Battler[_0x5e69fa(0xbe1)][_0x5e69fa(0xc6a)][_0x5e69fa(0x2d7)](this),this['_cache']['svAnchorY'];},Game_Actor[_0x1e608f(0xbe1)]['svBattlerShadowVisible']=function(){const _0x19911e=_0x1e608f;if(this['_cache'][_0x19911e(0xab9)]!==undefined)return this['_cache']['svShadow'];if(this['actor']()[_0x19911e(0xb2d)]['match'](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x19911e(0x465)===_0x19911e(0x465))this[_0x19911e(0xa80)][_0x19911e(0xab9)]=!![];else{this[_0x19911e(0x6a4)][_0x19911e(0x34b)]=_0x5343d1[_0x19911e(0x48c)],this[_0x19911e(0x6a4)][_0x19911e(0x48d)]='';return;}}else{if(this['actor']()[_0x19911e(0xb2d)]['match'](/<SIDEVIEW HIDE SHADOW>/i))this[_0x19911e(0xa80)][_0x19911e(0xab9)]=![];else{if('AAdnY'!==_0x19911e(0xc18)){if(_0x4b6c03[_0x19911e(0x303)])return;this[_0x19911e(0x46d)](),this[_0x19911e(0x1b5)](),this['process_VisuMZ_BattleCore_jsFunctions']();}else this[_0x19911e(0xa80)][_0x19911e(0xab9)]=Game_Battler[_0x19911e(0xbe1)]['svBattlerShadowVisible'][_0x19911e(0x2d7)](this);}}return this[_0x19911e(0xa80)][_0x19911e(0xab9)];},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x4f8)]=function(){const _0x5cf6e0=_0x1e608f;return VisuMZ[_0x5cf6e0(0xce2)][_0x5cf6e0(0x4a9)]['Actor'][_0x5cf6e0(0x2b3)];},Game_Actor['prototype'][_0x1e608f(0x402)]=function(){const _0x2a3abc=_0x1e608f,_0x2815cd=this[_0x2a3abc(0x784)](),_0x582548=_0x2815cd[0x0]?_0x2815cd[0x0][_0x2a3abc(0xb9c)]:0x0,_0x15e3e9=$dataSystem[_0x2a3abc(0x969)][_0x582548];_0x15e3e9&&this[_0x2a3abc(0x77a)](_0x15e3e9['weaponImageId']);},Game_Actor[_0x1e608f(0xbe1)]['performAction']=function(_0x10df59){const _0x217012=_0x1e608f;Game_Battler[_0x217012(0xbe1)][_0x217012(0x695)][_0x217012(0x2d7)](this,_0x10df59),this[_0x217012(0xd0c)](_0x10df59);},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xc93)]=function(){const _0x457d62=_0x1e608f,_0x25844b=this[_0x457d62(0x784)](),_0x2b9a28=_0x25844b[0x0]?_0x25844b[0x0][_0x457d62(0xb9c)]:0x0;return $dataSystem['attackMotions'][_0x2b9a28];},Game_Actor['prototype'][_0x1e608f(0x55b)]=function(_0xb89299){const _0x49b36c=_0x1e608f;_0xb89299=_0xb89299||0x1,_0xb89299--;const _0x2afc12=this[_0x49b36c(0x784)]();return _0x2afc12[_0xb89299]?_0x2afc12[_0xb89299][_0x49b36c(0x6d2)]:0x0;},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xc80)]=function(_0x540321){const _0x4e3060=_0x1e608f;_0x540321=_0x540321||0x1,_0x540321--;const _0x1a67db=this['weapons'](),_0x52390a=_0x1a67db[_0x540321]?_0x1a67db[_0x540321][_0x4e3060(0xb9c)]:0x0;return $dataSystem['attackMotions'][_0x52390a];},Game_Actor['prototype'][_0x1e608f(0x7e3)]=function(_0x29fcaa){const _0x180293=_0x1e608f;_0x29fcaa=_0x29fcaa||0x1,_0x29fcaa--;const _0x1e8372=this[_0x180293(0x784)](),_0x3d8079=_0x1e8372[_0x29fcaa]?_0x1e8372[_0x29fcaa][_0x180293(0xb9c)]:0x0,_0x268df7=$dataSystem['attackMotions'][_0x3d8079];if(_0x268df7){if(_0x180293(0x9ce)==='VtfOv'){if(_0x268df7[_0x180293(0x512)]===0x0)_0x180293(0xd35)!==_0x180293(0xd35)?_0x1a1998[_0x180293(0xce2)][_0x180293(0x4a9)]['Actor'][_0x180293(0x45b)]?_0x44d5b5['BattleCore'][_0x180293(0x4a9)][_0x180293(0xa6a)][_0x180293(0x45b)][_0x180293(0x2d7)](this,_0x5a5ad8):_0x3a9158[_0x180293(0xce2)]['Sprite_Actor_setActorHome']['call'](this,_0x4eab11):this['requestMotion'](_0x180293(0xa69));else{if(_0x268df7[_0x180293(0x512)]===0x1)this[_0x180293(0x7c6)](_0x180293(0x937));else{if(_0x268df7[_0x180293(0x512)]===0x2){if(_0x180293(0x30d)===_0x180293(0x30d))this[_0x180293(0x7c6)]('missile');else{if(this[_0x180293(0x366)]()[_0x180293(0xb2d)][_0x180293(0x97b)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];}}}}this[_0x180293(0x77a)](_0x268df7[_0x180293(0x497)]);}else{if(!_0x3357a0['isPhysical']())return![];if(!_0x5e3eca[_0x180293(0xb35)]())return![];if(!_0x9f1518[_0x180293(0xaef)]())return![];return _0x3cccfc['BattleCore'][_0x180293(0x4a9)][_0x180293(0x151)]['AutoMeleeAoE'];}}},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xb40)]=function(_0x49cd9d){const _0x3555c8=_0x1e608f;if(this['isActor']()){const _0x18e6be=this[_0x3555c8(0x784)]();if(_0x18e6be[_0x3555c8(0xcaf)]>0x0){const _0x2ebe64=_0x18e6be[_0x49cd9d];if(_0x2ebe64)_0x49cd9d=this[_0x3555c8(0x4b3)]()[_0x3555c8(0x8fc)](_0x2ebe64);}}this[_0x3555c8(0x2c5)]=_0x49cd9d||0x0,this['_cache']={};},Game_Battler[_0x1e608f(0xbe1)]['nextActiveWeaponSlot']=function(){const _0x3f5ce8=_0x1e608f;this['_activeWeaponSlot']=this[_0x3f5ce8(0x2c5)]||0x0,this[_0x3f5ce8(0x2c5)]++,this[_0x3f5ce8(0xa80)]={};},Game_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x729)]=function(){const _0x3b7b27=_0x1e608f;this[_0x3b7b27(0x2c5)]=undefined,this[_0x3b7b27(0xa80)]={};},VisuMZ[_0x1e608f(0xce2)]['Game_Actor_equips']=Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x4b3)],Game_Actor[_0x1e608f(0xbe1)]['equips']=function(){const _0x2f6925=_0x1e608f;let _0x2b56de=VisuMZ[_0x2f6925(0xce2)]['Game_Actor_equips'][_0x2f6925(0x2d7)](this);if(this[_0x2f6925(0x534)])return _0x2b56de;if(this['_activeWeaponSlot']!==undefined){if(_0x2f6925(0x6f3)!==_0x2f6925(0x6f3))_0x5e1f68['setActionState']('undecided');else{this[_0x2f6925(0x534)]=!![];const _0x18b651=this[_0x2f6925(0xb4c)]();for(let _0x104fe5=0x0;_0x104fe5<_0x18b651['length'];_0x104fe5++){_0x18b651[_0x104fe5]===0x1&&this['_activeWeaponSlot']!==_0x104fe5&&(_0x2b56de[_0x104fe5]=null);}this[_0x2f6925(0x534)]=undefined;}}return _0x2b56de;},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x1e4)]=function(_0xfbf12f){const _0x557a36=_0x1e608f;return _0xfbf12f[_0x557a36(0x28c)]()?_0xfbf12f[_0x557a36(0x784)]()[_0x557a36(0xcaf)]||0x1:0x1;},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xaa8)]=function(_0x5ede6f,_0x250fcb){const _0xfdf4a9=_0x1e608f;_0x5ede6f&&_0x5ede6f[_0xfdf4a9(0x28c)]()&&_0x5ede6f[_0xfdf4a9(0xb40)](_0x250fcb),this[_0xfdf4a9(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x3a9)]=function(_0x5d1e11){const _0x4e5571=_0x1e608f;if(_0x5d1e11&&_0x5d1e11[_0x4e5571(0x28c)]()){if(_0x4e5571(0x531)!==_0x4e5571(0x6af))_0x5d1e11['clearActiveWeaponSlot']();else return[this[_0x4e5571(0x34c)]()];}this[_0x4e5571(0xd30)]();},Game_Actor['prototype']['battleUIOffsetX']=function(){const _0x179606=_0x1e608f;let _0x31981c=_0x179606(0xc29);if(this['checkCacheKey'](_0x31981c))return this['_cache'][_0x31981c];return this[_0x179606(0xa80)][_0x31981c]=this[_0x179606(0x1d1)](this[_0x179606(0x532)]()),this['_cache'][_0x31981c];},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x7c9)]=function(){const _0x44a7e6=_0x1e608f;let _0x56a5d6=_0x44a7e6(0x7c9);if(this['checkCacheKey'](_0x56a5d6))return this[_0x44a7e6(0xa80)][_0x56a5d6];return this[_0x44a7e6(0xa80)][_0x56a5d6]=this['createBattleUIOffsetY'](this[_0x44a7e6(0x532)]()),this[_0x44a7e6(0xa80)][_0x56a5d6];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb0d)]=Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x429)],Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x429)]=function(_0x3c85f3,_0x146025,_0x22a74c){const _0x3b19a9=_0x1e608f;_0x3c85f3=DataManager['swapEnemyIDs'](_0x3c85f3),VisuMZ[_0x3b19a9(0xce2)]['Game_Enemy_setup']['call'](this,_0x3c85f3,_0x146025,_0x22a74c),Imported[_0x3b19a9(0x471)]&&this['initElementStatusCore'](),this[_0x3b19a9(0xd12)](),this[_0x3b19a9(0x9d6)](),Imported[_0x3b19a9(0x471)]&&(_0x3b19a9(0x2e3)==='SGyMP'?this['recoverAll']():_0x4f74dd[_0x3b19a9(0xaea)](_0x2a6419));},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xd12)]=function(){const _0x13d371=_0x1e608f,_0x4e019d=VisuMZ[_0x13d371(0xce2)][_0x13d371(0x4a9)][_0x13d371(0x662)];this[_0x13d371(0x673)]=_0x4e019d['AttackAnimation'],this[_0x13d371(0x49a)]={};},Game_Enemy[_0x1e608f(0xbe1)]['setupBattleCoreData']=function(){const _0x3c1507=_0x1e608f,_0x596bba=VisuMZ[_0x3c1507(0xce2)][_0x3c1507(0x4a9)][_0x3c1507(0x662)],_0x1951d2=this['enemy']()[_0x3c1507(0xb2d)];this[_0x3c1507(0x49a)]={'name':'','wtypeId':_0x596bba[_0x3c1507(0x520)],'collapse':_0x596bba[_0x3c1507(0x586)],'motionIdle':_0x596bba['MotionIdle'],'width':_0x596bba['Width']||0x40,'height':_0x596bba[_0x3c1507(0x7eb)]||0x40,'anchorX':_0x596bba[_0x3c1507(0x3b6)]||0x0,'anchorY':_0x596bba[_0x3c1507(0x83b)]||0x0,'shadow':_0x596bba[_0x3c1507(0x438)]};_0x1951d2['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x2031ea=this['_svBattlerData'];if(_0x1951d2['match'](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x3c1507(0x46b)===_0x3c1507(0x46b))_0x2031ea[_0x3c1507(0x6aa)]=String(RegExp['$1']);else{const _0xb60ab7=this[_0x3c1507(0x532)](_0x2dd763)[_0x3c1507(0x8dd)]();if(!_0xb60ab7)return;const _0x15e1fc=this[_0x3c1507(0x687)](),_0x2c1c1b=this['itemRect'](_0xc7302f);let _0x316cc7=_0x2732f2[_0x3c1507(0x1a5)](_0x2c1c1b['x']+_0x2c1c1b[_0x3c1507(0x78f)]/0x2)+this[_0x3c1507(0x85a)];[_0x3c1507(0x68e)][_0x3c1507(0xc3d)](_0x15e1fc)&&(_0x316cc7=_0x2c1c1b[_0x3c1507(0x78f)]/_0x2f2a78[_0x3c1507(0xb46)]()['length'],_0x316cc7*=_0x52526b,_0x316cc7+=_0x2c1c1b[_0x3c1507(0x78f)]/_0x5aba95[_0x3c1507(0xb46)]()['length']/0x2);let _0x509ff1=_0x2ae60d['round'](this[_0x3c1507(0x832)](_0x17d9d5,_0xb60ab7,_0x2c1c1b));_0xb60ab7[_0x3c1507(0x63d)](_0x316cc7,_0x509ff1),this[_0x3c1507(0x9a7)](_0xb60ab7,0x1),_0xb60ab7['show'](),this[_0x3c1507(0x689)](),this[_0x3c1507(0x8d2)]();}}else{if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x93fdf6=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x3c1507(0x569)]('');_0x2031ea[_0x3c1507(0x6aa)]=DataManager[_0x3c1507(0xc8a)](_0x93fdf6);}}_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2031ea[_0x3c1507(0x8a2)]=eval(RegExp['$1']),_0x2031ea[_0x3c1507(0x8e2)]=eval(RegExp['$2']));if(_0x1951d2['match'](/<SIDEVIEW COLLAPSE>/i))_0x2031ea[_0x3c1507(0xd6e)]=!![];else _0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2031ea['collapse']=![]);if(_0x1951d2['match'](/<SIDEVIEW SHOW SHADOW>/i)){if('ZxFfn'===_0x3c1507(0x251))_0x2031ea[_0x3c1507(0xd03)]=!![];else return![];}else{if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x3c1507(0x618)!==_0x3c1507(0x618)){if(!this[_0x3c1507(0xa0b)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x3c1507(0xa0b)]()['note']||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);}else _0x2031ea[_0x3c1507(0xd03)]=![];}}if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2031ea[_0x3c1507(0x759)]=String(RegExp['$1'])[_0x3c1507(0x377)]()[_0x3c1507(0x2a9)]();else{if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3c27cd=String(RegExp['$1'])[_0x3c1507(0x783)](/[\r\n]+/)[_0x3c1507(0x569)]('');_0x2031ea[_0x3c1507(0x759)]=DataManager[_0x3c1507(0xc8a)](_0x3c27cd);}}_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2031ea['width']=Number(RegExp['$1']),_0x2031ea[_0x3c1507(0x96b)]=Number(RegExp['$2']));if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0x3c1507(0x8ba)!==_0x3c1507(0x3e4))_0x2031ea['wtypeId']=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(!_0x58d8ae['isSceneBattle']())return;if(!_0x3d0838['VisuMZ_2_BattleSystemSTB'])return;if(!_0x4f1f89['isSTB']())return;_0x47c7b8[_0x3c1507(0x47c)](_0x2ef62f,_0xe87afe);const _0x42e79c=_0x7f7ade[_0x3c1507(0x138)];_0xdf416e[_0x3c1507(0x7cb)]&&_0x4678bf[_0x3c1507(0x7cb)][_0x3c1507(0xada)](_0x42e79c);}}else{if(_0x1951d2[_0x3c1507(0x97b)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x43deb4=String(RegExp['$1'])[_0x3c1507(0x783)](/[\r\n]+/)[_0x3c1507(0x569)](''),_0x4d86ae=DataManager[_0x3c1507(0xc8a)](_0x43deb4);_0x2031ea[_0x3c1507(0xb9c)]=DataManager[_0x3c1507(0xb8b)](_0x4d86ae);}}if(Imported['VisuMZ_1_ElementStatusCore']){if(_0x3c1507(0x257)!==_0x3c1507(0x257)){_0xffbdab[_0x3c1507(0xbe1)][_0x3c1507(0x184)][_0x3c1507(0x2d7)](this,_0x1adcd1),_0x38602e[_0x3c1507(0x184)](this[_0x3c1507(0x366)]()),_0xe2515d[_0x3c1507(0x184)](this[_0x3c1507(0x366)]());if(!this['enemy']())return;if(this[_0x3c1507(0x60e)]()){const _0x57ed9b=_0x5bf15c[_0x3c1507(0x327)]['_actorWindow'];this[_0x3c1507(0x366)]()[_0x3c1507(0x28c)]()?_0x57ed9b[_0x3c1507(0x184)](this['enemy']()[_0x3c1507(0xcb0)]()):_0x57ed9b[_0x3c1507(0x3cd)]();}}else{const _0x6572ba=this[_0x3c1507(0x129)]();for(const _0x502a11 of _0x6572ba){const _0x47795d=this[_0x3c1507(0xa6b)](_0x502a11)[_0x3c1507(0x340)][_0x3c1507(0xb11)]()['trim'](),_0x2c4278=_0x502a11[_0x3c1507(0xb11)]()['trim']();if(_0x1951d2['match'](VisuMZ['ElementStatusCore'][_0x3c1507(0xc13)][_0x3c1507(0x215)[_0x3c1507(0x92f)](_0x2c4278,_0x47795d)])){if(_0x3c1507(0xb75)!=='giUxS')_0x2031ea[_0x3c1507(0x6aa)]=String(RegExp['$1']);else{_0x35f382-=_0x3226ab;const _0x394d24=_0x85ef12['BattleCore'][_0x3c1507(0x4a9)][_0x3c1507(0x2db)]['DefaultSoftScaler'],_0xdb3814=_0x526870[_0x3c1507(0x127)](0x1-_0x5b722b/((_0x5a92ce-_0x5bdc8b)*_0x394d24+_0x5c9949),0.01);_0x1eda16*=_0xdb3814,_0x216f79+=_0x58acc3;}}else{if(_0x1951d2[_0x3c1507(0x97b)](VisuMZ[_0x3c1507(0xbd0)][_0x3c1507(0xc13)][_0x3c1507(0x726)[_0x3c1507(0x92f)](_0x2c4278,_0x47795d)])){if(_0x3c1507(0x4a4)!=='mfzuH'){const _0x2e411f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x3c1507(0x569)]('');_0x2031ea[_0x3c1507(0x6aa)]=DataManager[_0x3c1507(0xc8a)](_0x2e411f);}else return this[_0x3c1507(0xabc)]()?this['currentAction']()&&this['currentAction']()[_0x3c1507(0xa0b)]()&&this['currentAction']()[_0x3c1507(0x854)]():this[_0x3c1507(0x509)]()&&this['currentAction']()[_0x3c1507(0xa0b)]()&&this[_0x3c1507(0x509)]()['isMagicSkill']();}}if(_0x1951d2[_0x3c1507(0x97b)](VisuMZ[_0x3c1507(0xbd0)][_0x3c1507(0xc13)]['SvWeaponSolo-%1-%2'['format'](_0x2c4278,_0x47795d)])){if(_0x3c1507(0xb34)!=='yHNow')return _0x4c1394[_0x3c1507(0xb2d)][_0x3c1507(0x97b)](/<COMMAND TEXT: (.*)>/i)?_0x35ea28(_0x39f3cf['$1']):_0x539053[_0x3c1507(0x6aa)];else _0x2031ea['wtypeId']=DataManager[_0x3c1507(0xb8b)](RegExp['$1']);}else{if(_0x1951d2[_0x3c1507(0x97b)](VisuMZ[_0x3c1507(0xbd0)][_0x3c1507(0xc13)]['SvWeaponMass-%1-%2'[_0x3c1507(0x92f)](_0x2c4278,_0x47795d)])){const _0x48db5d=String(RegExp['$1'])[_0x3c1507(0x783)](/[\r\n]+/)['remove'](''),_0x46ba27=DataManager[_0x3c1507(0xc8a)](_0x48db5d);_0x2031ea[_0x3c1507(0xb9c)]=DataManager['getWtypeIdWithName'](_0x46ba27);}}if(_0x1951d2['match'](VisuMZ[_0x3c1507(0xbd0)][_0x3c1507(0xc13)]['SvMotionIdleSolo-%1-%2'['format'](_0x2c4278,_0x47795d)]))_0x2031ea[_0x3c1507(0x759)]=String(RegExp['$1'])[_0x3c1507(0x377)]()['trim']();else{if(_0x1951d2[_0x3c1507(0x97b)](VisuMZ['ElementStatusCore'][_0x3c1507(0xc13)][_0x3c1507(0x667)[_0x3c1507(0x92f)](_0x2c4278,_0x47795d)])){const _0x3b9da9=String(RegExp['$1'])[_0x3c1507(0x783)](/[\r\n]+/)['remove']('');_0x2031ea[_0x3c1507(0x759)]=DataManager[_0x3c1507(0xc8a)](_0x3b9da9);}}}}}},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x881)]=function(){const _0x818247=_0x1e608f;return this[_0x818247(0x673)]||0x0;},Game_Enemy['prototype'][_0x1e608f(0x545)]=function(){const _0x640a5b=_0x1e608f;return this[_0x640a5b(0x881)]();},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x55b)]=function(_0x5e05a3){return this['attackAnimationId1']();},Game_Enemy['prototype'][_0x1e608f(0xc38)]=function(){const _0xbb91d3=_0x1e608f;if(this[_0xbb91d3(0x366)]()[_0xbb91d3(0xb2d)][_0xbb91d3(0x97b)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0xbb91d3(0xbe1)][_0xbb91d3(0xc38)][_0xbb91d3(0x2d7)](this);},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x566)]=function(){const _0x193e6b=_0x1e608f;if(this[_0x193e6b(0x366)]()['note'][_0x193e6b(0x97b)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x1e608f(0xa81)]=function(){const _0x27f918=_0x1e608f,_0x2c279e=[];for(const _0x1034ab of this[_0x27f918(0x366)]()['actions']){if('fcDLa'!==_0x27f918(0x9be)){const _0x226380=$dataSkills[_0x1034ab['skillId']];if(_0x226380&&!_0x2c279e[_0x27f918(0xc3d)](_0x226380))_0x2c279e[_0x27f918(0xb79)](_0x226380);}else this[_0x27f918(0x2ce)]=!![],this[_0x27f918(0x344)]('BattleDefeatJS'),_0x4db40b[_0x27f918(0xce2)][_0x27f918(0xad5)][_0x27f918(0x2d7)](this),this[_0x27f918(0x2ac)](_0x27f918(0x347));}return _0x2c279e;},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xc29)]=function(){const _0x5a7b9f=_0x1e608f;let _0x58d3c0=_0x5a7b9f(0xc29);if(this[_0x5a7b9f(0x629)](_0x58d3c0))return this[_0x5a7b9f(0xa80)][_0x58d3c0];return this[_0x5a7b9f(0xa80)][_0x58d3c0]=this[_0x5a7b9f(0x1d1)](this[_0x5a7b9f(0x366)]()),this[_0x5a7b9f(0xa80)][_0x58d3c0];},Game_Enemy[_0x1e608f(0xbe1)]['battleUIOffsetY']=function(){const _0x3c690d=_0x1e608f;let _0x4d60f9='battleUIOffsetY';if(this[_0x3c690d(0x629)](_0x4d60f9))return this[_0x3c690d(0xa80)][_0x4d60f9];return this[_0x3c690d(0xa80)][_0x4d60f9]=this[_0x3c690d(0x5c2)](this[_0x3c690d(0x366)]()),this['_cache'][_0x4d60f9];},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x42e)]=function(){const _0xfb3e0f=_0x1e608f;if(this[_0xfb3e0f(0x49a)]!==undefined)return this[_0xfb3e0f(0x49a)];return this[_0xfb3e0f(0x9d6)](),this[_0xfb3e0f(0x49a)];},Game_Enemy['prototype'][_0x1e608f(0x7dd)]=function(){const _0x1b0909=_0x1e608f;return this[_0x1b0909(0x42e)]()[_0x1b0909(0x6aa)]!=='';},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x2ed)]=function(){const _0x24e762=_0x1e608f;return this['svBattlerData']()[_0x24e762(0x6aa)];},Game_Enemy[_0x1e608f(0xbe1)]['battlerSmoothImage']=function(){const _0x90f65e=_0x1e608f;if(this[_0x90f65e(0x7dd)]()){if(_0x90f65e(0x7b5)!==_0x90f65e(0x7b5))this[_0x90f65e(0xcc0)](),_0xbffa87[_0x90f65e(0x224)]();else return VisuMZ[_0x90f65e(0xce2)][_0x90f65e(0x4a9)][_0x90f65e(0xa6a)][_0x90f65e(0x2b3)];}else{if(_0x90f65e(0x46f)===_0x90f65e(0x714)){if(!_0x18d98c[_0x90f65e(0x3e6)]())return;if(this[_0x90f65e(0xb76)])return;this[_0x90f65e(0xb76)]=!![];const _0x236c17=this[_0x90f65e(0x8dd)]();if(_0x236c17)_0x236c17[_0x90f65e(0x252)]();}else return VisuMZ[_0x90f65e(0xce2)]['Settings'][_0x90f65e(0x662)][_0x90f65e(0x2b3)];}},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x695)]=function(_0x41847f){const _0x3b1aed=_0x1e608f;Game_Battler[_0x3b1aed(0xbe1)]['performAction'][_0x3b1aed(0x2d7)](this,_0x41847f);if(this[_0x3b1aed(0x7dd)]())this[_0x3b1aed(0xd0c)](_0x41847f);},Game_Enemy[_0x1e608f(0xbe1)]['performAttack']=function(){const _0x5b25e6=_0x1e608f,_0x426ab9=this['svBattlerData']()[_0x5b25e6(0xb9c)]||0x0,_0x58186a=$dataSystem[_0x5b25e6(0x969)][_0x426ab9];if(_0x58186a){if(_0x5b25e6(0xb65)!==_0x5b25e6(0xb65)){const _0x5a106b=_0x4da72d[_0x5b25e6(0x8dd)]();this['push'](_0x5b25e6(0x1e3),[_0x5d6a0d],_0x1611c5,_0x5ac37a),this[_0x5b25e6(0xb79)](_0x5b25e6(0x4c3),_0x3c80eb,_0x5a106b['_homeX'],_0x5a106b[_0x5b25e6(0x37b)],_0x23e056,![],_0x5b25e6(0xa73)),this[_0x5b25e6(0xb79)](_0x5b25e6(0x7c6),[_0x5bb05b],_0x5b25e6(0x35f)),this[_0x5b25e6(0xb79)](_0x5b25e6(0x83e)),this[_0x5b25e6(0xb79)]('requestMotion',[_0x27703a],'walk');}else{if(_0x58186a['type']===0x0)this[_0x5b25e6(0x7c6)](_0x5b25e6(0xa69));else{if(_0x58186a[_0x5b25e6(0x512)]===0x1)_0x5b25e6(0x238)===_0x5b25e6(0x52a)?(_0x3e6da2+=_0x5bea0f,_0x45d07e+=_0x12f997):this[_0x5b25e6(0x7c6)]('swing');else{if(_0x58186a[_0x5b25e6(0x512)]===0x2){if(_0x5b25e6(0x9e2)!==_0x5b25e6(0xbcc))this[_0x5b25e6(0x7c6)](_0x5b25e6(0x963));else{const _0x544194=this['_actorCommandWindow'];_0x544194[_0x5b25e6(0xb5a)](_0x5b25e6(0x5aa),this['actorCommandEscape']['bind'](this)),_0x544194[_0x5b25e6(0xb5a)]('autoBattle',this[_0x5b25e6(0xd3d)][_0x5b25e6(0xcdb)](this)),_0x544194[_0x5b25e6(0xb5a)](_0x5b25e6(0x1d9),this[_0x5b25e6(0x2d4)][_0x5b25e6(0xcdb)](this)),_0x25293d[_0x5b25e6(0x643)]()&&(this[_0x5b25e6(0x376)]()?delete _0x544194[_0x5b25e6(0x50c)]['cancel']:_0x544194[_0x5b25e6(0xb5a)](_0x5b25e6(0xc6e),this[_0x5b25e6(0xae3)]['bind'](this)));}}}}}}},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x402)]=function(){const _0x92bbe5=_0x1e608f,_0x4dccfb=this['svBattlerData']()[_0x92bbe5(0xb9c)]||0x0,_0x445291=$dataSystem[_0x92bbe5(0x969)][_0x4dccfb];_0x445291&&this[_0x92bbe5(0x77a)](_0x445291[_0x92bbe5(0x497)]);},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xc93)]=function(){const _0x21b3aa=_0x1e608f,_0x17d4d4=this[_0x21b3aa(0x42e)]()[_0x21b3aa(0xb9c)]||0x0;return $dataSystem[_0x21b3aa(0x969)][_0x17d4d4];},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xc80)]=function(_0xf668ca){return this['getAttackMotion']();},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x864)]=function(){const _0xdcaaa9=_0x1e608f;Game_Battler['prototype'][_0xdcaaa9(0x864)][_0xdcaaa9(0x2d7)](this),this[_0xdcaaa9(0x9fa)]()&&this[_0xdcaaa9(0x7dd)]()&&this[_0xdcaaa9(0x7c6)](_0xdcaaa9(0x848)),SoundManager[_0xdcaaa9(0xd31)]();},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xc0b)]=function(){const _0x333ac2=_0x1e608f;Game_Battler[_0x333ac2(0xbe1)][_0x333ac2(0xc0b)][_0x333ac2(0x2d7)](this),this[_0x333ac2(0x7c6)](_0x333ac2(0x35f));},Game_Enemy['prototype']['performMagicEvasion']=function(){const _0x52965d=_0x1e608f;Game_Battler[_0x52965d(0xbe1)]['performMagicEvasion'][_0x52965d(0x2d7)](this),this[_0x52965d(0x7c6)](_0x52965d(0x35f));},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x961)]=function(){const _0x3d3fdb=_0x1e608f;Game_Battler['prototype'][_0x3d3fdb(0x961)][_0x3d3fdb(0x2d7)](this),this[_0x3d3fdb(0x237)]();},Game_Enemy['prototype']['allowCollapse']=function(){const _0x8cf2f4=_0x1e608f;if(this[_0x8cf2f4(0x7dd)]()){if(_0x8cf2f4(0x4f4)===_0x8cf2f4(0x4f4)){if(this[_0x8cf2f4(0x404)]()>=0x1)return!![];return this[_0x8cf2f4(0x42e)]()[_0x8cf2f4(0xd6e)];}else this[_0x8cf2f4(0x720)](),this[_0x8cf2f4(0x849)](),this[_0x8cf2f4(0x356)](),this[_0x8cf2f4(0x6fe)](),this[_0x8cf2f4(0x73e)]();}else{if(_0x8cf2f4(0x563)===_0x8cf2f4(0x563))return!![];else{let _0x2acae0=0x0;return this[_0x8cf2f4(0x606)]&&!this[_0x8cf2f4(0x606)][_0x8cf2f4(0x566)]()&&(_0x2acae0-=this[_0x8cf2f4(0x9de)],_0x2acae0-=this[_0x8cf2f4(0xa8d)]),_0x2acae0;}}},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x920)]=function(){const _0x2571e2=_0x1e608f;return this['svBattlerData']()[_0x2571e2(0x8a2)];},Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xc6a)]=function(){const _0x599690=_0x1e608f;return this[_0x599690(0x42e)]()['anchorY'];},Game_Enemy[_0x1e608f(0xbe1)]['svBattlerShadowVisible']=function(){const _0x2e7d96=_0x1e608f;return this[_0x2e7d96(0x42e)]()[_0x2e7d96(0xd03)];},VisuMZ['BattleCore'][_0x1e608f(0x9f2)]=Game_Enemy['prototype'][_0x1e608f(0xb5b)],Game_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xb5b)]=function(_0x456c97){const _0x500281=_0x1e608f;VisuMZ[_0x500281(0xce2)][_0x500281(0x9f2)][_0x500281(0x2d7)](this,_0x456c97),this[_0x500281(0xd12)](),this[_0x500281(0x9d6)]();const _0x474e8a=this[_0x500281(0x8dd)]();if(_0x474e8a){if('MtFtz'!=='RtsFE')_0x474e8a[_0x500281(0x811)]=undefined,_0x474e8a[_0x500281(0x9c8)](this);else{if(this[_0x500281(0x734)]&&_0x1a593b[_0x500281(0xba2)]()){const _0x3265e8=this[_0x500281(0x24c)]();if(_0x3265e8>=0x0){const _0xb2daaa=this[_0x500281(0xc45)]()?_0x500281(0xad3):_0x500281(0x659);_0x34f09f[_0x500281(0x7f0)](_0xb2daaa);}}}}},Game_Unit[_0x1e608f(0xbe1)]['processBattleCoreJS']=function(_0xa074b2){const _0x58c64d=_0x1e608f;for(const _0xf15e83 of this['members']()){if(_0xf15e83)_0xf15e83[_0x58c64d(0x344)](_0xa074b2);}},Game_Unit[_0x1e608f(0xbe1)][_0x1e608f(0xa2c)]=function(){const _0x570477=_0x1e608f,_0x3b623e=this[_0x570477(0x588)]();return _0x3b623e[Math[_0x570477(0xab4)](_0x3b623e[_0x570477(0xcaf)])];},VisuMZ['BattleCore'][_0x1e608f(0x77d)]=Game_Party[_0x1e608f(0xbe1)]['addActor'],Game_Party[_0x1e608f(0xbe1)]['addActor']=function(_0xaa3735){const _0x33376f=_0x1e608f;VisuMZ[_0x33376f(0xce2)][_0x33376f(0x77d)]['call'](this,_0xaa3735),BattleManager[_0x33376f(0x751)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x87d)]=Game_Party[_0x1e608f(0xbe1)]['removeActor'],Game_Party['prototype'][_0x1e608f(0xa72)]=function(_0x31ec33){const _0x682f2c=_0x1e608f;VisuMZ[_0x682f2c(0xce2)][_0x682f2c(0x87d)][_0x682f2c(0x2d7)](this,_0x31ec33),BattleManager['refreshStatusWindow']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x94b)]=Game_Troop[_0x1e608f(0xbe1)]['setup'],Game_Troop['prototype'][_0x1e608f(0x429)]=function(_0x252830){const _0x3e419e=_0x1e608f;$gameTemp[_0x3e419e(0xbad)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x252830),VisuMZ[_0x3e419e(0xce2)][_0x3e419e(0x94b)][_0x3e419e(0x2d7)](this,_0x252830),this[_0x3e419e(0x3ba)]();},VisuMZ[_0x1e608f(0xce2)]['Game_Troop_expTotal']=Game_Troop['prototype']['expTotal'],Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0x7e0)]=function(){const _0x556a73=_0x1e608f;let _0x1b5831=VisuMZ[_0x556a73(0xce2)][_0x556a73(0x30a)][_0x556a73(0x2d7)](this);return this['expRate']&&(_0x1b5831*=this[_0x556a73(0xd54)]()),Math[_0x556a73(0x958)](_0x1b5831);},Game_Troop['prototype']['expRate']=function(){return 0x1;},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0x3ba)]=function(){const _0x277bf2=_0x1e608f,_0x2e0278=DataManager[_0x277bf2(0xc4f)](this[_0x277bf2(0xb2f)]()['id']);if(_0x2e0278[_0x277bf2(0x97b)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x277bf2(0x9ef)!=='nHiAB')this[_0x277bf2(0x1cf)][_0x277bf2(0x478)]();else{const _0xd35695=RegExp['$1']['split'](',')['map'](_0x9c5feb=>Number(_0x9c5feb));this['checkExtendTroopCompatibility'](),this[_0x277bf2(0xa9b)](_0xd35695);}}},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0x2c1)]=function(){const _0x49f736=_0x1e608f;let _0x5ce071=_0x49f736(0xca1)+'\x0a';_0x5ce071+=_0x49f736(0x5a0);if(Imported[_0x49f736(0xb73)]){if('OIpSZ'!==_0x49f736(0xb38))_0x2ae5c8[_0x49f736(0xbd4)](_0x186312);else{if(VisuMZ[_0x49f736(0x66c)][_0x49f736(0x37f)]<1.11){if(_0x49f736(0xcd7)===_0x49f736(0xcd7))alert(_0x5ce071['format'](_0x49f736(0x82d))),SceneManager['exit']();else return[_0x298bad[_0x49f736(0xc53)]()];}}}if(Imported[_0x49f736(0x47f)]){if(VisuMZ[_0x49f736(0xbc9)][_0x49f736(0x37f)]<1.19){if('mxtXR'!=='mxtXR'){_0x49de1e[_0x49f736(0xbe1)][_0x49f736(0x5ad)][_0x49f736(0x2d7)](this);const _0x13bbd=this[_0x49f736(0x188)]()||this;if(!_0x13bbd)return;!_0x13bbd['bitmap']&&(_0x13bbd['bitmap']=new _0x2d8a41(this['width']||0x1,this[_0x49f736(0x96b)]||0x1));if(this[_0x49f736(0xc32)]==='bossCollapse')this[_0x49f736(0xc27)][_0x49f736(0x23f)](0x0,0x0,this[_0x49f736(0xc27)]['width']||0x1,this[_0x49f736(0xa9e)]);else{let _0x2f8a50=0x1;if(_0x13bbd&&_0x13bbd[_0x49f736(0x34b)])_0x2f8a50=_0x13bbd[_0x49f736(0x34b)][_0x49f736(0x78f)];let _0x46e7e8=0x1;if(this[_0x49f736(0x34b)])_0x46e7e8=this[_0x49f736(0x34b)]['height'];_0x13bbd[_0x49f736(0x23f)](0x0,0x0,_0x2f8a50,_0x46e7e8);}}else alert(_0x5ce071[_0x49f736(0x92f)](_0x49f736(0xc41))),SceneManager[_0x49f736(0x3ea)]();}}Imported['VisuMZ_2_BattleSystemSTB']&&(VisuMZ['BattleSystemSTB'][_0x49f736(0x37f)]<1.15&&('fZVhP'===_0x49f736(0x99f)?(this['_shadowSprite'][_0x49f736(0x734)]=this[_0x49f736(0x606)]['hasSvBattler'](),this['updateShadowPosition']()):(alert(_0x5ce071['format'](_0x49f736(0x676))),SceneManager[_0x49f736(0x3ea)]())));},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0xa9b)]=function(_0x5d4a10){const _0x5a029e=_0x1e608f;this['_namesCount']={};for(const _0xf856a of this[_0x5a029e(0xb81)]()){if(!_0xf856a)continue;_0xf856a['setLetter']('');}for(const _0x24d07a of _0x5d4a10){if(_0x5a029e(0x7fb)!==_0x5a029e(0x3bd)){const _0x34887c=$dataTroops[_0x24d07a];if(_0x34887c)this[_0x5a029e(0x20b)](_0x34887c);}else{const _0x5aee2f=_0xd02ecd['_scene'][_0x5a029e(0x496)];_0x5aee2f&&_0x5aee2f[_0x5a029e(0x4ad)](this);}}this[_0x5a029e(0x317)]();},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0x20b)]=function(_0x182618){const _0x37ce77=_0x1e608f;for(const _0x29e43c of _0x182618[_0x37ce77(0xb81)]){if($dataEnemies[_0x29e43c['enemyId']]){const _0xfc85e6=_0x29e43c[_0x37ce77(0x89b)],_0x13c2a6=_0x29e43c['x'],_0x1531e7=_0x29e43c['y'],_0x50518e=new Game_Enemy(_0xfc85e6,_0x13c2a6,_0x1531e7);_0x29e43c[_0x37ce77(0x4e1)]&&_0x50518e[_0x37ce77(0x64e)](),this[_0x37ce77(0x374)][_0x37ce77(0xb79)](_0x50518e);}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1bf)]=Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x7a3)],Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x7a3)]=function(){const _0x12e3f2=_0x1e608f;VisuMZ[_0x12e3f2(0xce2)][_0x12e3f2(0x1bf)][_0x12e3f2(0x2d7)](this),this[_0x12e3f2(0x15f)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x2279d5=_0x1e608f;this[_0x2279d5(0x9b8)]={},this[_0x2279d5(0x6a2)]={};if(!$dataMap)return;const _0x394567=$dataMap[_0x2279d5(0xb2d)];if(!_0x394567)return;const _0x2bd2f2=_0x394567['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2bd2f2){if(_0x2279d5(0x7c3)!==_0x2279d5(0x7c3)){this[_0x2279d5(0xb74)]=this[_0x2279d5(0x366)]()[_0x2279d5(0x6aa)]();const _0x28a4be=this[_0x2279d5(0xa3d)](this[_0x2279d5(0xb74)])['width'],_0x272706=_0x48d5c1[_0x2279d5(0x1a5)]((this[_0x2279d5(0x5b5)]-_0x28a4be)/0x2);this[_0x2279d5(0x53d)](this['_text'],_0x272706,0x0,_0x28a4be+0x8);}else for(const _0x21e72a of _0x2bd2f2){if(_0x2279d5(0x58e)===_0x2279d5(0x229))this[_0x2279d5(0x8e8)][_0x2279d5(0x9a5)](this[_0x2279d5(0x328)]);else{_0x21e72a['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x42c338=Number(RegExp['$1']),_0x30191e=Number(RegExp['$2']),_0x4517e9=_0x30191e===0x1?this[_0x2279d5(0x9b8)]:this['_regionBattleback2'],_0x28ad2b=String(RegExp['$3']);_0x4517e9[_0x42c338]=_0x28ad2b;}}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc40)]=Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x626)],Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x626)]=function(){const _0x58948c=_0x1e608f;if(!BattleManager[_0x58948c(0x7bc)]()){const _0x56a2a1=$gamePlayer[_0x58948c(0x3cb)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x58948c(0x9b8)]&&this['_regionBattleback1'][_0x56a2a1])return this['_regionBattleback1'][_0x56a2a1];}return VisuMZ['BattleCore'][_0x58948c(0xc40)][_0x58948c(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc37)]=Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x8d3)],Game_Map[_0x1e608f(0xbe1)][_0x1e608f(0x8d3)]=function(){const _0x15a258=_0x1e608f;if(!BattleManager[_0x15a258(0x7bc)]()){if(_0x15a258(0x176)!==_0x15a258(0x7cf)){const _0x5e20a9=$gamePlayer[_0x15a258(0x3cb)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x15a258(0x6a2)][_0x5e20a9])return _0x15a258(0x181)===_0x15a258(0x181)?this['_regionBattleback2'][_0x5e20a9]:_0x272a7a['filter'](_0x2bb70c=>_0x2bb70c[_0x15a258(0xbdc)]());}else _0x3bf07e['BattleCore'][_0x15a258(0xbe5)][_0x15a258(0x2d7)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x15a258(0x3e0)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x15a258(0x934)]=_0x15a258(0x702),this[_0x15a258(0x34e)]();}return VisuMZ['BattleCore'][_0x15a258(0xc37)][_0x15a258(0x2d7)](this);},VisuMZ['BattleCore'][_0x1e608f(0x957)]=Game_Map[_0x1e608f(0xbe1)]['encounterList'],Game_Map[_0x1e608f(0xbe1)]['encounterList']=function(){const _0x4079bd=_0x1e608f;let _0x4b0e44=JsonEx[_0x4079bd(0x346)](VisuMZ['BattleCore']['Game_Map_encounterList'][_0x4079bd(0x2d7)](this));return VisuMZ[_0x4079bd(0xce2)][_0x4079bd(0xa5c)](_0x4b0e44);},VisuMZ['BattleCore'][_0x1e608f(0xa5c)]=function(_0x2d1214){const _0x50a470=_0x1e608f;var _0x1e524f,_0x1d5783,_0x4a8f19;for(_0x4a8f19=_0x2d1214[_0x50a470(0xcaf)]-0x1;_0x4a8f19>0x0;_0x4a8f19--){_0x1e524f=Math[_0x50a470(0x14d)](Math['random']()*(_0x4a8f19+0x1)),_0x1d5783=_0x2d1214[_0x4a8f19],_0x2d1214[_0x4a8f19]=_0x2d1214[_0x1e524f],_0x2d1214[_0x1e524f]=_0x1d5783;}return _0x2d1214;},VisuMZ[_0x1e608f(0xce2)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x1e608f(0xbe1)]['command357'],Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x4e9)]=function(_0x574c89){const _0x5f178c=_0x1e608f;return $gameTemp[_0x5f178c(0x5c3)](this),VisuMZ[_0x5f178c(0xce2)][_0x5f178c(0xc05)][_0x5f178c(0x2d7)](this,_0x574c89);},VisuMZ[_0x1e608f(0xce2)]['Game_Interpreter_updateWaitMode']=Game_Interpreter['prototype'][_0x1e608f(0x6c4)],Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x6c4)]=function(){const _0x114d71=_0x1e608f;if(SceneManager[_0x114d71(0x5f2)]()){if(_0x114d71(0x272)==='FwWyC')switch(this[_0x114d71(0x7c0)]){case _0x114d71(0x5d0):if(Imported[_0x114d71(0x6d5)]){if(_0x114d71(0xcde)!==_0x114d71(0xcde))return this[_0x114d71(0x914)](_0x256a92);else{if($gameScreen[_0x114d71(0x84e)]()[_0x114d71(0x814)]>0x0)return!![];this[_0x114d71(0x7c0)]='';}}break;case _0x114d71(0xc2a):if(BattleManager['_spriteset'][_0x114d71(0x2cf)]())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0x3c1):if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0xc4d)]())return!![];this[_0x114d71(0x7c0)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x114d71(0x47a)==='PZwMC'){if($gameScreen['battleCameraData']()[_0x114d71(0x56a)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x114d71(0x742)]>0x0)return!![];this[_0x114d71(0x7c0)]='';}else{this[_0x114d71(0x16d)](_0x5c41f7);for(const _0x2ca84c of _0x13b1fd['targetObjects']){_0x2ca84c[_0x114d71(0x798)]&&_0x2ca84c[_0x114d71(0x798)]();}_0x54e046['destroy']();}}break;case _0x114d71(0xd25):if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0x6ce)]())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0x981):if(BattleManager['_spriteset'][_0x114d71(0x399)]())return!![];this[_0x114d71(0x7c0)]='';break;case'battleJump':if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0x289)]())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0xb8d):if(BattleManager[_0x114d71(0xa66)][_0x114d71(0xcdd)]())return!![];this['_waitMode']='';break;case _0x114d71(0x657):if(BattleManager[_0x114d71(0x4b1)]['isAnyoneMoving']())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0x1ab):if(BattleManager[_0x114d71(0x4b1)]['isAnyoneChangingOpacity']())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0x964):if(BattleManager[_0x114d71(0x4b1)]['isAnyoneGrowing']())return!![];this[_0x114d71(0x7c0)]='';break;case'battleSpriteSkew':if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0xa17)]())return!![];this['_waitMode']='';break;case _0x114d71(0xc99):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0xc9c)]())return!![];this[_0x114d71(0x7c0)]='';}break;case _0x114d71(0x575):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x114d71(0x84e)]()[_0x114d71(0x9e1)]>0x0)return!![];this['_waitMode']='';}break;case'battleSpin':if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0xb51)]())return!![];this[_0x114d71(0x7c0)]='';break;case _0x114d71(0x7df):if(Imported[_0x114d71(0x6d5)]){if($gameScreen['battleCameraData']()[_0x114d71(0x966)]>0x0)return!![];this[_0x114d71(0x7c0)]='';}break;case'battleInjectPrep':if(Imported[_0x114d71(0x875)]){if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0x413)]){if(BattleManager['_spriteset'][_0x114d71(0x413)]())return!![];this[_0x114d71(0x7c0)]='battleInjectAni';}else'PcxbA'===_0x114d71(0xc1b)?this[_0x114d71(0x7c0)]='':_0x5b2f20[_0x114d71(0xce2)]['Window_BattleLog_displayMiss'][_0x114d71(0x2d7)](this,_0x26e570);break;}break;case _0x114d71(0x199):if(Imported['VisuMZ_3_ActSeqImpact']){if(_0x114d71(0x4c4)!==_0x114d71(0xa1a)){if(BattleManager[_0x114d71(0x4b1)][_0x114d71(0xa02)]())return!![];this[_0x114d71(0x7c0)]='';}else return this[_0x114d71(0x5ba)]['shift']();}break;}else return[_0xcdbd30][_0x114d71(0xbe2)](_0x2b2640);}return VisuMZ[_0x114d71(0xce2)][_0x114d71(0xce1)]['call'](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb4e)]=Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0xab8)],Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0xab8)]=function(_0x324467){const _0x2956c3=_0x1e608f;if(!$gameParty['inBattle']()){if('oeNGk'!=='oeNGk'){const _0x4712ae=_0x27a377-this[_0x2956c3(0x565)],_0x1311a1=_0x48a0d4-this[_0x2956c3(0x37b)];this[_0x2956c3(0x565)]=_0x42f3ea,this[_0x2956c3(0x37b)]=_0x5a36d8,this[_0x2956c3(0x66d)]-=_0x4712ae,this[_0x2956c3(0x5f0)]-=_0x1311a1,this[_0x2956c3(0x487)]-=_0x4712ae,this[_0x2956c3(0x5da)]-=_0x1311a1,this[_0x2956c3(0x234)]();}else return this[_0x2956c3(0x2d3)](_0x324467);}else return VisuMZ[_0x2956c3(0xce2)]['Game_Interpreter_command301'][_0x2956c3(0x2d7)](this,_0x324467);},Game_Interpreter['prototype'][_0x1e608f(0x641)]=function(_0x3aefb8){const _0x52f0b5=_0x1e608f;return VisuMZ[_0x52f0b5(0xce2)][_0x52f0b5(0xb4e)][_0x52f0b5(0x2d7)](this,_0x3aefb8),BattleManager[_0x52f0b5(0x727)](_0x4a6864=>{const _0x44510b=_0x52f0b5;this['_branch'][this[_0x44510b(0x5c4)]]=_0x4a6864;}),!![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x66e)]=function(_0x2901ec){const _0x496505=_0x1e608f,_0x442c4b=$dataCommonEvents[_0x2901ec];if(!_0x442c4b)return![];if(_0x442c4b[_0x496505(0x68e)][_0x496505(0xcaf)]<=0x1)return![];return!![];},Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x2d3)]=function(_0x17872c){const _0x33cfc7=_0x1e608f,_0x53d738=VisuMZ['BattleCore'][_0x33cfc7(0x4a9)][_0x33cfc7(0x3c9)],_0x32b0e5=_0x53d738['BattleStartEvent'],_0xd19e51=$dataCommonEvents[_0x32b0e5];if(_0xd19e51&&VisuMZ['BattleCore'][_0x33cfc7(0x66e)](_0x32b0e5)){if(_0x33cfc7(0x968)!==_0x33cfc7(0x155)){const _0x3e52c3=this[_0x33cfc7(0x468)]()?this[_0x33cfc7(0xcb3)]:0x0,_0x50d702=_0xd19e51[_0x33cfc7(0x68e)];this['setupChild'](_0x50d702,_0x3e52c3),this[_0x33cfc7(0xb21)]=JsonEx['makeDeepCopy'](this[_0x33cfc7(0xb21)]);const _0x255b9f={'code':0xbc3,'indent':this[_0x33cfc7(0x5c4)],'parameters':JsonEx[_0x33cfc7(0x346)](_0x17872c)};return this[_0x33cfc7(0xb21)][_0x33cfc7(0x191)](this[_0x33cfc7(0x59a)]+0x1,0x0,_0x255b9f),!![];}else{const _0xe3a463=this['commandName'](_0xa28d54);if(_0xe3a463['match'](/\\I\[(\d+)\]/i)){const _0x501241=this[_0x33cfc7(0x9c1)](_0x30c765),_0x432681=this[_0x33cfc7(0xa3d)](_0xe3a463)[_0x33cfc7(0x78f)];return _0x432681<=_0x501241[_0x33cfc7(0x78f)]?_0x33cfc7(0x6e6):_0x33cfc7(0xad0);}}}else return VisuMZ[_0x33cfc7(0xce2)][_0x33cfc7(0xb4e)][_0x33cfc7(0x2d7)](this,_0x17872c);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x9bc)]=BattleManager[_0x1e608f(0x37a)],BattleManager[_0x1e608f(0x37a)]=function(){const _0x309909=_0x1e608f;VisuMZ['BattleCore'][_0x309909(0x9bc)]['call'](this),this[_0x309909(0x92e)]();},BattleManager['onEncounterBattleCore']=function(){const _0x599929=_0x1e608f,_0x3b7647=VisuMZ[_0x599929(0xce2)]['Settings'][_0x599929(0x3c9)],_0x5ed8d1=_0x3b7647[_0x599929(0x8c3)];_0x5ed8d1&&VisuMZ[_0x599929(0xce2)][_0x599929(0x66e)](_0x5ed8d1)&&(_0x599929(0x23c)!=='KjHko'?(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x599929(0xd6f)](_0x3b7647[_0x599929(0x8c3)]),$gameMap[_0x599929(0x7ad)](),$gameMap['_interpreter'][_0x599929(0xd4d)]=!![]):this[_0x599929(0x8e1)]=[]),_0x3b7647[_0x599929(0x2ae)]>0x0&&(this[_0x599929(0x277)]=!![]);},VisuMZ[_0x1e608f(0xce2)]['Scene_Map_updateCallMenu']=Scene_Map[_0x1e608f(0xbe1)][_0x1e608f(0x567)],Scene_Map['prototype'][_0x1e608f(0x567)]=function(){const _0x39dd08=_0x1e608f;if(BattleManager[_0x39dd08(0x256)])return;VisuMZ[_0x39dd08(0xce2)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ['BattleCore'][_0x1e608f(0x692)]=Scene_Map[_0x1e608f(0xbe1)][_0x1e608f(0x142)],Scene_Map[_0x1e608f(0xbe1)]['launchBattle']=function(){const _0x384319=_0x1e608f;BattleManager['_battleCoreBattleStartEvent']?this[_0x384319(0xbeb)]():VisuMZ[_0x384319(0xce2)]['Scene_Map_launchBattle'][_0x384319(0x2d7)](this);},Scene_Map[_0x1e608f(0xbe1)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x9aa)]=SceneManager[_0x1e608f(0x55f)],SceneManager['isSceneChanging']=function(){const _0x576546=_0x1e608f;if(BattleManager[_0x576546(0x256)])return![];return VisuMZ[_0x576546(0xce2)][_0x576546(0x9aa)]['call'](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x49b)]=Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0xd29)],Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0xd29)]=function(){const _0x3668d8=_0x1e608f;VisuMZ[_0x3668d8(0xce2)][_0x3668d8(0x49b)][_0x3668d8(0x2d7)](this),this[_0x3668d8(0xd4d)]&&(this[_0x3668d8(0xd4d)]=undefined,SceneManager[_0x3668d8(0x327)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x1e608f(0xbe1)][_0x1e608f(0x451)]=function(){const _0xb43356=_0x1e608f;BattleManager[_0xb43356(0x256)]=undefined,BattleManager[_0xb43356(0x6a7)]=!![],this[_0xb43356(0xa6d)]();},VisuMZ['BattleCore'][_0x1e608f(0x41d)]=Scene_Map[_0x1e608f(0xbe1)]['initialize'],Scene_Map['prototype'][_0x1e608f(0xb89)]=function(){const _0x1a7df8=_0x1e608f;VisuMZ['BattleCore'][_0x1a7df8(0x41d)][_0x1a7df8(0x2d7)](this),BattleManager[_0x1a7df8(0x6a7)]&&(this[_0x1a7df8(0xa53)]=!![],BattleManager[_0x1a7df8(0x6a7)]=undefined);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x5d4)]=Scene_Map[_0x1e608f(0xbe1)][_0x1e608f(0xb89)],Scene_Map[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(){const _0x69344e=_0x1e608f;VisuMZ[_0x69344e(0xce2)]['Scene_Map_initialize'][_0x69344e(0x2d7)](this),$gameTemp[_0x69344e(0xbad)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x807)]=Scene_ItemBase[_0x1e608f(0xbe1)]['applyItem'],Scene_ItemBase[_0x1e608f(0xbe1)][_0x1e608f(0xb9d)]=function(){const _0x479d3a=_0x1e608f;VisuMZ[_0x479d3a(0xce2)][_0x479d3a(0x807)][_0x479d3a(0x2d7)](this);if(this[_0x479d3a(0xa0b)]()['note']['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x479d3a(0xb2d)][_0x479d3a(0x97b)](/<CUSTOM ACTION SEQUENCE>/i)&&('Stdkk'!==_0x479d3a(0xb1a)?$gameTemp[_0x479d3a(0x69b)]=[]:(this['_damageContainer']=new _0x54c762(),this[_0x479d3a(0x9a5)](this[_0x479d3a(0x67e)]))),DataManager[_0x479d3a(0xae4)](this['item']())&&($gameTemp[_0x479d3a(0x69b)]=[]);},VisuMZ['BattleCore'][_0x1e608f(0x1fb)]=Scene_Options[_0x1e608f(0xbe1)][_0x1e608f(0xb00)],Scene_Options[_0x1e608f(0xbe1)]['maxCommands']=function(){const _0x164216=_0x1e608f;let _0x5deeb2=VisuMZ[_0x164216(0xce2)]['Scene_Options_maxCommands'][_0x164216(0x2d7)](this);const _0x56d503=VisuMZ[_0x164216(0xce2)][_0x164216(0x4a9)];if(_0x56d503['AutoBattle'][_0x164216(0x65e)]&&_0x56d503[_0x164216(0x6b5)][_0x164216(0xad9)])_0x5deeb2+=0x2;if(_0x56d503[_0x164216(0x8be)]['AddOption']&&_0x56d503[_0x164216(0x8be)][_0x164216(0xad9)])_0x5deeb2+=0x1;return _0x5deeb2;},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_initialize']=Scene_Battle[_0x1e608f(0xbe1)]['initialize'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(){const _0x420c05=_0x1e608f;VisuMZ['BattleCore'][_0x420c05(0x7bd)][_0x420c05(0x2d7)](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x47e)]=Scene_Battle['prototype'][_0x1e608f(0xb9e)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xb9e)]=function(){const _0x268a43=_0x1e608f;if(SceneManager[_0x268a43(0x6e0)]()){if('LDlTy'===_0x268a43(0x6a1))Scene_Message['prototype'][_0x268a43(0xb9e)]['call'](this),this[_0x268a43(0x4b1)]&&this[_0x268a43(0x4b1)][_0x268a43(0x593)](),BattleManager[_0x268a43(0x38c)]&&(_0x268a43(0x758)!=='PgkOm'?this['selectNextActor']():BattleManager[_0x268a43(0xcdf)]());else return this['currentAction']()&&this['currentAction']()['item']()&&!this[_0x268a43(0x509)]()[_0x268a43(0x854)]();}else _0x268a43(0x735)==='Hymbz'?this[_0x268a43(0x718)](this[_0x268a43(0x7a8)]):(VisuMZ[_0x268a43(0xce2)][_0x268a43(0x47e)][_0x268a43(0x2d7)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xa6d)],Scene_Battle[_0x1e608f(0xbe1)]['stop']=function(){const _0x533c38=_0x1e608f;if(SceneManager[_0x533c38(0xd1b)]())Scene_Message[_0x533c38(0xbe1)][_0x533c38(0xa6d)]['call'](this);else{if('rbhVe'===_0x533c38(0xb1c))VisuMZ[_0x533c38(0xce2)][_0x533c38(0x426)][_0x533c38(0x2d7)](this);else{if(_0x15e95a[_0x533c38(0x643)]()&&this['_tpbState']===_0x533c38(0xd36))return this['chantStyle']()?this[_0x533c38(0x509)]()&&this[_0x533c38(0x509)]()[_0x533c38(0xa0b)]()&&!this[_0x533c38(0x509)]()[_0x533c38(0x854)]():this['currentAction']()&&this[_0x533c38(0x509)]()[_0x533c38(0xa0b)]()&&!this[_0x533c38(0x509)]()[_0x533c38(0xd04)]();return![];}}},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_terminate']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xd29)],Scene_Battle['prototype'][_0x1e608f(0xd29)]=function(){const _0x1dcc1f=_0x1e608f;SceneManager[_0x1dcc1f(0xd1b)]()?Scene_Message['prototype'][_0x1dcc1f(0xd29)][_0x1dcc1f(0x2d7)](this):_0x1dcc1f(0x5ef)!==_0x1dcc1f(0x5ef)?_0x414b58[_0x1dcc1f(0x2e1)]([_0x549135]):VisuMZ[_0x1dcc1f(0xce2)]['Scene_Battle_terminate'][_0x1dcc1f(0x2d7)](this),$gameTemp[_0x1dcc1f(0x498)](),this[_0x1dcc1f(0x288)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x357)]=function(){const _0x40923c=_0x1e608f;if(ConfigManager[_0x40923c(0xd69)]&&ConfigManager[_0x40923c(0xb26)]!==undefined){if(_0x40923c(0x646)!==_0x40923c(0x57a))return ConfigManager[_0x40923c(0xb26)];else{_0x454869(_0x40923c(0x589)),_0x109031[_0x40923c(0x3ea)]();return;}}else{if(this[_0x40923c(0x687)]()==='border'){if(_0x40923c(0xa6e)===_0x40923c(0x862)){const _0x3e2cae=this['commandStyle'](),_0x561a67=_0xefd0dd['BattleCore']['Settings'][_0x40923c(0x4de)][_0x40923c(0xc8d)],_0x44d070=_0x3e2cae==='text'?_0x279843['item']:_0x40923c(0x30b)['format'](_0x561a67,_0x3f3069[_0x40923c(0xa0b)]),_0x1e7425=this['isItemCommandEnabled']();this['addCommand'](_0x44d070,_0x40923c(0xa0b),_0x1e7425);}else return![];}else{return Scene_Message[_0x40923c(0xbe1)][_0x40923c(0x357)][_0x40923c(0x2d7)](this);;}}},VisuMZ['BattleCore'][_0x1e608f(0xa7c)]=Scene_Battle[_0x1e608f(0xbe1)]['createAllWindows'],Scene_Battle['prototype'][_0x1e608f(0x40f)]=function(){const _0x1f8e6b=_0x1e608f;this['createEnemyNameContainer'](),VisuMZ[_0x1f8e6b(0xce2)][_0x1f8e6b(0xa7c)]['call'](this),this['createAutoBattleWindow']();},VisuMZ['BattleCore'][_0x1e608f(0x3f2)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x780)],Scene_Battle[_0x1e608f(0xbe1)]['createEnemyWindow']=function(){const _0x16f1e2=_0x1e608f;VisuMZ[_0x16f1e2(0xce2)][_0x16f1e2(0x3f2)][_0x16f1e2(0x2d7)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x43c)]=function(){const _0x2ca9a0=_0x1e608f;this[_0x2ca9a0(0x1ac)](!![]),this[_0x2ca9a0(0x1ac)](![]);},Scene_Battle['prototype']['multiTargetWindowRect']=function(_0x1577c3){const _0x343434=_0x1e608f,_0x3313a3=Window_BattleMultiTarget['WIDTH'],_0x50ff39=this[_0x343434(0x248)](0x1,!![]);let _0x2d0293=_0x1577c3?Graphics[_0x343434(0x748)]-_0x3313a3:0x0;_0x2d0293+=_0x1577c3?Window_BattleMultiTarget[_0x343434(0x561)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x3c112b=[_0x343434(0x44e)][_0x343434(0xc3d)](this[_0x343434(0x687)]())?0x0:this[_0x343434(0x496)][_0x343434(0x96b)];let _0x522ced=Graphics[_0x343434(0x865)]-_0x3c112b-_0x50ff39;return _0x522ced+=_0x1577c3?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x343434(0x5a5)],new Rectangle(_0x2d0293,_0x522ced,_0x3313a3,_0x50ff39);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1ac)]=function(_0x2933a8){const _0x57768f=_0x1e608f,_0x369f86=this[_0x57768f(0x803)](_0x2933a8),_0x2f6bfe=new Window_BattleMultiTarget(_0x369f86,_0x2933a8);this[_0x57768f(0x143)](_0x2f6bfe),_0x2933a8?this[_0x57768f(0x3f0)]=_0x2f6bfe:this['_enemyMultiTargetWindow']=_0x2f6bfe;},VisuMZ['BattleCore'][_0x1e608f(0x988)]=Scene_Battle[_0x1e608f(0xbe1)]['createCancelButton'],Scene_Battle['prototype'][_0x1e608f(0x345)]=function(){const _0x5065a0=_0x1e608f;VisuMZ['BattleCore'][_0x5065a0(0x988)][_0x5065a0(0x2d7)](this),this[_0x5065a0(0x687)]()==='border'&&this[_0x5065a0(0xb4d)]();},Scene_Battle['prototype']['setVisibleUI']=function(_0x36b5e6){const _0x538a9f=_0x1e608f;_0x36b5e6?_0x538a9f(0xd78)!==_0x538a9f(0xbee)?(this['_windowLayer']['x']=(Graphics[_0x538a9f(0x78f)]-Graphics[_0x538a9f(0x748)])/0x2,this[_0x538a9f(0xa9c)]['y']=(Graphics[_0x538a9f(0x96b)]-Graphics[_0x538a9f(0x865)])/0x2):this['_distortionSprite'][_0x538a9f(0x9a5)](this[_0x538a9f(0xc27)]):_0x538a9f(0x22a)==='xcWxm'?(this[_0x538a9f(0xa9c)]['x']=Graphics['width']*0xa,this[_0x538a9f(0xa9c)]['y']=Graphics['height']*0xa):this[_0x538a9f(0x79f)]=_0x3070c6;},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x49f)],Scene_Battle['prototype'][_0x1e608f(0x49f)]=function(){const _0x468de2=_0x1e608f,_0x1b30b1=BattleManager[_0x468de2(0x532)]();VisuMZ['BattleCore'][_0x468de2(0xb06)][_0x468de2(0x2d7)](this);if(_0x1b30b1){if(_0x468de2(0xc14)===_0x468de2(0x555)){const _0x2d9f93=_0x468de2(0x16f)[_0x468de2(0x92f)](_0x351e98['actorId']()),_0x21cdde=this[_0x468de2(0x6ba)](_0x2d9f93,_0x36a617),_0x13403d=_0x5e9705['getBattlePortraitFilename']();_0x13403d!==''?_0x21cdde[_0x468de2(0x34b)]=_0x35bdf8[_0x468de2(0x17f)](_0x13403d):_0x21cdde['bitmap']=_0xc99379[_0x468de2(0x48c)];const _0x303b65=this[_0x468de2(0x372)](_0x3a2a04);_0x21cdde['anchor']['x']=0.5,_0x21cdde[_0x468de2(0x2f7)]['y']=0x1;let _0x4bf718=_0x673831['round'](_0x303b65['x']+_0x303b65[_0x468de2(0x78f)]/0x2)+this[_0x468de2(0x85a)];_0x4bf718+=_0x31c090[_0x468de2(0x4e0)]();let _0x13b00b=_0x3332b6['round'](this[_0x468de2(0x96b)]);_0x13b00b+=_0x464039['getBattlePortraitOffsetY'](),_0x21cdde[_0x468de2(0xc35)](_0x4bf718,_0x13b00b);const _0x316217=_0x4b5b37[_0x468de2(0xce2)][_0x468de2(0x4a9)][_0x468de2(0x51a)]['PortraitScale'];_0x21cdde[_0x468de2(0x6e9)]['x']=_0x316217,_0x21cdde['scale']['y']=_0x316217,_0x21cdde[_0x468de2(0x478)]();}else{if(_0x1b30b1===BattleManager['actor']())return;if(_0x1b30b1===BattleManager[_0x468de2(0x7cb)])return;if(_0x1b30b1[_0x468de2(0x8dd)]())_0x1b30b1['battler']()[_0x468de2(0x56f)]();}}},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x919)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x919)]=function(){const _0x5cfe63=_0x1e608f,_0x49d83e=BattleManager[_0x5cfe63(0x532)]();if(_0x49d83e&&_0x49d83e['battler'])_0x49d83e['battler']()[_0x5cfe63(0x56f)]();VisuMZ[_0x5cfe63(0xce2)][_0x5cfe63(0x68a)]['call'](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xcda)]=Scene_Battle[_0x1e608f(0xbe1)]['logWindowRect'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x7d8)]=function(){const _0x17caa9=_0x1e608f;if(VisuMZ['BattleCore'][_0x17caa9(0x4a9)][_0x17caa9(0x409)][_0x17caa9(0x301)])return VisuMZ[_0x17caa9(0xce2)][_0x17caa9(0x4a9)]['BattleLog'][_0x17caa9(0x301)][_0x17caa9(0x2d7)](this);return VisuMZ[_0x17caa9(0xce2)][_0x17caa9(0xcda)][_0x17caa9(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle['prototype'][_0x1e608f(0x10a)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x10a)]=function(){const _0x5f4ee9=_0x1e608f;VisuMZ[_0x5f4ee9(0xce2)][_0x5f4ee9(0xc48)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xd73)]=function(){const _0x1c9e88=_0x1e608f,_0x4f7b02=this['_partyCommandWindow'];_0x4f7b02[_0x1c9e88(0xb5a)](_0x1c9e88(0x685),this['commandAutoBattle'][_0x1c9e88(0xcdb)](this)),_0x4f7b02[_0x1c9e88(0xb5a)](_0x1c9e88(0xb5f),this[_0x1c9e88(0x27d)][_0x1c9e88(0xcdb)](this));const _0x15ce5a=this[_0x1c9e88(0x687)]();switch(_0x15ce5a){case'xp':case _0x1c9e88(0x3d5):return this[_0x1c9e88(0x65b)][_0x1c9e88(0x8cd)](0x1);break;}},Scene_Battle[_0x1e608f(0xbe1)]['commandAutoBattle']=function(){const _0x581ef1=_0x1e608f;BattleManager[_0x581ef1(0xb82)]=!![],$gameParty[_0x581ef1(0x231)](),this[_0x581ef1(0x49f)](),BattleManager[_0x581ef1(0x643)]()&&(BattleManager[_0x581ef1(0xaee)]=![]);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x27d)]=function(){const _0x5e8715=_0x1e608f;if(this['isQueueOptionsMenu']()){if(_0x5e8715(0xcc8)===_0x5e8715(0x88a))return this[_0x5e8715(0x1fd)](_0x3e69f0)-this[_0x5e8715(0x836)]();else this['_callSceneOptions']=!![],this[_0x5e8715(0xa66)][_0x5e8715(0xb79)](_0x5e8715(0xac5),VisuMZ['BattleCore'][_0x5e8715(0x4a9)][_0x5e8715(0x408)]['ActiveTpbOptionsMessage']);}else _0x5e8715(0x9fe)===_0x5e8715(0x9fe)?this[_0x5e8715(0x817)]():_0x563aea[_0x5e8715(0xce2)][_0x5e8715(0xbea)][_0x5e8715(0x2d7)](this,_0x4dd077);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xb36)]=function(){const _0x105c50=_0x1e608f;return BattleManager[_0x105c50(0x3a2)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x3ee481=_0x1e608f;this[_0x3ee481(0x86f)]=![],this['_spriteset'][_0x3ee481(0x593)](),this[_0x3ee481(0xa9c)][_0x3ee481(0x734)]=![];if(BattleManager[_0x3ee481(0x7bc)]())($dataSystem['battleback1Name']||$dataSystem['battleback2Name'])&&SceneManager[_0x3ee481(0xc4c)]();else{if($gameMap[_0x3ee481(0x626)]()||$gameMap[_0x3ee481(0x8d3)]()){if('jKnjS'===_0x3ee481(0x13d))SceneManager[_0x3ee481(0xc4c)]();else{if(_0x4cf0db['BTestBypass']&&_0x55182a[_0x3ee481(0x7bc)]())return!![];if(this[_0x3ee481(0x606)][_0x3ee481(0xa18)])return![];return this['_battler'][_0x3ee481(0xb67)]();}}}SceneManager['push'](Scene_Options),BattleManager[_0x3ee481(0x643)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager['actor']());},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x96c)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x4e5)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x4e5)]=function(){const _0x34ddbf=_0x1e608f;VisuMZ['BattleCore'][_0x34ddbf(0x96c)]['call'](this);if(this['_callSceneOptions']&&!BattleManager[_0x34ddbf(0x7cb)])this['callOptions']();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle[_0x1e608f(0xbe1)]['update'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x4b36cd=_0x1e608f;VisuMZ[_0x4b36cd(0xce2)][_0x4b36cd(0x5d5)][_0x4b36cd(0x2d7)](this),this[_0x4b36cd(0x3b1)]();},Scene_Battle['prototype']['createAutoBattleWindow']=function(){const _0x129f25=_0x1e608f,_0x31db77=this[_0x129f25(0x6e8)]();this[_0x129f25(0x5dd)]=new Window_AutoBattleCancel(_0x31db77),this[_0x129f25(0x5dd)][_0x129f25(0x64e)](),this[_0x129f25(0x9a5)](this[_0x129f25(0x5dd)]);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x6e8)]=function(){const _0x49801a=_0x1e608f;return VisuMZ[_0x49801a(0xce2)][_0x49801a(0x4a9)][_0x49801a(0x6b5)][_0x49801a(0xd5f)][_0x49801a(0x2d7)](this);},Scene_Battle[_0x1e608f(0xbe1)]['clearOnceParallelInterpreters']=function(){const _0x2dd540=_0x1e608f;this[_0x2dd540(0x4d7)]=[];},Scene_Battle['prototype'][_0x1e608f(0x3b1)]=function(){const _0x446722=_0x1e608f;if(!this[_0x446722(0x4d7)])return;for(const _0x1f16b7 of this[_0x446722(0x4d7)]){_0x1f16b7&&('TdpkD'==='Xqmxu'?(_0x539a92[_0x446722(0xce2)][_0x446722(0x551)][_0x446722(0x2d7)](this),this[_0x446722(0x269)](),this[_0x446722(0xb29)]()):_0x1f16b7['update']());}},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1aa)]=function(_0x5980f5){const _0xc202e2=_0x1e608f,_0x45526a=$dataCommonEvents[_0x5980f5];if(!_0x45526a)return;const _0x1a8c3f=new Game_BattleOnceParallelInterpreter();this[_0xc202e2(0x4ab)](_0x1a8c3f),_0x1a8c3f['setCommonEvent'](_0x5980f5);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x4ab)]=function(_0x5bb094){const _0x222c91=_0x1e608f;this['_onceParallelInterpreters']=this[_0x222c91(0x4d7)]||[],this['_onceParallelInterpreters'][_0x222c91(0xb79)](_0x5bb094);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x5e8)]=function(_0x3ffe77){const _0xceff19=_0x1e608f;this[_0xceff19(0x4d7)]=this[_0xceff19(0x4d7)]||[],this['_onceParallelInterpreters'][_0xceff19(0x569)](_0x3ffe77);},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0x389)]=function(){const _0x172471=_0x1e608f;for(const _0x343ee5 of this['troop']()['pages']){if('hyoku'!==_0x172471(0x72c)){if(!this[_0x172471(0xc3e)](_0x343ee5))continue;SceneManager[_0x172471(0x327)][_0x172471(0x1c5)](_0x343ee5);}else _0x22204d[_0x172471(0xd67)](_0x19124c),this[_0x172471(0xbda)](_0x107a43);}},Game_Troop[_0x1e608f(0xbe1)][_0x1e608f(0xc3e)]=function(_0x2eba06){const _0x18515a=_0x1e608f;if(!_0x2eba06)return;for(const _0x35e6a5 of _0x2eba06[_0x18515a(0x68e)]){if(_0x18515a(0x6bc)!==_0x18515a(0x6bc))return this[_0x18515a(0x5a9)]()&&!this[_0x18515a(0x302)]()?this[_0x18515a(0x2f2)]():_0x3fe1cf[_0x18515a(0xce2)][_0x18515a(0x9e0)][_0x18515a(0x2d7)](this);else{if([0x6c,0x198][_0x18515a(0xc3d)](_0x35e6a5[_0x18515a(0x24d)])){const _0x25cfc3=_0x35e6a5[_0x18515a(0x54c)][0x0];if(_0x25cfc3[_0x18515a(0x97b)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1c5)]=function(_0x5d5295){const _0x3aac8d=_0x1e608f;if(!_0x5d5295)return;const _0x2945c5=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x2945c5),_0x2945c5[_0x3aac8d(0x28a)](_0x5d5295);};function Game_BattleOnceParallelInterpreter(){const _0x5354b0=_0x1e608f;this[_0x5354b0(0xb89)](...arguments);}Game_BattleOnceParallelInterpreter[_0x1e608f(0xbe1)]=Object[_0x1e608f(0x770)](Game_Interpreter[_0x1e608f(0xbe1)]),Game_BattleOnceParallelInterpreter[_0x1e608f(0xbe1)][_0x1e608f(0x5c0)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x1e608f(0xbe1)][_0x1e608f(0xa0d)]=function(_0x43faf0){const _0x33f92b=_0x1e608f,_0x1c1b5a=$dataCommonEvents[_0x43faf0];if(_0x1c1b5a){if(_0x33f92b(0xaed)==='Iyopg')this[_0x33f92b(0x429)](_0x1c1b5a[_0x33f92b(0x68e)],0x0);else return![];}else{if(_0x33f92b(0x827)!==_0x33f92b(0x195))this[_0x33f92b(0xd29)]();else{if(!_0x3b7d1e['isSceneBattle']())return;if(!_0x10ca05[_0x33f92b(0x622)])return;if(!_0x46f1a4['isFTB']())return;_0x116c4f[_0x33f92b(0x47c)](_0x4fdb1c,_0x277274);const _0xd000e3=_0x26e6bd[_0x33f92b(0x353)];_0xec8b72[_0x33f92b(0x7cb)]&&_0x5d1c05['_subject'][_0x33f92b(0x406)]()[_0x33f92b(0x8d0)](_0xd000e3);}}},Game_BattleOnceParallelInterpreter[_0x1e608f(0xbe1)][_0x1e608f(0xd29)]=function(){const _0x477042=_0x1e608f;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x477042(0x327)]['removeOnceParallelInterpreter'](this),Game_Interpreter[_0x477042(0xbe1)][_0x477042(0xd29)][_0x477042(0x2d7)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x1e608f(0x28a)]=function(_0x4fb9aa){const _0x52b71d=_0x1e608f;if(_0x4fb9aa){if('WmpUQ'!==_0x52b71d(0x8ea)){const _0x263063=_0x2ceb40['indexOf'](_0x4bc093);return _0x263063>=0x0?[_0x3b4566[_0x263063+0x1]||_0x33a2c6]:[_0x57bb6e];}else this[_0x52b71d(0x429)](_0x4fb9aa[_0x52b71d(0x68e)],0x0);}else this['terminate']();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x376)]=function(){const _0x54e783=_0x1e608f;return VisuMZ[_0x54e783(0xce2)][_0x54e783(0x4a9)][_0x54e783(0x408)][_0x54e783(0x25b)];},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle['prototype'][_0x1e608f(0x671)],Scene_Battle[_0x1e608f(0xbe1)]['startPartyCommandSelection']=function(){const _0x53e699=_0x1e608f;this['isPartyCommandWindowDisabled']()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x53e699(0xce2)][_0x53e699(0x596)][_0x53e699(0x2d7)](this);},Scene_Battle[_0x1e608f(0xbe1)]['onDisabledPartyCommandSelection']=function(){const _0x22cf01=_0x1e608f;if(BattleManager[_0x22cf01(0xb8e)]())_0x22cf01(0x475)!==_0x22cf01(0xa4e)?this['selectNextCommand']():_0x510e8c[_0x22cf01(0x40e)](this[_0x22cf01(0xc9f)]);else BattleManager[_0x22cf01(0x643)]()&&VisuMZ['BattleCore'][_0x22cf01(0x596)][_0x22cf01(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa44)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x51b)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x51b)]=function(){const _0x5833dd=_0x1e608f;if(BattleManager[_0x5833dd(0x643)]()){if(_0x5833dd(0x8cc)===_0x5833dd(0x8cc))this[_0x5833dd(0x678)](),this[_0x5833dd(0x278)]();else{const _0x2d10c3=this['_commandNameWindow'],_0x4320ee=_0xecece9[_0x5833dd(0x7bf)](),_0x55bb8b=_0xfdc11b['x']+_0x4f6a94[_0x5833dd(0x14d)](_0x3af943[_0x5833dd(0x78f)]/0x2)+_0x4320ee;_0x2d10c3['x']=_0x2d10c3[_0x5833dd(0x78f)]/-0x2+_0x55bb8b,_0x2d10c3['y']=_0x163740[_0x5833dd(0x14d)](_0x42faad[_0x5833dd(0x96b)]/0x2);}}else VisuMZ[_0x5833dd(0xce2)][_0x5833dd(0xa44)][_0x5833dd(0x2d7)](this);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x678)]=function(){const _0x57528e=_0x1e608f;if(!VisuMZ[_0x57528e(0xce2)][_0x57528e(0xa1e)])return;if(Imported[_0x57528e(0x47f)]&&BattleManager[_0x57528e(0x45f)]())return;const _0x4e53a7=$gameParty[_0x57528e(0x588)]()[_0x57528e(0x9f1)](_0x5b735b=>_0x5b735b[_0x57528e(0x872)]()&&_0x5b735b[_0x57528e(0x67f)]());BattleManager[_0x57528e(0x6e3)]=_0x4e53a7[0x0]||null;if(BattleManager['_currentActor']){if(_0x57528e(0x3f3)===_0x57528e(0x3f3))BattleManager[_0x57528e(0x6e3)][_0x57528e(0xd7f)](_0x57528e(0x491));else{_0x193d56=_0x4d5adb['BattleCore']['JS'][_0x1e0f86]['call'](this,this[_0x57528e(0x8b4)](),_0x274c76,_0x31987d,_0x2074d8);if(_0x4e5c3c)_0x21f049=_0x1f0130;}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x291)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xc5e)],Scene_Battle['prototype'][_0x1e608f(0xc5e)]=function(){const _0x22ed0d=_0x1e608f;VisuMZ[_0x22ed0d(0xce2)][_0x22ed0d(0x291)][_0x22ed0d(0x2d7)](this);if(!BattleManager[_0x22ed0d(0x643)]())BattleManager['_currentActor']=null;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3b8)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x24a)],Scene_Battle[_0x1e608f(0xbe1)]['createActorCommandWindow']=function(){const _0x547f09=_0x1e608f;VisuMZ[_0x547f09(0xce2)][_0x547f09(0x3b8)][_0x547f09(0x2d7)](this),this[_0x547f09(0xaae)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xaae)]=function(){const _0x22a3e9=_0x1e608f,_0x590e57=this[_0x22a3e9(0x519)];_0x590e57[_0x22a3e9(0xb5a)](_0x22a3e9(0x5aa),this[_0x22a3e9(0xca2)][_0x22a3e9(0xcdb)](this)),_0x590e57[_0x22a3e9(0xb5a)]('autoBattle',this[_0x22a3e9(0xd3d)][_0x22a3e9(0xcdb)](this)),_0x590e57[_0x22a3e9(0xb5a)](_0x22a3e9(0x1d9),this[_0x22a3e9(0x2d4)][_0x22a3e9(0xcdb)](this)),BattleManager[_0x22a3e9(0x643)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x590e57[_0x22a3e9(0x50c)][_0x22a3e9(0xc6e)]:_0x590e57[_0x22a3e9(0xb5a)](_0x22a3e9(0xc6e),this[_0x22a3e9(0xae3)][_0x22a3e9(0xcdb)](this)));},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xca2)]=function(){this['commandEscape']();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xd3d)]=function(){const _0x35a929=_0x1e608f;BattleManager[_0x35a929(0x532)]()['makeAutoBattleActions'](),BattleManager[_0x35a929(0x79a)](),BattleManager[_0x35a929(0xac1)](),this[_0x35a929(0x8b6)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x2d4)]=function(){const _0x2305e6=_0x1e608f,_0xc4ca78=BattleManager[_0x2305e6(0x9cc)](),_0x30407b=this[_0x2305e6(0x519)][_0x2305e6(0x715)]();_0xc4ca78[_0x2305e6(0x5cf)](_0x30407b),BattleManager['actor']()[_0x2305e6(0x7b3)]($dataSkills[_0x30407b]),this[_0x2305e6(0x13e)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xae3)]=function(){const _0x50f65c=_0x1e608f;if(this[_0x50f65c(0x6fd)]())_0x50f65c(0x9e5)!==_0x50f65c(0x9e5)?(_0x121ff0=_0x48e6bf['battler']()[_0x50f65c(0x565)],_0x3e8150=_0xe01a12['battler']()[_0x50f65c(0x37b)]):this[_0x50f65c(0x7ef)]();else{if(_0x50f65c(0x861)!==_0x50f65c(0x2f9))this['processActorCommandCancelTPB']();else{const _0x36c053=_0x36da36(_0xcaf765['$1'])[_0x50f65c(0xb11)]()[_0x50f65c(0x2a9)]();if(_0x36c053===_0x50f65c(0x77e))return _0x50f65c(0x77e);if(_0x298fc0['DamageStyles'][_0x36c053])return _0x36c053;}}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa1e)]=![],Scene_Battle['prototype'][_0x1e608f(0x6fd)]=function(){const _0x4b58de=_0x1e608f;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return'vDLco'===_0x4b58de(0x6be)?_0xcb36b0[_0x4b58de(0x171)]-_0x4556b3[_0x4b58de(0x171)]:![];else{if(!VisuMZ['BattleCore'][_0x4b58de(0xa1e)])return![];const _0x1cc9a0=$gameParty[_0x4b58de(0x588)]()[_0x4b58de(0x9f1)](_0x5da518=>_0x5da518['isTpbCharged']()&&_0x5da518[_0x4b58de(0x67f)]());return _0x1cc9a0[_0x4b58de(0xcaf)]>0x0&&BattleManager[_0x4b58de(0x532)]()!==_0x1cc9a0[_0x1cc9a0[_0x4b58de(0xcaf)]-0x1];}},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x7ef)]=function(){const _0x1c4789=_0x1e608f,_0x59091b=BattleManager[_0x1c4789(0x532)](),_0x38b7fa=_0x59091b[_0x1c4789(0x8dd)]();if(_0x38b7fa)_0x38b7fa[_0x1c4789(0x56f)]();const _0x2a3f98=$gameParty[_0x1c4789(0x588)]()['filter'](_0x36459b=>_0x36459b[_0x1c4789(0x872)]()&&_0x36459b[_0x1c4789(0x67f)]()),_0x40ab28=_0x2a3f98[_0x1c4789(0x8fc)](_0x59091b),_0x10fe54=_0x2a3f98[_0x40ab28+0x1];BattleManager[_0x1c4789(0x6e3)]=_0x10fe54||null;if(_0x10fe54)_0x10fe54['setActionState'](_0x1c4789(0x491));_0x59091b[_0x1c4789(0xd7f)](_0x1c4789(0x35c)),this[_0x1c4789(0x8b6)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x91d)]=function(){const _0xcb8c74=_0x1e608f;this[_0xcb8c74(0x65b)][_0xcb8c74(0x429)](),this[_0xcb8c74(0x519)][_0xcb8c74(0x92a)]();if(!VisuMZ[_0xcb8c74(0xce2)][_0xcb8c74(0xa1e)])return;if(Imported[_0xcb8c74(0x47f)]&&BattleManager[_0xcb8c74(0x45f)]())return;if(BattleManager[_0xcb8c74(0x6e3)]){if('hBcAw'===_0xcb8c74(0x764)){const _0x429d7f=_0x5d5606['attackAnimationId1']();_0x429d7f<=0x0?_0x45cb28[_0xcb8c74(0xd2b)]():this[_0xcb8c74(0x884)](_0x41af9d,_0x429d7f);}else{BattleManager[_0xcb8c74(0x6e3)][_0xcb8c74(0xd7f)]('undecided');const _0x6ca3c8=BattleManager[_0xcb8c74(0x6e3)][_0xcb8c74(0x8dd)]();if(_0x6ca3c8)_0x6ca3c8[_0xcb8c74(0x56f)]();}}BattleManager[_0xcb8c74(0x6e3)]=null;},VisuMZ['BattleCore'][_0x1e608f(0xb23)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xa30)],Scene_Battle['prototype']['createHelpWindow']=function(){const _0x40abcf=_0x1e608f;VisuMZ['BattleCore'][_0x40abcf(0xb23)][_0x40abcf(0x2d7)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x9fd)]=function(){const _0x3a6bad=_0x1e608f;this[_0x3a6bad(0x519)][_0x3a6bad(0xc87)](this[_0x3a6bad(0x482)]),this[_0x3a6bad(0x65b)][_0x3a6bad(0xc87)](this['_helpWindow']);},Scene_Battle[_0x1e608f(0xbe1)]['battleLayoutStyle']=function(){const _0x4de180=_0x1e608f;if($gameTemp[_0x4de180(0x36d)]!==undefined){if(_0x4de180(0xd76)===_0x4de180(0x401)){const _0x169802=_0x59589f[_0xe32b32];_0x169802?this[_0x4de180(0x429)](_0x169802[_0x4de180(0x68e)],0x0):this[_0x4de180(0xd29)]();}else return $gameTemp[_0x4de180(0x36d)];}if(this['_battleLayoutStyle'])return this[_0x4de180(0x675)];this[_0x4de180(0x675)]=VisuMZ[_0x4de180(0xce2)][_0x4de180(0x4a9)][_0x4de180(0x51a)]['Style'][_0x4de180(0x377)]()[_0x4de180(0x2a9)]();this[_0x4de180(0x675)]===_0x4de180(0x247)&&!Imported[_0x4de180(0xb49)]&&(this[_0x4de180(0x675)]=_0x4de180(0x702));if(this[_0x4de180(0x675)]===_0x4de180(0x44e)&&!Imported[_0x4de180(0xb5d)]){if(_0x4de180(0xba6)===_0x4de180(0xc30)){this['bitmap'][_0x4de180(0x639)]();const _0x478ddd=this[_0x4de180(0x117)]();!_0x1b70b9(_0x478ddd)&&this['drawGauge']();}else this['_battleLayoutStyle']='default';}return this[_0x4de180(0x675)];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x71d)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x271)],Scene_Battle[_0x1e608f(0xbe1)]['windowAreaHeight']=function(){const _0x165951=_0x1e608f,_0xda04c=this[_0x165951(0x687)]();switch(_0xda04c){case _0x165951(0x68e):return this[_0x165951(0x248)](Math[_0x165951(0x127)](0x1,$gameParty[_0x165951(0xcfa)]()),!![]);break;default:return VisuMZ[_0x165951(0xce2)][_0x165951(0x71d)]['call'](this);break;}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x179)]=Scene_Battle[_0x1e608f(0xbe1)]['helpWindowRect'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x9e4)]=function(){const _0x4a2226=_0x1e608f,_0x191dbe=this[_0x4a2226(0x687)]();switch(_0x191dbe){case _0x4a2226(0xd11):return this[_0x4a2226(0x8f8)]();break;case _0x4a2226(0x702):case'list':case'xp':case _0x4a2226(0x3d5):default:return VisuMZ['BattleCore'][_0x4a2226(0x179)][_0x4a2226(0x2d7)](this);break;}},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x4d8)]=function(){const _0x9c0cc6=_0x1e608f,_0x2aea4c=this[_0x9c0cc6(0x687)]();switch(_0x2aea4c){case'xp':case _0x9c0cc6(0x3d5):return this[_0x9c0cc6(0x763)]();break;case _0x9c0cc6(0xd11):return this['statusWindowRectBorderStyle']();break;case'default':case _0x9c0cc6(0x68e):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ['BattleCore'][_0x1e608f(0x99c)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1f1)],Scene_Battle['prototype']['partyCommandWindowRect']=function(){const _0x2b6716=_0x1e608f,_0x3afbfd=this[_0x2b6716(0x687)]();switch(_0x3afbfd){case'xp':case _0x2b6716(0x3d5):return this['partyCommandWindowRectXPStyle']();break;case'border':return this[_0x2b6716(0x92d)]();case _0x2b6716(0x702):case _0x2b6716(0x68e):default:return this[_0x2b6716(0x916)]();break;}},Scene_Battle[_0x1e608f(0xbe1)]['partyCommandWindowRectDefaultStyle']=function(){const _0x11758f=_0x1e608f,_0x34df7f=VisuMZ[_0x11758f(0xce2)][_0x11758f(0x4a9)][_0x11758f(0x51a)],_0x91c433=_0x34df7f[_0x11758f(0x428)]||0xc0,_0x1a04ed=this['windowAreaHeight'](),_0x5582f7=this[_0x11758f(0x357)]()?Graphics[_0x11758f(0x748)]-_0x91c433:0x0,_0x50bd89=Graphics['boxHeight']-_0x1a04ed;return new Rectangle(_0x5582f7,_0x50bd89,_0x91c433,_0x1a04ed);},Scene_Battle[_0x1e608f(0xbe1)]['actorCommandWindowRect']=function(){const _0x5b6adb=_0x1e608f;return this[_0x5b6adb(0x1f1)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x73f)]=Scene_Battle[_0x1e608f(0xbe1)]['updateStatusWindowPosition'],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xcb9)]=function(){const _0x415e3e=_0x1e608f,_0x39419e=this['battleLayoutStyle']();switch(_0x39419e){case'xp':case _0x415e3e(0x3d5):case'border':break;case _0x415e3e(0x702):case _0x415e3e(0x68e):default:VisuMZ[_0x415e3e(0xce2)]['Scene_Battle_updateStatusWindowPosition'][_0x415e3e(0x2d7)](this);break;}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc78)]=Scene_Battle['prototype'][_0x1e608f(0x912)],Scene_Battle['prototype']['startActorSelection']=function(){const _0x255ae7=_0x1e608f;VisuMZ[_0x255ae7(0xce2)][_0x255ae7(0xc78)]['call'](this),this[_0x255ae7(0x4e6)]();},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x338)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x338)]=function(){const _0x4cfd57=_0x1e608f;VisuMZ[_0x4cfd57(0xce2)][_0x4cfd57(0x664)]['call'](this),this[_0x4cfd57(0x5fc)]['autoSelect'](),this[_0x4cfd57(0x4e6)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x4e6)]=function(){const _0x23b90d=_0x1e608f,_0xf31d0b=this[_0x23b90d(0x687)]();['xp','portrait',_0x23b90d(0xd11)][_0x23b90d(0xc3d)](_0xf31d0b)&&(_0x23b90d(0x7ca)===_0x23b90d(0x7ca)?this[_0x23b90d(0x519)]['close']():_0x25fbae[_0x23b90d(0x69b)]=[]),(_0xf31d0b==='border'||this[_0x23b90d(0x281)]())&&(this[_0x23b90d(0x2ee)]['close'](),this[_0x23b90d(0x1cf)][_0x23b90d(0x92a)]());},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x6c8)]=Scene_Battle[_0x1e608f(0xbe1)]['onActorOk'],Scene_Battle['prototype']['onActorOk']=function(){const _0x5258ef=_0x1e608f;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x5258ef(0x2d7)](this),this[_0x5258ef(0x3e9)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x6ac)]=function(){const _0x28034b=_0x1e608f;return[_0x28034b(0x16c),'guard',_0x28034b(0x1d9)]['includes'](this[_0x28034b(0x519)][_0x28034b(0x5ca)]());},VisuMZ['BattleCore'][_0x1e608f(0x505)]=Scene_Battle['prototype'][_0x1e608f(0x2a8)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x5576bf=_0x1e608f;this[_0x5576bf(0x6ac)]()?(this['_statusWindow'][_0x5576bf(0x478)](),this[_0x5576bf(0x54e)][_0x5576bf(0x64e)](),this[_0x5576bf(0x519)][_0x5576bf(0x8ad)]()):VisuMZ[_0x5576bf(0xce2)][_0x5576bf(0x505)]['call'](this),this[_0x5576bf(0x1c8)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x8ff)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xa0f)],Scene_Battle[_0x1e608f(0xbe1)]['onEnemyOk']=function(){const _0x5af571=_0x1e608f,_0x4b26e2=BattleManager[_0x5af571(0x9cc)]();_0x4b26e2[_0x5af571(0x3e2)](this['_enemyWindow'][_0x5af571(0x366)]()),this[_0x5af571(0x5fc)][_0x5af571(0xce0)](),VisuMZ[_0x5af571(0xce2)][_0x5af571(0x8ff)][_0x5af571(0x2d7)](this),this[_0x5af571(0x3e9)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x30c)]=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle['prototype'][_0x1e608f(0x857)]=function(){const _0x4bae32=_0x1e608f;this[_0x4bae32(0x6ac)]()?_0x4bae32(0x863)!=='eMygS'?(this[_0x4bae32(0x496)][_0x4bae32(0x478)](),this[_0x4bae32(0x5fc)]['hide'](),this['_actorCommandWindow'][_0x4bae32(0x8ad)]()):(this[_0x4bae32(0x1cc)]=new _0xb4c212(),this[_0x4bae32(0x9a5)](this[_0x4bae32(0x1cc)])):_0x4bae32(0x89d)!==_0x4bae32(0x89d)?(_0x59d342['prototype'][_0x4bae32(0x4d1)][_0x4bae32(0x2d7)](this),this[_0x4bae32(0x647)]()):VisuMZ[_0x4bae32(0xce2)][_0x4bae32(0x30c)]['call'](this),this[_0x4bae32(0x1c8)](),this[_0x4bae32(0x5fc)][_0x4bae32(0xce0)]();},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x3e9)]=function(){const _0xeb581=_0x1e608f,_0x4fbdf1=this[_0xeb581(0x687)]();if(_0x4fbdf1===_0xeb581(0xd11)||this[_0xeb581(0x281)]()){if(_0xeb581(0xa3b)===_0xeb581(0xa3b))this[_0xeb581(0x2ee)][_0xeb581(0x9ff)](),this[_0xeb581(0x2ee)]['active']&&('YLVhH'!=='SYPZo'?this[_0xeb581(0x2ee)][_0xeb581(0x478)]():this[_0xeb581(0x6e3)]=null),this[_0xeb581(0x1cf)][_0xeb581(0x9ff)](),this[_0xeb581(0x1cf)]['active']&&(_0xeb581(0xb3d)===_0xeb581(0x58b)?this[_0xeb581(0xb79)](_0xeb581(0xaa8),_0x1ccd82,_0x54acfd):this[_0xeb581(0x1cf)][_0xeb581(0x478)]());else{if(this[_0xeb581(0x7dd)]())this[_0xeb581(0xc7b)][_0xeb581(0x8d4)](_0x4628b5);}}},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1c8)]=function(){const _0x257324=_0x1e608f,_0x19b3d6=this[_0x257324(0x687)]();if(['xp',_0x257324(0x3d5),_0x257324(0xd11)]['includes'](_0x19b3d6)){if(_0x257324(0x529)==='sAEPf')this[_0x257324(0x519)][_0x257324(0x9ff)]();else return _0x1f302d[_0x257324(0x349)]();}this[_0x257324(0x3e9)]();},Scene_Battle[_0x1e608f(0xbe1)]['statusWindowRectDefaultStyle']=function(){const _0xe4ae6c=_0x1e608f,_0x30c084=VisuMZ['BattleCore'][_0xe4ae6c(0x4a9)][_0xe4ae6c(0x51a)],_0x446409=Window_BattleStatus[_0xe4ae6c(0xbe1)]['extraHeight'](),_0x51a4fc=Graphics[_0xe4ae6c(0x748)]-(_0x30c084[_0xe4ae6c(0x428)]||0xc0),_0x53dc4e=this[_0xe4ae6c(0x271)]()+_0x446409,_0x4de56b=this[_0xe4ae6c(0x357)]()?0x0:Graphics['boxWidth']-_0x51a4fc,_0x4ee68f=Graphics[_0xe4ae6c(0x865)]-_0x53dc4e+_0x446409;return new Rectangle(_0x4de56b,_0x4ee68f,_0x51a4fc,_0x53dc4e);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x763)]=function(){const _0x121b15=_0x1e608f,_0xa88fdb=Window_BattleStatus['prototype']['extraHeight'](),_0x543c92=Graphics['boxWidth'],_0x51d28e=this['windowAreaHeight']()+_0xa88fdb,_0x34c806=0x0,_0x2125b6=Graphics[_0x121b15(0x865)]-_0x51d28e+_0xa88fdb;return new Rectangle(_0x34c806,_0x2125b6,_0x543c92,_0x51d28e);},Scene_Battle[_0x1e608f(0xbe1)]['partyCommandWindowRectXPStyle']=function(){const _0x358a25=_0x1e608f,_0xfacb3a=Graphics['boxWidth']/0x2,_0x5b6c08=this[_0x358a25(0x248)](VisuMZ[_0x358a25(0xce2)]['Settings'][_0x358a25(0x51a)]['XPActorCommandLines'],!![]),_0x4f0053=Math[_0x358a25(0x1a5)]((Graphics[_0x358a25(0x748)]-_0xfacb3a)/0x2),_0xa7fb47=Graphics[_0x358a25(0x865)]-_0x5b6c08-this['statusWindowRectXPStyle']()['height'];return new Rectangle(_0x4f0053,_0xa7fb47,_0xfacb3a,_0x5b6c08);},Scene_Battle[_0x1e608f(0xbe1)]['helpWindowRectBorderStyle']=function(){const _0x3456d4=_0x1e608f,_0x18e9b5=Graphics['width'],_0x3938ff=Math[_0x3456d4(0x1a5)]((Graphics[_0x3456d4(0x748)]-_0x18e9b5)/0x2),_0x4554b1=this[_0x3456d4(0x704)](),_0x469d9a=(Graphics['height']-Graphics[_0x3456d4(0x865)])/-0x2;return new Rectangle(_0x3938ff,_0x469d9a,_0x18e9b5,_0x4554b1);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x56b)]=function(){const _0x244bd0=_0x1e608f,_0x318845=Graphics['width'],_0x2ec3e6=Math[_0x244bd0(0x1a5)]((Graphics[_0x244bd0(0x748)]-_0x318845)/0x2),_0x52f752=this[_0x244bd0(0x248)](0x4,!![]),_0x44fedc=Graphics[_0x244bd0(0x865)]-_0x52f752+(Graphics['height']-Graphics[_0x244bd0(0x865)])/0x2;return new Rectangle(_0x2ec3e6,_0x44fedc,_0x318845,_0x52f752);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x92d)]=function(){const _0x5b6c8d=_0x1e608f,_0x1e0dd6=Math[_0x5b6c8d(0x14d)](Graphics['width']/0x3),_0x397051=this[_0x5b6c8d(0x357)]()?(Graphics[_0x5b6c8d(0x78f)]+Graphics[_0x5b6c8d(0x748)])/0x2-_0x1e0dd6:(Graphics[_0x5b6c8d(0x78f)]-Graphics[_0x5b6c8d(0x748)])/-0x2,_0x5bdad1=this[_0x5b6c8d(0x8f8)](),_0x171ac5=_0x5bdad1['y']+_0x5bdad1['height'],_0x15c561=this[_0x5b6c8d(0x56b)](),_0x5f4a1d=_0x15c561['y']-_0x171ac5;return new Rectangle(_0x397051,_0x171ac5,_0x1e0dd6,_0x5f4a1d);},Scene_Battle[_0x1e608f(0xbe1)]['skillItemWindowRectBorderStyle']=function(){const _0x397a75=_0x1e608f,_0x4b558d=Math['ceil'](Graphics[_0x397a75(0x78f)]/0x3),_0x26ee1b=Math[_0x397a75(0x1a5)]((Graphics[_0x397a75(0x748)]-_0x4b558d)/0x2),_0x4ff9a1=this['partyCommandWindowRectBorderStyle'](),_0xfa69fc=_0x4ff9a1['y'],_0x3dd119=_0x4ff9a1[_0x397a75(0x96b)];return new Rectangle(_0x26ee1b,_0xfa69fc,_0x4b558d,_0x3dd119);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xb4d)]=function(){const _0x58b9e8=_0x1e608f;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x58b9e8(0x482)][_0x58b9e8(0x96b)],this[_0x58b9e8(0x357)]()?this[_0x58b9e8(0x687)]()===_0x58b9e8(0xd11)?this[_0x58b9e8(0x840)]['x']=0x8:this['_cancelButton']['x']=-this[_0x58b9e8(0x840)][_0x58b9e8(0x78f)]-0x4:this[_0x58b9e8(0x840)]['x']=Graphics[_0x58b9e8(0x78f)]-(Graphics['width']-Graphics[_0x58b9e8(0x748)])/0x2-this[_0x58b9e8(0x840)]['width']-0x4;},VisuMZ['BattleCore'][_0x1e608f(0x50f)]=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x6dd)],Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x6dd)]=function(){const _0x24ecde=_0x1e608f;if(this[_0x24ecde(0x687)]()==='border')return this[_0x24ecde(0x209)]();else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():VisuMZ[_0x24ecde(0xce2)][_0x24ecde(0x50f)][_0x24ecde(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xab5)],Scene_Battle['prototype'][_0x1e608f(0xab5)]=function(){const _0x5b4b65=_0x1e608f;if(this[_0x5b4b65(0x687)]()===_0x5b4b65(0xd11)){if(_0x5b4b65(0x339)!==_0x5b4b65(0x339))this[_0x5b4b65(0x9b1)][_0x5b4b65(0xb79)](_0x290a56);else return this[_0x5b4b65(0x209)]();}else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():VisuMZ[_0x5b4b65(0xce2)][_0x5b4b65(0x4c6)][_0x5b4b65(0x2d7)](this);},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x281)]=function(){const _0x3af98d=_0x1e608f;return VisuMZ[_0x3af98d(0xce2)][_0x3af98d(0x4a9)]['BattleLayout'][_0x3af98d(0x6d0)];},Scene_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x945)]=function(){const _0x1fa64c=_0x1e608f,_0x23f556=Sprite_Button[_0x1fa64c(0xbe1)][_0x1fa64c(0x839)]()*0x2+0x4;let _0x46e7ee=Graphics['boxWidth']-_0x23f556;Imported[_0x1fa64c(0x8b3)]&&SceneManager['isSideButtonLayout']()&&(_0x1fa64c(0x554)!=='Mjjxc'?_0x46e7ee+=_0x23f556:_0x43fea3[_0x1fa64c(0x34b)]=new _0x145913(this[_0x1fa64c(0x78f)]||0x1,this[_0x1fa64c(0x96b)]||0x1));const _0x4f70c6=this['helpAreaBottom'](),_0x7d3acd=Graphics[_0x1fa64c(0x865)]-_0x4f70c6-this[_0x1fa64c(0x4d8)]()[_0x1fa64c(0x96b)]+Window_BattleStatus[_0x1fa64c(0xbe1)][_0x1fa64c(0x66b)](),_0x8193c0=0x0;return new Rectangle(_0x8193c0,_0x4f70c6,_0x46e7ee,_0x7d3acd);},Scene_Battle[_0x1e608f(0xbe1)]['createEnemyNameContainer']=function(){const _0x214013=_0x1e608f;if(!VisuMZ[_0x214013(0xce2)]['Settings'][_0x214013(0x662)][_0x214013(0x259)])return;this[_0x214013(0x5fd)]=new Sprite(),this[_0x214013(0x5fd)]['x']=this['_windowLayer']['x'],this[_0x214013(0x5fd)]['y']=this[_0x214013(0xa9c)]['y'];const _0x5aa570=this[_0x214013(0x76d)]['indexOf'](this['_windowLayer']);this['addChildAt'](this['_enemyNameContainer'],_0x5aa570);for(let _0x464f87=0x0;_0x464f87<0x8;_0x464f87++){const _0x22d6de=new Window_EnemyName(_0x464f87);this[_0x214013(0x5fd)]['addChild'](_0x22d6de);}},Sprite_Battler[_0x1e608f(0xa12)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0xa6a)][_0x1e608f(0x157)],VisuMZ[_0x1e608f(0xce2)]['Sprite_Battler_initMembers']=Sprite_Battler['prototype'][_0x1e608f(0x5a7)],Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x5a7)]=function(){const _0x5a27e6=_0x1e608f;VisuMZ['BattleCore'][_0x5a27e6(0xa10)][_0x5a27e6(0x2d7)](this),this['initMembersBattleCore']();if(this[_0x5a27e6(0x5c0)]===Sprite_Enemy)this['createShadowSprite']();this[_0x5a27e6(0x9dc)]();},Sprite_Battler[_0x1e608f(0xbe1)]['initMembersBattleCore']=function(){const _0x167ca8=_0x1e608f;this[_0x167ca8(0x8d8)]=0x0,this[_0x167ca8(0x171)]=0x0,this[_0x167ca8(0x9de)]=0x0,this[_0x167ca8(0xc4b)]=0x0,this[_0x167ca8(0x3da)]=0x0,this[_0x167ca8(0xd34)]=0x0,this[_0x167ca8(0x738)]=_0x167ca8(0xa73),this['_jumpHeight']=0x0,this[_0x167ca8(0xb4f)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this[_0x167ca8(0x87e)]=0xff,this[_0x167ca8(0x37d)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x167ca8(0x951)]=_0x167ca8(0xa73),this[_0x167ca8(0x7b7)]=0x0,this[_0x167ca8(0xbd5)]=0x0,this[_0x167ca8(0x168)]=0x0,this[_0x167ca8(0x697)]=0x0,this['_angleEasing']=_0x167ca8(0xa73),this[_0x167ca8(0x2c7)]=!![],this[_0x167ca8(0x8e5)]=0x0,this[_0x167ca8(0x7a1)]=0x0,this[_0x167ca8(0x388)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x167ca8(0x573)]=0x0,this[_0x167ca8(0x970)]=_0x167ca8(0xa73),this[_0x167ca8(0xb0e)]=0x1,this[_0x167ca8(0x856)]=0x1,this[_0x167ca8(0x126)]=0x1,this['_targetGrowY']=0x1,this[_0x167ca8(0xca7)]=0x0,this[_0x167ca8(0x38e)]=0x0,this[_0x167ca8(0xa38)]=_0x167ca8(0xa73),this[_0x167ca8(0x62e)]=0x1,this[_0x167ca8(0x455)]=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x167ca8(0xaf6)]=0x0,this['_homeEasing']=_0x167ca8(0xa73),this[_0x167ca8(0x96e)]=0x0,this[_0x167ca8(0xabb)]=0x0;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xa46)]=function(){const _0x59315e=_0x1e608f;this['_shadowSprite']=new Sprite(),this[_0x59315e(0x574)][_0x59315e(0x34b)]=ImageManager[_0x59315e(0x5f3)](_0x59315e(0x3b7)),this[_0x59315e(0x574)][_0x59315e(0x34b)][_0x59315e(0x9d1)]=VisuMZ['BattleCore']['Settings'][_0x59315e(0xa6a)]['SmoothImage'],this[_0x59315e(0x574)][_0x59315e(0x2f7)]['x']=0.5,this['_shadowSprite'][_0x59315e(0x2f7)]['y']=0.5,this[_0x59315e(0x574)]['y']=-0x2,this[_0x59315e(0x574)]['visible']=![],this[_0x59315e(0x9a5)](this[_0x59315e(0x574)]);},Sprite_Battler['prototype'][_0x1e608f(0x9dc)]=function(){const _0x3135e3=_0x1e608f;this['_distortionSprite']=new Sprite(),this[_0x3135e3(0x8e8)][_0x3135e3(0x2f7)]['x']=0.5,this[_0x3135e3(0x8e8)]['anchor']['y']=0.5,this[_0x3135e3(0x9a5)](this['_distortionSprite']);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x694)]=function(){const _0x50e349=_0x1e608f;if(!this[_0x50e349(0x8e8)])return;if(this[_0x50e349(0x574)]){const _0x3bcb21=this[_0x50e349(0x147)](this[_0x50e349(0x8e8)]);this['addChildAt'](this['_shadowSprite'],_0x3bcb21),this[_0x50e349(0xd14)]();}this[_0x50e349(0xc7b)]&&this[_0x50e349(0x8e8)][_0x50e349(0x9a5)](this[_0x50e349(0xc7b)]),this['_weaponSprite']&&this['_distortionSprite'][_0x50e349(0x9a5)](this[_0x50e349(0xcbb)]),this[_0x50e349(0xc27)]&&(_0x50e349(0xc92)!==_0x50e349(0x466)?this['_distortionSprite'][_0x50e349(0x9a5)](this[_0x50e349(0xc27)]):_0x1d01ce[_0x50e349(0xce2)]['ParseArmorNotetags']['call'](this,_0x5c31d8)),this[_0x50e349(0x113)]&&this[_0x50e349(0x8e8)]['addChild'](this['_injectAnimationSprite']),this[_0x50e349(0x328)]&&this[_0x50e349(0x8e8)][_0x50e349(0x9a5)](this[_0x50e349(0x328)]);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xd14)]=function(){const _0x2c15c4=_0x1e608f;if(!this[_0x2c15c4(0x574)])return;if(this['_battler']&&this[_0x2c15c4(0x606)][_0x2c15c4(0xa0c)]()){const _0x45b2f5=this['_shadowSprite'][_0x2c15c4(0x34b)];this[_0x2c15c4(0x574)]['setFrame'](0x0,0x0,_0x45b2f5[_0x2c15c4(0x78f)],_0x45b2f5[_0x2c15c4(0x96b)]);}else this['_shadowSprite'][_0x2c15c4(0x23f)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x1e608f(0xbe1)]['damageContainer']=function(){const _0x2f4306=_0x1e608f;return SceneManager[_0x2f4306(0x5f2)]()?SceneManager[_0x2f4306(0x327)][_0x2f4306(0x4b1)][_0x2f4306(0x67e)]:this[_0x2f4306(0xbb5)];},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x2ca)]=function(_0x3cd877,_0x58f3b8){const _0x2da7b9=_0x1e608f;if(!this[_0x2da7b9(0x606)]['isSpriteVisible']())return;if(BattleManager[_0x2da7b9(0x12d)]())return;const _0x148a88=VisuMZ[_0x2da7b9(0xce2)]['Settings']['Damage'],_0x28f8b1=new Sprite_Damage();_0x28f8b1['_duration']=_0x148a88[_0x2da7b9(0xcb6)],this['sortDamageSprites'](_0x28f8b1),_0x28f8b1[_0x2da7b9(0x2ca)](_0x3cd877,_0x58f3b8),this[_0x2da7b9(0x80f)](_0x28f8b1);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x8ca)]=function(_0x2db068,_0x5810ea,_0xfb571f){const _0x1da0c9=_0x1e608f;if(!this['_battler'][_0x1da0c9(0x9fa)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x57738e=VisuMZ['BattleCore']['Settings'][_0x1da0c9(0x2db)],_0x2c94b0=new Sprite_Damage();_0x2c94b0[_0x1da0c9(0x733)]=_0x57738e[_0x1da0c9(0xcb6)],this['sortDamageSprites'](_0x2c94b0),_0x2c94b0[_0x1da0c9(0x8ca)](_0x2db068,_0x5810ea,_0xfb571f),this[_0x1da0c9(0x80f)](_0x2c94b0);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xcec)]=function(){const _0x5dd234=_0x1e608f;if(!this[_0x5dd234(0x606)][_0x5dd234(0x948)]())return;while(this[_0x5dd234(0x606)][_0x5dd234(0x948)]()){if('vnltE'===_0x5dd234(0xabd)){if(this[_0x5dd234(0x606)]['isSpriteVisible']()){if(_0x5dd234(0xa67)===_0x5dd234(0xa67))this['createDamageSprite']();else return _0x4c6eb2[_0x5dd234(0x8dd)]()['_baseX']-_0x29ed92[_0x5dd234(0x8dd)]()[_0x5dd234(0x8d8)];}}else{if(this[_0x5dd234(0x532)]()['note'][_0x5dd234(0x97b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x418d7d(_0xed0c40['$1']);else{if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5ef294(_0x1eaec3['$2']);}return 0x0;}}this[_0x5dd234(0x606)][_0x5dd234(0x258)](),this[_0x5dd234(0x606)][_0x5dd234(0xd6a)]();},Sprite_Battler[_0x1e608f(0xbe1)]['createDamageSprite']=function(){const _0x436f70=_0x1e608f;if(BattleManager[_0x436f70(0x12d)]())return;const _0x4b769c=VisuMZ[_0x436f70(0xce2)]['Settings'][_0x436f70(0x2db)],_0x13cbdc=new Sprite_Damage();_0x13cbdc[_0x436f70(0x733)]=_0x4b769c[_0x436f70(0xcb6)],this[_0x436f70(0xb4b)](_0x13cbdc),_0x13cbdc[_0x436f70(0x429)](this[_0x436f70(0x606)]),_0x13cbdc['setupBattleCore'](this[_0x436f70(0x606)]),this['addDamageSprite'](_0x13cbdc);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x80f)]=function(_0x3dedc7){const _0x14172d=_0x1e608f;this[_0x14172d(0x222)][_0x14172d(0xb79)](_0x3dedc7);if(this['isShownOnBattlePortrait']()){if('GfDRE'===_0x14172d(0x688)){const _0xe98cdf=SceneManager['_scene'][_0x14172d(0x496)];if(_0xe98cdf)_0xe98cdf[_0x14172d(0x80f)](_0x3dedc7,this['_battler']);}else{if(!_0x24643a['isSceneBattle']())return;_0x78fb6['ConvertParams'](_0xfa8c68,_0x12a159);const _0x5c825f=_0x1f62b4[_0x14172d(0x68b)](),_0x4b3837=_0x6f9055[_0x14172d(0x599)](_0x1bc734['Targets']),_0x2730cd=_0x10a1b4['AnimationID'],_0x4a4089=_0x32c75f[_0x14172d(0x9af)];if(!_0x5c825f)return;_0x4a6df1[_0x14172d(0x156)](_0x4b3837,_0x2730cd,_0x4a4089);if(_0x40cf2b[_0x14172d(0xbae)])_0x5c825f[_0x14172d(0x7b2)]('battleAnimation');}}else{this['damageContainer']()['addChild'](_0x3dedc7);if(SceneManager[_0x14172d(0xcff)]())_0x3dedc7[_0x14172d(0x6e9)]['x']=-0x1;}},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xa1f)]=function(){const _0x44dc2a=_0x1e608f;return!$gameSystem[_0x44dc2a(0x3e6)]()&&this[_0x44dc2a(0x606)]&&this['_battler'][_0x44dc2a(0x28c)]();return!$gameSystem[_0x44dc2a(0x3e6)]()&&this['_battler']&&this[_0x44dc2a(0x606)][_0x44dc2a(0x28c)]()&&Window_BattleStatus[_0x44dc2a(0xbe1)]['battleLayoutStyle']()===_0x44dc2a(0x3d5);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xb4b)]=function(_0x42e542){const _0xbd6fab=_0x1e608f;this['alignBattleCoreDamageSprite'](_0x42e542,!![]);const _0x668e6b=VisuMZ[_0xbd6fab(0xce2)][_0xbd6fab(0x4a9)][_0xbd6fab(0x2db)],_0x460712=SceneManager[_0xbd6fab(0xcff)]()?-0x1:0x1;if(_0x668e6b['NewPopupBottom'])for(const _0x6b6fc7 of this[_0xbd6fab(0x222)]){_0x6b6fc7['x']+=_0x668e6b[_0xbd6fab(0x2bd)]*_0x460712,_0x6b6fc7['y']+=_0x668e6b['PopupShiftY'];}else{const _0x3f3074=this[_0xbd6fab(0x222)][this[_0xbd6fab(0x222)]['length']-0x1];if(_0x3f3074){if(_0xbd6fab(0x37e)===_0xbd6fab(0x37e))_0x42e542['x']=_0x3f3074['x']+_0x668e6b['PopupShiftX']*_0x460712,_0x42e542['y']=_0x3f3074['y']+_0x668e6b[_0xbd6fab(0x2de)];else return this[_0xbd6fab(0xae7)];}}},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xd56)]=function(_0x5dcdb3,_0x26776d){const _0x269dad=_0x1e608f,_0x2b0061=SceneManager[_0x269dad(0xcff)]()?-0x1:0x1;let _0x30922b=this[_0x269dad(0x8d8)];_0x30922b+=this[_0x269dad(0x1ad)]();let _0x1f1c3d=this[_0x269dad(0x171)];const _0x5a8b48=this[_0x269dad(0x8e8)][_0x269dad(0x6e9)]['y'];_0x1f1c3d+=this[_0x269dad(0xabf)]();const _0x467e3d=SceneManager['_scene'][_0x269dad(0x496)];if(_0x467e3d&&this['parent']===_0x467e3d){_0x30922b+=_0x467e3d['x']-this['damageOffsetX']();const _0x1e2335=_0x467e3d[_0x269dad(0x4a7)]()*0x3/0x4;_0x1f1c3d=_0x467e3d['y']+_0x1e2335,_0x1f1c3d=Math['min'](_0x1f1c3d,_0x467e3d['y']+this['y']-this['height']+_0x1e2335);}_0x5dcdb3['x']=Math[_0x269dad(0x1a5)](_0x30922b+this[_0x269dad(0xc43)]()*_0x2b0061),_0x5dcdb3['y']=Math[_0x269dad(0x1a5)](_0x1f1c3d+this[_0x269dad(0xc5b)]());},VisuMZ['BattleCore'][_0x1e608f(0xc86)]=Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc43)],Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc43)]=function(){const _0x56d643=_0x1e608f;let _0x5d4f0f=VisuMZ[_0x56d643(0xce2)][_0x56d643(0xc86)]['call'](this),_0x210dab=VisuMZ[_0x56d643(0xce2)][_0x56d643(0x4a9)][_0x56d643(0x2db)]['PopupOffsetX']||0x0;return Math[_0x56d643(0x1a5)](_0x5d4f0f+_0x210dab);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xb25)]=Sprite_Battler[_0x1e608f(0xbe1)]['damageOffsetY'],Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc5b)]=function(){const _0xc5cd92=_0x1e608f;let _0x258a3a=VisuMZ[_0xc5cd92(0xce2)][_0xc5cd92(0xb25)][_0xc5cd92(0x2d7)](this);switch(VisuMZ[_0xc5cd92(0xce2)][_0xc5cd92(0x4a9)][_0xc5cd92(0x2db)]['PopupPosition']){case _0xc5cd92(0x46a):_0x258a3a-=this[_0xc5cd92(0x96b)]*this[_0xc5cd92(0x6e9)]['y'];break;case _0xc5cd92(0x624):_0x258a3a-=this['height']*this['scale']['y']*0.5;break;}let _0x291c2c=VisuMZ[_0xc5cd92(0xce2)][_0xc5cd92(0x4a9)]['Damage'][_0xc5cd92(0x57c)]||0x0;return Math['round'](_0x258a3a+_0x291c2c);},Sprite_Actor['prototype'][_0x1e608f(0xc43)]=function(){const _0x210afe=_0x1e608f;return Sprite_Battler['prototype'][_0x210afe(0xc43)][_0x210afe(0x2d7)](this);},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xc5b)]=function(){const _0x5b7b9e=_0x1e608f;return Sprite_Battler['prototype'][_0x5b7b9e(0xc5b)]['call'](this);},Sprite_Battler['prototype'][_0x1e608f(0x75c)]=function(_0x43bfaa){const _0x2fa277=_0x1e608f;if(this['isShownOnBattlePortrait']()){if(_0x2fa277(0x6a0)===_0x2fa277(0x6fc)){if(_0x4f7e64[_0x2fa277(0x606)][_0x2fa277(0x28c)]()&&_0x30f6bf[_0x2fa277(0x606)][_0x2fa277(0xbab)]())return 0x1;else{if(_0x24eb93[_0x2fa277(0x606)][_0x2fa277(0x28c)]()&&_0x4a068c['_battler'][_0x2fa277(0xbab)]())return-0x1;}}else SceneManager[_0x2fa277(0x327)][_0x2fa277(0x496)][_0x2fa277(0x12c)](_0x43bfaa);}else this[_0x2fa277(0xa74)]()[_0x2fa277(0xa5f)](_0x43bfaa),this['_damages'][_0x2fa277(0x569)](_0x43bfaa),_0x43bfaa['destroy']();},VisuMZ['BattleCore'][_0x1e608f(0xd21)]=Sprite_Battler['prototype']['setHome'],Sprite_Battler['prototype']['setHome']=function(_0x26ec1e,_0x347a7a){const _0x295850=_0x1e608f,_0x5754db=VisuMZ['BattleCore'][_0x295850(0x4a9)];if(this['constructor']===Sprite_Actor){if(_0x295850(0xced)===_0x295850(0x71a)){const _0x28c817=this[_0x295850(0xc93)]();return _0x28c817?_0x28c817[_0x295850(0x497)]:0x0;}else _0x26ec1e+=_0x5754db['Actor']['OffsetX']||0x0,_0x347a7a+=_0x5754db[_0x295850(0xa6a)]['OffsetY']||0x0;}else this[_0x295850(0x5c0)]===Sprite_Enemy&&(_0x295850(0xc1d)==='OfGFM'?(_0x44a49f+=_0x23e3ac,_0x2def88+=_0x4a1c0b):(_0x26ec1e+=_0x5754db[_0x295850(0x662)][_0x295850(0x4df)]||0x0,_0x347a7a+=_0x5754db[_0x295850(0x662)][_0x295850(0x2c2)]||0x0));this[_0x295850(0x606)]&&(_0x26ec1e=this[_0x295850(0x606)]['_forcedHomeX']??_0x26ec1e,_0x347a7a=this[_0x295850(0x606)][_0x295850(0xa20)]??_0x347a7a),VisuMZ[_0x295850(0xce2)][_0x295850(0xd21)]['call'](this,_0x26ec1e,_0x347a7a),this['_targetHomeX']=this[_0x295850(0x565)],this[_0x295850(0x1e0)]=this[_0x295850(0x37b)],this[_0x295850(0xc5f)]=0x0,this[_0x295850(0xaf6)]=0x0,this[_0x295850(0x48a)]=_0x295850(0xa73);},VisuMZ[_0x1e608f(0xce2)]['Sprite_Battler_update']=Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x593)],Sprite_Battler['prototype'][_0x1e608f(0x593)]=function(){const _0x29b6b6=_0x1e608f;VisuMZ[_0x29b6b6(0xce2)][_0x29b6b6(0xd47)]['call'](this);if(!this['_battler']&&this['_hpGaugeSprite']){if('GarAA'!==_0x29b6b6(0xa33)){if(!_0x1046cf[_0x29b6b6(0x5f2)]())return;if(!_0x46448b['VisuMZ_1_ElementStatusCore'])return;_0x41b17e[_0x29b6b6(0x47c)](_0x5e7df2,_0x1da4a1);const _0x18f0bd=_0xf00e9e['_action'],_0x17e112=_0x1dda85['Elements'];if(!_0x18f0bd)return;_0x18f0bd['_battleCoreForcedElements']=_0x17e112;}else this[_0x29b6b6(0xc9f)][_0x29b6b6(0x734)]=![];}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc9b)]=Sprite_Battler['prototype'][_0x1e608f(0x6c7)],Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x6c7)]=function(){const _0x4fa95d=_0x1e608f;this[_0x4fa95d(0xb84)](),this['updateSkew'](),this[_0x4fa95d(0x44c)](),this['updateFlip'](),VisuMZ['BattleCore'][_0x4fa95d(0xc9b)][_0x4fa95d(0x2d7)](this),this[_0x4fa95d(0x583)](),this['updateShakeFlinch']();if(this['constructor']===Sprite_Enemy)this[_0x4fa95d(0x1be)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1f3)]=Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x234)],Sprite_Battler['prototype'][_0x1e608f(0x234)]=function(){const _0x1370f4=_0x1e608f;this[_0x1370f4(0x870)](),VisuMZ['BattleCore'][_0x1370f4(0x1f3)][_0x1370f4(0x2d7)](this),this['updatePositionBattleCore'](),this[_0x1370f4(0x1a3)]();},Sprite_Battler['prototype']['updateSelectionEffect']=function(){const _0x14a803=_0x1e608f,_0x2d4172=this[_0x14a803(0x188)]();if(this['_battler'][_0x14a803(0xbd7)]())this[_0x14a803(0xc55)]++,Graphics['frameCount']%0x1e<0xf?_0x2d4172[_0x14a803(0x9ed)]([0xff,0xff,0xff,0x40]):'fHEtq'!=='EXGfM'?_0x2d4172[_0x14a803(0x9ed)]([0x0,0x0,0x0,0x0]):this[_0x14a803(0xd62)](0x0,0x0,0xc);else this[_0x14a803(0xc55)]>0x0&&(this['_selectionEffectCount']=0x0,_0x2d4172[_0x14a803(0x9ed)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3a4)]=function(_0x33bcf2,_0x1a2c90){const _0x18ed39=_0x1e608f,_0x54efd3=_0x33bcf2-this[_0x18ed39(0x565)],_0x24361d=_0x1a2c90-this[_0x18ed39(0x37b)];this[_0x18ed39(0x565)]=_0x33bcf2,this[_0x18ed39(0x37b)]=_0x1a2c90,this[_0x18ed39(0x66d)]-=_0x54efd3,this[_0x18ed39(0x5f0)]-=_0x24361d,this['_targetOffsetX']-=_0x54efd3,this[_0x18ed39(0x5da)]-=_0x24361d,this['updatePosition']();},Sprite_Battler[_0x1e608f(0xbe1)]['startHomeMove']=function(_0x3eafb4,_0x42b1bb,_0x20ddb1,_0x530063){const _0x16bb65=_0x1e608f;(this['_targetHomeX']!==_0x3eafb4||this['_targetHomeY']!==_0x42b1bb)&&(this['_targetHomeX']=_0x3eafb4,this['_targetHomeY']=_0x42b1bb,this['_homeDuration']=_0x20ddb1,this[_0x16bb65(0xaf6)]=_0x20ddb1,this['_homeEasing']=_0x530063,_0x20ddb1<=0x0&&this[_0x16bb65(0xbe9)]());},Sprite_Battler[_0x1e608f(0xbe1)]['updateHomeMove']=function(){const _0x1d2390=_0x1e608f;if(this[_0x1d2390(0xc5f)]<=0x0)return;const _0x5ea2b5=this['_homeDuration'],_0x6d6c31=this['_homeWholeDuration'],_0x3f9e36=this[_0x1d2390(0x48a)];if(Imported[_0x1d2390(0x8b3)]){if(_0x1d2390(0x221)===_0x1d2390(0x221))this[_0x1d2390(0x565)]=this[_0x1d2390(0x556)](this[_0x1d2390(0x565)],this[_0x1d2390(0x455)],_0x5ea2b5,_0x6d6c31,_0x3f9e36),this[_0x1d2390(0x37b)]=this['applyEasing'](this[_0x1d2390(0x37b)],this[_0x1d2390(0x1e0)],_0x5ea2b5,_0x6d6c31,_0x3f9e36);else{if(_0x38207f){const _0x249d95=_0x27a719['indexOf'](_0x35c6da);return _0x249d95>=0x0?[_0x551e68[_0x249d95+0x1]||_0x5016de]:[_0x418642];}}}else this['_homeX']=(this[_0x1d2390(0x565)]*(_0x5ea2b5-0x1)+this[_0x1d2390(0x455)])/_0x5ea2b5,this['_homeY']=(this[_0x1d2390(0x37b)]*(_0x5ea2b5-0x1)+this[_0x1d2390(0x1e0)])/_0x5ea2b5;this[_0x1d2390(0xc5f)]--;if(this['_homeDuration']<=0x0)this['onHomeMoveEnd']();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x59532f=_0x1e608f;this[_0x59532f(0x565)]=this[_0x59532f(0x455)],this[_0x59532f(0x37b)]=this[_0x59532f(0x1e0)];},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x8f3)]=function(){const _0x2fbdfa=_0x1e608f;this[_0x2fbdfa(0x8d8)]=this['x'],this[_0x2fbdfa(0x171)]=this['y'],this['updateFloat'](),this[_0x2fbdfa(0x4b7)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x2fbdfa(0xabf)](),this['y']+=this[_0x2fbdfa(0x637)](),this['x']=Math['floor'](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x1e608f(0xbe1)]['extraPositionX']=function(){let _0x4f1265=0x0;return _0x4f1265;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xabf)]=function(){const _0x111cce=_0x1e608f;let _0x3d25bb=0x0;return this[_0x111cce(0x606)]&&!this[_0x111cce(0x606)]['isBattlerGrounded']()&&(_0x3d25bb-=this['_floatHeight'],_0x3d25bb-=this[_0x111cce(0xa8d)]),_0x3d25bb;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x637)]=function(){const _0x3c34d1=_0x1e608f;let _0x45f8d0=0x0;if(this[_0x3c34d1(0x8e8)]&&this['constructor']!==Sprite_SvEnemy){const _0x59dd83=this['_distortionSprite'][_0x3c34d1(0x6e9)]['y'];_0x45f8d0-=(_0x59dd83-0x1)*this[_0x3c34d1(0x96b)];}return _0x45f8d0;},Sprite_Battler['prototype'][_0x1e608f(0x122)]=function(){const _0x30be66=_0x1e608f,_0x127799=this[_0x30be66(0x606)]&&this[_0x30be66(0x606)][_0x30be66(0x693)]();this['_flipScaleX']=(_0x127799?-0x1:0x1)*Math[_0x30be66(0x799)](this[_0x30be66(0x6e9)]['x']);},Sprite_Battler[_0x1e608f(0xbe1)]['startFloat']=function(_0x3f29aa,_0x19f7b3,_0x43b6e8){const _0x431af6=_0x1e608f;if(!this['canMove']())return;if(this[_0x431af6(0xc4b)]===_0x3f29aa)return;this[_0x431af6(0xc4b)]=_0x3f29aa,this['_floatDuration']=_0x19f7b3,this[_0x431af6(0xd34)]=_0x19f7b3,this[_0x431af6(0x738)]=_0x43b6e8||_0x431af6(0xa73);if(_0x19f7b3<=0x0)this[_0x431af6(0x9de)]=_0x3f29aa;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xbb0)]=function(){const _0x51fc51=_0x1e608f;if(this[_0x51fc51(0x3da)]<=0x0)return;const _0x3a5649=this[_0x51fc51(0x3da)],_0x4930d2=this[_0x51fc51(0xd34)],_0x7c88b0=this[_0x51fc51(0x738)];Imported[_0x51fc51(0x8b3)]?_0x51fc51(0x7a0)!==_0x51fc51(0x7a0)?(this[_0x51fc51(0x678)](),this[_0x51fc51(0x278)]()):this[_0x51fc51(0x9de)]=this['applyEasing'](this['_floatHeight'],this[_0x51fc51(0xc4b)],_0x3a5649,_0x4930d2,_0x7c88b0):_0x51fc51(0x3ca)!==_0x51fc51(0xd4c)?this[_0x51fc51(0x9de)]=(this['_floatHeight']*(_0x3a5649-0x1)+this[_0x51fc51(0xc4b)])/_0x3a5649:this['padding']=0x0;this[_0x51fc51(0x3da)]--;if(this[_0x51fc51(0x3da)]<=0x0)this[_0x51fc51(0x921)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x921)]=function(){const _0x136f1f=_0x1e608f;this[_0x136f1f(0x9de)]=this[_0x136f1f(0xc4b)];},Sprite_Battler[_0x1e608f(0xbe1)]['isFloating']=function(){const _0x1b2ad1=_0x1e608f;return this[_0x1b2ad1(0x3da)]>0x0;},Sprite_Battler['prototype']['startJump']=function(_0x3c9836,_0x2c53ba){const _0x3c7692=_0x1e608f;if(!this[_0x3c7692(0xd81)]())return;if(_0x2c53ba<=0x0)return;this[_0x3c7692(0xb4f)]=_0x3c9836,this[_0x3c7692(0x560)]=_0x2c53ba,this['_jumpWholeDuration']=_0x2c53ba;},Sprite_Battler['prototype'][_0x1e608f(0x4b7)]=function(){const _0x36579a=_0x1e608f;if(this['_jumpDuration']<=0x0)return;const _0x3a64e5=this['_jumpWholeDuration']-this[_0x36579a(0x560)],_0x49f9fe=this[_0x36579a(0xb0f)]/0x2,_0x18027c=this['_jumpMaxHeight'],_0x46196e=-_0x18027c/Math[_0x36579a(0x8ab)](_0x49f9fe,0x2);this[_0x36579a(0xa8d)]=_0x46196e*Math[_0x36579a(0x8ab)](_0x3a64e5-_0x49f9fe,0x2)+_0x18027c,this['_jumpDuration']--;if(this['_jumpDuration']<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x7f8)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler['prototype'][_0x1e608f(0x96f)]=function(){const _0x1bf934=_0x1e608f;return this[_0x1bf934(0x560)]>0x0;},Sprite_Battler['prototype'][_0x1e608f(0x99b)]=function(_0x1e4471,_0x1c9e90,_0x3f5481){const _0x306601=_0x1e608f;if(this[_0x306601(0x87e)]===_0x1e4471)return;this[_0x306601(0x87e)]=_0x1e4471,this[_0x306601(0x37d)]=_0x1c9e90,this[_0x306601(0x133)]=_0x1c9e90,this['_opacityEasing']=_0x3f5481||_0x306601(0xa73);if(_0x1c9e90<=0x0)this[_0x306601(0xb1b)]=_0x1e4471;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x1a3)]=function(){const _0x3e180e=_0x1e608f;if(this[_0x3e180e(0x5c0)][_0x3e180e(0x6aa)]===_0x3e180e(0x64c))return;if(this['_opacityDuration']<=0x0)return;const _0x4c5d61=this['_opacityDuration'],_0x3e87f0=this[_0x3e180e(0x133)],_0x52cc44=this['_opacityEasing'];if(Imported[_0x3e180e(0x8b3)]){if(_0x3e180e(0x124)==='RNztC')this['opacity']=this['applyEasing'](this[_0x3e180e(0xb1b)],this[_0x3e180e(0x87e)],_0x4c5d61,_0x3e87f0,_0x52cc44);else return _0x3b270f['battler']()['_baseY']-_0x1e35a5[_0x3e180e(0x8dd)]()[_0x3e180e(0x171)];}else this[_0x3e180e(0xb1b)]=(this['opacity']*(_0x4c5d61-0x1)+this[_0x3e180e(0x87e)])/_0x4c5d61;this[_0x3e180e(0x37d)]--;if(this['_opacityDuration']<=0x0)this[_0x3e180e(0xc42)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc42)]=function(){const _0x4d94a6=_0x1e608f;this[_0x4d94a6(0xb1b)]=this[_0x4d94a6(0x87e)];},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xc2f)]=function(){const _0x212e15=_0x1e608f;return this[_0x212e15(0x37d)]>0x0;},Sprite_Battler['prototype']['updateShadow']=function(){const _0x2d08ca=_0x1e608f;this[_0x2d08ca(0x574)][_0x2d08ca(0x734)]=this[_0x2d08ca(0x606)]['hasSvBattler'](),this['updateShadowPosition']();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x17a)]=function(){const _0x2eee1b=_0x1e608f;if(!this['_shadowSprite'])return;this[_0x2eee1b(0x574)]['y']=this[_0x2eee1b(0x171)]-this['y']-0x2;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x33e)]=function(){const _0x4f1cd7=_0x1e608f;if(!this['_battler'])return;this[_0x4f1cd7(0x7ff)]=this['_battler']['battlerShadowScaleX'](),this[_0x4f1cd7(0xb33)]=this[_0x4f1cd7(0x606)][_0x4f1cd7(0x749)]();},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x213)]=function(){const _0x2816e4=_0x1e608f,_0x46fb6b=this[_0x2816e4(0x28c)]()?this[_0x2816e4(0x532)]():this[_0x2816e4(0x366)]();if(_0x46fb6b){const _0x4dd159=_0x46fb6b[_0x2816e4(0xb2d)];if(_0x4dd159[_0x2816e4(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4dd159[_0x2816e4(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x1e608f(0xbe1)][_0x1e608f(0x749)]=function(){const _0x455e25=_0x1e608f,_0x30744f=this['isActor']()?this[_0x455e25(0x532)]():this[_0x455e25(0x366)]();if(_0x30744f){if(_0x455e25(0xb05)===_0x455e25(0xb05)){const _0x5c4b52=_0x30744f['note'];if(_0x5c4b52[_0x455e25(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5c4b52[_0x455e25(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else _0xf2d93b['BattleCore']['Game_Party_removeActor'][_0x455e25(0x2d7)](this,_0x4ff3b5),_0x379206[_0x455e25(0x751)]();}return 0x1;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xb84)]=function(){const _0x29e5e0=_0x1e608f;if(this['constructor']===Sprite_SvEnemy)return;this[_0x29e5e0(0x903)](),this['finalizeScale']();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x5d3)]=function(){const _0x1bc3b8=_0x1e608f,_0x2dbf3b=this[_0x1bc3b8(0x8e8)];_0x2dbf3b&&(_0x2dbf3b[_0x1bc3b8(0x6e9)]['x']=this[_0x1bc3b8(0x3b5)](),_0x2dbf3b[_0x1bc3b8(0x6e9)]['y']=this[_0x1bc3b8(0xc00)]());},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3b5)]=function(){const _0x1bb8d1=_0x1e608f;let _0xa0ac7e=0x1;return _0xa0ac7e*=this[_0x1bb8d1(0x62e)],_0xa0ac7e*=this['_growX'],_0xa0ac7e;},Sprite_Battler['prototype'][_0x1e608f(0xc00)]=function(){const _0x560144=_0x1e608f;return 0x1*this[_0x560144(0x856)];},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xcc4)]=function(){const _0x2fc625=_0x1e608f;return this[_0x2fc625(0x78f)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x4d3)]=function(){const _0x506f59=_0x1e608f;return this[_0x506f59(0x96b)]*this[_0x506f59(0xc00)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x649)]=function(_0x5b10cc,_0x2d60e6,_0x2084fc,_0x5d92e4){const _0x3abb21=_0x1e608f;if(!this[_0x3abb21(0xd81)]())return;if(!this[_0x3abb21(0x8e8)])return;if(this[_0x3abb21(0x126)]===_0x5b10cc&&this[_0x3abb21(0x68c)]===_0x2d60e6)return;this[_0x3abb21(0x126)]=_0x5b10cc,this[_0x3abb21(0x68c)]=_0x2d60e6,this['_growDuration']=_0x2084fc,this[_0x3abb21(0x38e)]=_0x2084fc,this['_growEasing']=_0x5d92e4||'Linear',_0x2084fc<=0x0&&(this[_0x3abb21(0xb0e)]=this[_0x3abb21(0x126)],this[_0x3abb21(0x856)]=this[_0x3abb21(0x68c)]);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x903)]=function(){const _0x39fbe7=_0x1e608f;if(this['_growDuration']<=0x0)return;if(!this[_0x39fbe7(0x8e8)])return;const _0x4c2bca=this['_growDuration'],_0x66555=this[_0x39fbe7(0x38e)],_0x87b2d2=this['_growEasing'];if(Imported[_0x39fbe7(0x8b3)]){if(_0x39fbe7(0x7f6)!=='jqRgY')this[_0x39fbe7(0xb0e)]=this[_0x39fbe7(0x556)](this[_0x39fbe7(0xb0e)],this[_0x39fbe7(0x126)],_0x4c2bca,_0x66555,_0x87b2d2),this[_0x39fbe7(0x856)]=this[_0x39fbe7(0x556)](this[_0x39fbe7(0x856)],this[_0x39fbe7(0x68c)],_0x4c2bca,_0x66555,_0x87b2d2);else return _0x34dfee['BattleCore'][_0x39fbe7(0x4a9)][_0x39fbe7(0x4de)][_0x39fbe7(0xc03)];}else{if(_0x39fbe7(0x906)===_0x39fbe7(0xa3f)){const _0x9df67=_0x11fe75(_0x3d31b0['$1'])['split'](/[\r\n]+/)[_0x39fbe7(0x569)]('');_0x25203c[_0x39fbe7(0x759)]=_0x28077a[_0x39fbe7(0xc8a)](_0x9df67);}else this['_growX']=(this[_0x39fbe7(0xb0e)]*(_0x4c2bca-0x1)+this[_0x39fbe7(0x126)])/_0x4c2bca,this[_0x39fbe7(0x856)]=(this['_growY']*(_0x4c2bca-0x1)+this[_0x39fbe7(0x68c)])/_0x4c2bca;}this[_0x39fbe7(0xca7)]--;if(this[_0x39fbe7(0xca7)]<=0x0)this['onGrowEnd']();},Sprite_Battler['prototype']['onGrowEnd']=function(){const _0x524d0f=_0x1e608f;this[_0x524d0f(0xb0e)]=this[_0x524d0f(0x126)],this[_0x524d0f(0x856)]=this['_targetGrowY'];},Sprite_Battler['prototype'][_0x1e608f(0x2e4)]=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x4104bc,_0x56ca3d,_0x49f2cd,_0x5e9f36){const _0x342be8=_0x1e608f;if(!this[_0x342be8(0xd81)]())return;if(!this[_0x342be8(0x8e8)])return;if(this[_0x342be8(0x388)]===_0x4104bc&&this[_0x342be8(0xa07)]===_0x56ca3d)return;this[_0x342be8(0x388)]=_0x4104bc,this[_0x342be8(0xa07)]=_0x56ca3d,this[_0x342be8(0x35d)]=_0x49f2cd,this[_0x342be8(0x573)]=_0x49f2cd,this[_0x342be8(0x970)]=_0x5e9f36||'Linear',_0x49f2cd<=0x0&&(this[_0x342be8(0x8e8)][_0x342be8(0x4af)]['x']=this['_targetSkewX'],this[_0x342be8(0x8e8)][_0x342be8(0x4af)]['y']=this[_0x342be8(0xa07)]);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x1f2)]=function(){const _0x5578ae=_0x1e608f;if(this[_0x5578ae(0x35d)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x3d65c4=this[_0x5578ae(0x35d)],_0x4c1e25=this[_0x5578ae(0x573)],_0x1631a0=this[_0x5578ae(0x970)],_0x102a5=this['_distortionSprite'];Imported[_0x5578ae(0x8b3)]?(_0x102a5[_0x5578ae(0x4af)]['x']=this['applyEasing'](_0x102a5['skew']['x'],this['_targetSkewX'],_0x3d65c4,_0x4c1e25,_0x1631a0),_0x102a5['skew']['y']=this[_0x5578ae(0x556)](_0x102a5['skew']['y'],this[_0x5578ae(0xa07)],_0x3d65c4,_0x4c1e25,_0x1631a0)):(_0x102a5[_0x5578ae(0x4af)]['x']=(_0x102a5[_0x5578ae(0x4af)]['x']*(_0x3d65c4-0x1)+this[_0x5578ae(0x388)])/_0x3d65c4,_0x102a5[_0x5578ae(0x4af)]['y']=(_0x102a5[_0x5578ae(0x4af)]['y']*(_0x3d65c4-0x1)+this['_targetSkewY'])/_0x3d65c4);this[_0x5578ae(0x35d)]--;if(this[_0x5578ae(0x35d)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x3a3)]=function(){const _0x513efc=_0x1e608f;this[_0x513efc(0x8e8)][_0x513efc(0x4af)]['x']=this[_0x513efc(0x388)],this[_0x513efc(0x8e8)][_0x513efc(0x4af)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x54d)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x826)]=function(_0x38a2dd,_0x50601f,_0x24fa31,_0x49bf5a){const _0x151ba4=_0x1e608f;if(!this[_0x151ba4(0xd81)]())return;if(!this['_distortionSprite'])return;if(this[_0x151ba4(0xbd5)]===_0x38a2dd)return;this[_0x151ba4(0xbd5)]=_0x38a2dd,this['_angleDuration']=_0x50601f,this[_0x151ba4(0x697)]=_0x50601f,this['_angleEasing']=_0x24fa31||_0x151ba4(0xa73),this[_0x151ba4(0x2c7)]=_0x49bf5a;this[_0x151ba4(0x2c7)]===undefined&&(this[_0x151ba4(0x2c7)]=!![]);if(_0x50601f<=0x0){if('NdaPv'!==_0x151ba4(0x10e))return![];else{this[_0x151ba4(0x7b7)]=_0x38a2dd;if(this[_0x151ba4(0x2c7)]){if(_0x151ba4(0xcb7)===_0x151ba4(0x847)){const _0x3e8b4f=_0x34a2fe[_0x151ba4(0xce2)][_0x151ba4(0x4a9)][_0x151ba4(0x680)];if(_0x3e8b4f&&_0x3e8b4f[_0x151ba4(0x1a1)])return _0x3e8b4f[_0x151ba4(0x1a1)]['call'](this);this['width']=_0x4b54ff[_0x151ba4(0x78f)],this[_0x151ba4(0x96b)]=_0x31a523['height'];const _0x1d731d=0x1;this['scale']['x']=_0x1d731d,this[_0x151ba4(0x6e9)]['y']=_0x1d731d,this['x']=0x0,this['y']=0x0;}else this[_0x151ba4(0xbd5)]=0x0,this[_0x151ba4(0x7b7)]=0x0;}}}},Sprite_Battler[_0x1e608f(0xbe1)]['updateSpin']=function(){const _0x321e4c=_0x1e608f;this['updateAngleCalculations'](),this[_0x321e4c(0x913)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xcd8)]=function(){const _0x21bacd=_0x1e608f;if(this[_0x21bacd(0x168)]<=0x0)return;const _0x32c882=this[_0x21bacd(0x168)],_0x53532b=this['_angleWholeDuration'],_0x447ecd=this[_0x21bacd(0xb90)];Imported[_0x21bacd(0x8b3)]?this[_0x21bacd(0x7b7)]=this[_0x21bacd(0x556)](this[_0x21bacd(0x7b7)],this[_0x21bacd(0xbd5)],_0x32c882,_0x53532b,_0x447ecd):this[_0x21bacd(0x7b7)]=(this[_0x21bacd(0x7b7)]*(_0x32c882-0x1)+this[_0x21bacd(0xbd5)])/_0x32c882;this[_0x21bacd(0x168)]--;if(this[_0x21bacd(0x168)]<=0x0)this[_0x21bacd(0x5f4)]();},Sprite_Battler['prototype'][_0x1e608f(0x5f4)]=function(){const _0x5ded8d=_0x1e608f;this[_0x5ded8d(0x7b7)]=this[_0x5ded8d(0xbd5)],this[_0x5ded8d(0x2c7)]&&(this[_0x5ded8d(0xbd5)]=0x0,this[_0x5ded8d(0x7b7)]=0x0);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xacb)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x913)]=function(){const _0x4f11a9=_0x1e608f;if(!this[_0x4f11a9(0x8e8)])return;const _0x31377e=this['_currentAngle'],_0x69ee22=this[_0x4f11a9(0x6e9)]['x'],_0x24a116=this[_0x4f11a9(0x606)][_0x4f11a9(0x28c)]()?-0x1:0x1;this['_distortionSprite'][_0x4f11a9(0x816)]=_0x31377e*_0x69ee22*_0x24a116;const _0x5b2ec5=this[_0x4f11a9(0x8e8)]['scale']['y'];this['_distortionSprite']['y']=this['height']*-0.5*(0x2-_0x5b2ec5),this['_distortionSprite']['y']=Math[_0x4f11a9(0x958)](this[_0x4f11a9(0x8e8)]['y']);const _0x3a6281=[this[_0x4f11a9(0xc27)],this[_0x4f11a9(0xc7b)],this[_0x4f11a9(0x328)]];for(const _0x27eca4 of _0x3a6281){if(_0x4f11a9(0x4fc)!==_0x4f11a9(0x4fc))_0xb5176a[_0x4f11a9(0xce2)]['Game_Action_applyGlobal'][_0x4f11a9(0x2d7)](this),this[_0x4f11a9(0xaca)](),this[_0x4f11a9(0x9f5)]();else{if(!_0x27eca4)continue;_0x27eca4['y']=this[_0x4f11a9(0x96b)]*0.5;}}this[_0x4f11a9(0x574)]&&(this[_0x4f11a9(0x7ff)]=this[_0x4f11a9(0x7ff)]??0x1,this[_0x4f11a9(0xb33)]=this['_shadowScaleY']??0x1,this[_0x4f11a9(0x574)]['scale']['x']=this[_0x4f11a9(0x8e8)]['scale']['x']*this['_shadowScaleX'],this[_0x4f11a9(0x574)][_0x4f11a9(0x6e9)]['y']=this[_0x4f11a9(0x8e8)]['scale']['y']*this[_0x4f11a9(0xb33)]);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4bc)]=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbfa)],Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbfa)]=function(){const _0x3c8a36=_0x1e608f;VisuMZ[_0x3c8a36(0xce2)]['Sprite_Actor_createStateSprite'][_0x3c8a36(0x2d7)](this),VisuMZ[_0x3c8a36(0xce2)][_0x3c8a36(0x4a9)][_0x3c8a36(0x8be)]['ShowActorGauge']&&this['createHpGaugeSprite']();},VisuMZ['BattleCore'][_0x1e608f(0xbdf)]=Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x304)],Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x304)]=function(){const _0x5bbd25=_0x1e608f;VisuMZ[_0x5bbd25(0xce2)][_0x5bbd25(0x4a9)]['HpGauge'][_0x5bbd25(0x901)]&&this[_0x5bbd25(0x4e7)](),VisuMZ[_0x5bbd25(0xce2)][_0x5bbd25(0xbdf)][_0x5bbd25(0x2d7)](this);},Sprite_Battler[_0x1e608f(0xbe1)]['createHpGaugeSprite']=function(){const _0x134100=_0x1e608f;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x1fd15c=VisuMZ['BattleCore'][_0x134100(0x4a9)]['HpGauge'],_0x19dce4=new Sprite_HpGauge();_0x19dce4[_0x134100(0x2f7)]['x']=_0x1fd15c[_0x134100(0x3b6)],_0x19dce4[_0x134100(0x2f7)]['y']=_0x1fd15c[_0x134100(0x83b)],_0x19dce4['scale']['x']=_0x19dce4['scale']['y']=_0x1fd15c[_0x134100(0x22b)],this['_hpGaugeSprite']=_0x19dce4,this[_0x134100(0x9a5)](this[_0x134100(0xc9f)]);if(Spriteset_Battle[_0x134100(0x48f)]){if(_0x134100(0x97e)!==_0x134100(0x97e)){_0x5b1533=_0x2981d8[_0x134100(0xce2)][_0x134100(0xc69)][_0x134100(0x2d7)](this);const _0x4980c4=_0xe6ffa['BattleCore'][_0x134100(0x1eb)](this[_0x134100(0xa0b)](),_0x134100(0x6d6));return _0x2c8f4d=_0x4071f4[_0x134100(0xce2)]['JS'][_0x4980c4][_0x134100(0x2d7)](this,this[_0x134100(0x8b4)](),_0x1b8bda),this['repeatTargets'](_0x47048a);}else BattleManager[_0x134100(0x40e)](this[_0x134100(0xc9f)]);}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xbc5)]=Sprite_Battler[_0x1e608f(0xbe1)]['setBattler'],Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x9c8)]=function(_0x5dae82){const _0x5b607d=_0x1e608f,_0x2fc5fe=this[_0x5b607d(0x606)];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x5b607d(0x2d7)](this,_0x5dae82),this[_0x5b607d(0x14c)](_0x5dae82);if(_0x2fc5fe!==_0x5dae82)this[_0x5b607d(0x33e)]();},Sprite_Battler[_0x1e608f(0xbe1)]['setupHpGaugeSprite']=function(_0x4644bb){const _0x5318da=_0x1e608f;if(!_0x4644bb)return;if(!this[_0x5318da(0xc9f)])return;if(_0x4644bb['isActor']()){}else{if(_0x4644bb['isEnemy']()){if(this[_0x5318da(0x5c0)]===Sprite_SvEnemy&&!_0x4644bb[_0x5318da(0x7dd)]())return;}}this['_hpGaugeSprite'][_0x5318da(0x429)](_0x4644bb,'hp');},Sprite_Battler['prototype'][_0x1e608f(0x578)]=function(){const _0x19a25a=_0x1e608f;return this[_0x19a25a(0x606)]&&this['_battler'][_0x19a25a(0x578)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x960)]=function(){const _0x4d5eee=_0x1e608f,_0x6de3cc=this[_0x4d5eee(0xc27)][_0x4d5eee(0x34b)];if(!_0x6de3cc)return;const _0x17f002=_0x6de3cc[_0x4d5eee(0x78f)];let _0xf1e2ad=_0x6de3cc['height'];if(this[_0x4d5eee(0x606)][_0x4d5eee(0xbdc)]()){if(this[_0x4d5eee(0x35a)])_0xf1e2ad=Math[_0x4d5eee(0x127)](0x0,this[_0x4d5eee(0x35a)][_0x4d5eee(0x96b)]-0x4);}this[_0x4d5eee(0xc27)][_0x4d5eee(0x23f)](0x0,0x0,_0x17f002,_0xf1e2ad),this[_0x4d5eee(0x23f)](0x0,0x0,_0x17f002,_0xf1e2ad);},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x583)]=function(){const _0x5cac0e=_0x1e608f;if(!this['_battler'])return;if(!this[_0x5cac0e(0xc9f)])return;const _0x558ec5=VisuMZ['BattleCore'][_0x5cac0e(0x4a9)]['HpGauge'],_0xae5fa6=this[_0x5cac0e(0xc9f)];_0xae5fa6[_0x5cac0e(0x734)]=this[_0x5cac0e(0x9c9)]();const _0x578e72=_0x558ec5[_0x5cac0e(0x4df)],_0xcbacb4=_0x558ec5[_0x5cac0e(0x2c2)];_0xae5fa6['x']=_0x578e72,_0xae5fa6['x']+=this[_0x5cac0e(0x606)][_0x5cac0e(0xc29)](),_0xae5fa6['y']=-this[_0x5cac0e(0x96b)]+_0xcbacb4,_0xae5fa6['y']+=this['_battler'][_0x5cac0e(0x7c9)](),Spriteset_Battle[_0x5cac0e(0x48f)]&&SceneManager[_0x5cac0e(0x327)][_0x5cac0e(0x4b1)]&&(_0xae5fa6['x']+=this['x'],_0xae5fa6['y']+=this['y']);},Sprite_Battler['prototype'][_0x1e608f(0x9c9)]=function(){const _0x3556fa=_0x1e608f;if(!this['_battler'])return![];if(this[_0x3556fa(0x606)][_0x3556fa(0x28c)]())return!![];if(this[_0x3556fa(0x606)][_0x3556fa(0xb69)]())return![];if(this['opacity']<=0x0)return![];const _0x27b8de=this[_0x3556fa(0x606)][_0x3556fa(0x366)]()[_0x3556fa(0xb2d)];if(_0x27b8de[_0x3556fa(0x97b)](/<SHOW HP GAUGE>/i))return!![];if(_0x27b8de[_0x3556fa(0x97b)](/<HIDE HP GAUGE>/i))return![];const _0x19bf77=VisuMZ[_0x3556fa(0xce2)]['Settings'][_0x3556fa(0x8be)];if(_0x19bf77[_0x3556fa(0x6c3)]){if(_0x19bf77[_0x3556fa(0xc5d)]&&BattleManager['isBattleTest']())return!![];if(this[_0x3556fa(0x606)][_0x3556fa(0xa18)])return![];return this['_battler'][_0x3556fa(0xb67)]();}return!![];},VisuMZ[_0x1e608f(0xce2)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x1e608f(0xbe1)]['isMoving'],Sprite_Battler['prototype']['isMoving']=function(){const _0x28e3f9=_0x1e608f;if(!this['_battler'])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x28e3f9(0xce2)][_0x28e3f9(0x6c1)][_0x28e3f9(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xc4e)]=Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xd62)],Sprite_Battler[_0x1e608f(0xbe1)]['startMove']=function(_0xa57d2a,_0x3dd0d4,_0x1f7f8c){const _0x25c050=_0x1e608f;if(this[_0x25c050(0xd81)]()){if(_0x25c050(0x442)!=='aKbVj')return _0x29bffa[_0x25c050(0x9f1)](_0x857040=>_0x857040[_0x25c050(0x205)]());else VisuMZ[_0x25c050(0xce2)][_0x25c050(0xc4e)]['call'](this,_0xa57d2a,_0x3dd0d4,_0x1f7f8c);}},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0xd81)]=function(){const _0x4c4eac=_0x1e608f;if(this['_battler']&&this[_0x4c4eac(0x606)][_0x4c4eac(0xbdc)]())return![];if(this[_0x4c4eac(0x606)]&&!this[_0x4c4eac(0x606)]['canBattlerMove']())return![];return $gameSystem[_0x4c4eac(0x3e6)]();},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x533)]=function(){},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x56f)]=function(){const _0x4cce2f=_0x1e608f;this[_0x4cce2f(0xd62)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x1e608f(0xcc3)]=function(){},Sprite_Battler[_0x1e608f(0xbe1)][_0x1e608f(0x252)]=function(){const _0x3fa6ef=_0x1e608f,_0x35a7c0=VisuMZ['BattleCore']['Settings'][_0x3fa6ef(0xa6a)],_0x4f82c9=this[_0x3fa6ef(0x606)]&&this['_battler'][_0x3fa6ef(0x28c)]()?0x1:-0x1,_0x5bc5b8=this[_0x3fa6ef(0x8d8)]-this[_0x3fa6ef(0x565)]+_0x4f82c9*_0x35a7c0['FlinchDistanceX'],_0x1d7bc4=this[_0x3fa6ef(0x171)]-this[_0x3fa6ef(0x37b)]+_0x4f82c9*_0x35a7c0[_0x3fa6ef(0x5e0)],_0x383f36=_0x35a7c0[_0x3fa6ef(0x444)];this[_0x3fa6ef(0xd62)](_0x5bc5b8,_0x1d7bc4,_0x383f36);},Sprite_Battler['prototype'][_0x1e608f(0xb10)]=function(_0x8a709d,_0x1eb525){const _0x579adc=_0x1e608f,_0x560e01=VisuMZ[_0x579adc(0xce2)][_0x579adc(0x4a9)][_0x579adc(0xa6a)];this[_0x579adc(0x96e)]=Math[_0x579adc(0x958)]((_0x560e01[_0x579adc(0x7dc)]??0x18)*_0x1eb525),this['_shakeFlinchPower']=Math[_0x579adc(0x127)](this['_shakeFlinchPower'],_0x8a709d);},Sprite_Battler['prototype'][_0x1e608f(0x227)]=function(){const _0x797332=_0x1e608f,_0x3cbd2f=VisuMZ[_0x797332(0xce2)][_0x797332(0x4a9)]['Actor'];if(!(_0x3cbd2f[_0x797332(0x7d3)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x446dba=this['_shakeFlinchDuration'];this[_0x797332(0xabb)]=this[_0x797332(0xabb)]*(_0x446dba-0x1)/_0x446dba,this[_0x797332(0x96e)]--;if(this[_0x797332(0x96e)]<=0x0){if(_0x797332(0x2da)===_0x797332(0x2da))this['_shakeFlinchPower']=0x0;else return _0x58d79c[_0x797332(0xce2)][_0x797332(0x4a9)][_0x797332(0xa6a)][_0x797332(0x670)]||![];}}if(this[_0x797332(0xabb)]>0x0){if('EroCz'===_0x797332(0xc3b))_0x5d1448+=_0x35b5d0[_0x797332(0xa6a)][_0x797332(0x4df)]||0x0,_0x494adf+=_0xc2c0d7[_0x797332(0xa6a)][_0x797332(0x2c2)]||0x0;else{this[_0x797332(0xc27)]['x']=Math[_0x797332(0xab4)](this[_0x797332(0xabb)])*(Math['random']()<0.5?-0x1:0x1);if(this[_0x797332(0x171)]!==this['y']){if(_0x797332(0xb0b)===_0x797332(0x2a4)){this[_0x797332(0x474)]=_0x4d9375;const _0x2bb1d4=this[_0x797332(0x6aa)](),_0x25582b=this[_0x797332(0x8cf)](),_0x353fa2=_0x256883[_0x797332(0xbe1)][_0x797332(0x4a7)]();this[_0x797332(0x621)](),this['bitmap'][_0x797332(0x639)](),this['bitmap'][_0x797332(0xb96)](_0x2bb1d4,0x0,0x0,_0x25582b,_0x353fa2,_0x797332(0x624));}else this[_0x797332(0xc27)]['y']=this[_0x797332(0x96b)]*0.5,this[_0x797332(0xc27)]['y']+=Math[_0x797332(0xab4)](this[_0x797332(0xabb)])*(Math['random']()<0.5?-0x1:0x1);}}}else _0x797332(0x481)!=='HWYtP'?(this['_mainSprite']['x']=0x0,this[_0x797332(0xc27)]['y']=this['height']*0.5):_0xe070e3=this[_0x797332(0x42e)]()[_0x797332(0xb9c)]||0x0;},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor[_0x1e608f(0xbe1)]['initMembers'],Sprite_Actor['prototype']['initMembers']=function(){const _0xe824b3=_0x1e608f;VisuMZ[_0xe824b3(0xce2)][_0xe824b3(0xd88)][_0xe824b3(0x2d7)](this),this[_0xe824b3(0x694)]();},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x188)]=function(){const _0x21ab40=_0x1e608f;return this[_0x21ab40(0x8e8)]||this['_mainSprite']||this;},VisuMZ[_0x1e608f(0xce2)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbfb)],Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbfb)]=function(){},Sprite_Actor['prototype'][_0x1e608f(0x55c)]=function(_0x5432ee){const _0x118896=_0x1e608f;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x5432ee)return;if(!_0x5432ee[_0x118896(0xd81)]())return;VisuMZ[_0x118896(0xce2)][_0x118896(0x776)][_0x118896(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd0b)]=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x677)],Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x677)]=function(_0x34c82c){const _0x3bebc1=_0x1e608f;VisuMZ[_0x3bebc1(0xce2)][_0x3bebc1(0x4a9)][_0x3bebc1(0xa6a)][_0x3bebc1(0x45b)]?_0x3bebc1(0x108)!==_0x3bebc1(0x108)?this[_0x3bebc1(0xb3f)]():VisuMZ[_0x3bebc1(0xce2)]['Settings'][_0x3bebc1(0xa6a)][_0x3bebc1(0x45b)][_0x3bebc1(0x2d7)](this,_0x34c82c):VisuMZ[_0x3bebc1(0xce2)][_0x3bebc1(0xd0b)]['call'](this,_0x34c82c);},VisuMZ[_0x1e608f(0xce2)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x9c8)],Sprite_Actor['prototype'][_0x1e608f(0x9c8)]=function(_0x861ea9){const _0x5b8741=_0x1e608f;VisuMZ[_0x5b8741(0xce2)]['Sprite_Actor_setBattler'][_0x5b8741(0x2d7)](this,_0x861ea9),this[_0x5b8741(0x1bd)](_0x861ea9);},Sprite_Actor[_0x1e608f(0xbe1)]['setBattlerBattleCore']=function(_0x241465){const _0x593909=_0x1e608f;if(!_0x241465)return;if(!this[_0x593909(0xc27)])return;this['_mainSprite'][_0x593909(0x2f7)]['x']=this['_actor'][_0x593909(0x920)](),this[_0x593909(0xc27)]['anchor']['y']=this[_0x593909(0xa5d)]['svBattlerAnchorY'](),this[_0x593909(0xd14)]();},VisuMZ['BattleCore']['Sprite_Actor_update']=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x593)],Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x6edc85=_0x1e608f;VisuMZ[_0x6edc85(0xce2)]['Sprite_Actor_update'][_0x6edc85(0x2d7)](this),this[_0x6edc85(0xa5d)]&&(this[_0x6edc85(0x54b)](),this[_0x6edc85(0x2c4)]());},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x107)]=Sprite_Actor[_0x1e608f(0xbe1)]['updateBitmap'],Sprite_Actor['prototype'][_0x1e608f(0x461)]=function(){const _0x5c0f4c=_0x1e608f;VisuMZ[_0x5c0f4c(0xce2)]['Sprite_Actor_updateBitmap'][_0x5c0f4c(0x2d7)](this),this[_0x5c0f4c(0xc27)]&&this[_0x5c0f4c(0xc27)]['bitmap']&&this[_0x5c0f4c(0x606)]&&(_0x5c0f4c(0x935)!==_0x5c0f4c(0x935)?(this['_growX']=(this[_0x5c0f4c(0xb0e)]*(_0x4b23a0-0x1)+this[_0x5c0f4c(0x126)])/_0x252080,this[_0x5c0f4c(0x856)]=(this[_0x5c0f4c(0x856)]*(_0x2a2ff9-0x1)+this['_targetGrowY'])/_0x46b9f1):this[_0x5c0f4c(0xc27)][_0x5c0f4c(0x34b)][_0x5c0f4c(0x9d1)]!==this[_0x5c0f4c(0x606)][_0x5c0f4c(0x4f8)]()&&(_0x5c0f4c(0x82c)==='xBWEN'?this[_0x5c0f4c(0x4e7)]():this[_0x5c0f4c(0xc27)]['bitmap'][_0x5c0f4c(0x9d1)]=this[_0x5c0f4c(0x606)]['battlerSmoothImage']()));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x411)]=Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x1be)],Sprite_Actor[_0x1e608f(0xbe1)]['updateShadow']=function(){const _0x5aafe8=_0x1e608f;VisuMZ[_0x5aafe8(0xce2)]['Sprite_Actor_updateShadow'][_0x5aafe8(0x2d7)](this),this[_0x5aafe8(0x131)]();},Sprite_Actor[_0x1e608f(0xbe1)]['updateShadowBattleCore']=function(){const _0x29da1a=_0x1e608f;if(!this[_0x29da1a(0xc27)])return;if(!this[_0x29da1a(0x574)])return;this[_0x29da1a(0xd14)](),this[_0x29da1a(0x17a)]();},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x54b)]=function(){const _0x1f9797=_0x1e608f;this[_0x1f9797(0x5bd)]['scale']['x']=0x1/(this[_0x1f9797(0x6e9)]['x']||0.001),this[_0x1f9797(0x5bd)][_0x1f9797(0x6e9)]['y']=0x1/(this[_0x1f9797(0x6e9)]['y']||0.001);},Sprite_Actor[_0x1e608f(0xbe1)]['updateStyleOpacity']=function(){const _0x26159b=_0x1e608f;if(!$gameSystem['isSideView']()&&this['constructor']===Sprite_Actor){const _0x47e760=Scene_Battle['prototype'][_0x26159b(0x687)]();[_0x26159b(0x702),_0x26159b(0x68e),_0x26159b(0x3d5),_0x26159b(0xd11)][_0x26159b(0xc3d)](_0x47e760)&&(this[_0x26159b(0xb1b)]=0x0);}},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x36c)]=function(){const _0x3f8587=_0x1e608f,_0x7e73c4=this[_0x3f8587(0xa5d)];if(_0x7e73c4){const _0x31c242=_0x7e73c4[_0x3f8587(0x9c5)]();if(_0x7e73c4[_0x3f8587(0x886)]()||_0x7e73c4[_0x3f8587(0x991)]())this[_0x3f8587(0x6c9)](_0x3f8587(0x504));else{if(_0x31c242===0x3)this[_0x3f8587(0x6c9)](_0x3f8587(0x2bf));else{if(_0x31c242===0x2)this[_0x3f8587(0x6c9)]('sleep');else{if(this[_0x3f8587(0x4bb)])this[_0x3f8587(0x6c9)](_0x3f8587(0x5aa));else{if(_0x7e73c4[_0x3f8587(0x135)]()){if(_0x3f8587(0x3ab)!==_0x3f8587(0x3ab)){const _0x26fc51=_0xe38c88[_0x3f8587(0x8fc)](_0x18b761[_0x3f8587(0xb11)]()['trim']());_0x26fc51>=0x0&&_0x26fc51<=0x7&&_0x1fdf4e[_0x3f8587(0x8a0)](_0x26fc51)&&_0x4d4a9d[_0x3f8587(0xaea)](_0x26fc51);}else this[_0x3f8587(0x6c9)](_0x3f8587(0x380));}else{if(_0x7e73c4[_0x3f8587(0xcd3)]())_0x3f8587(0x5de)===_0x3f8587(0x6a3)?(this['_activeWeaponSlot']=_0xede92,this[_0x3f8587(0xa80)]={}):this['startMotion'](_0x3f8587(0xcf6));else{if(_0x7e73c4[_0x3f8587(0x5c7)]()||_0x7e73c4['isGuardWaiting']())this[_0x3f8587(0x6c9)]('guard');else{if(_0x31c242===0x1)this[_0x3f8587(0x6c9)]('abnormal');else{if(_0x7e73c4[_0x3f8587(0x5bf)]())_0x3f8587(0x84a)!==_0x3f8587(0x84a)?(this[_0x3f8587(0xbd5)]=0x0,this[_0x3f8587(0x7b7)]=0x0):this[_0x3f8587(0x6c9)](_0x3f8587(0x54a));else{if(_0x7e73c4[_0x3f8587(0xc60)]())this[_0x3f8587(0x6c9)](_0x3f8587(0x504));else{if(_0x7e73c4[_0x3f8587(0x509)]()){if(_0x3f8587(0x792)!==_0x3f8587(0x792)){if(this[_0x3f8587(0xa5d)]){if(!_0x22237e[_0x3f8587(0x263)][_0x3f8587(0x2e0)](this[_0x3f8587(0xa5d)],_0x31314a))return!![];if(!_0x3f99f2[_0x3f8587(0x263)]['CheckVisibleSwitchNotetags'](this[_0x3f8587(0xa5d)],_0x180c6e))return!![];if(!_0x2b9d46[_0x3f8587(0x263)]['CheckVisibleSkillNotetags'](this[_0x3f8587(0xa5d)],_0x4d7424))return!![];}}else this[_0x3f8587(0x6c9)](_0x3f8587(0x380));}else _0x3f8587(0x744)!==_0x3f8587(0x483)?this[_0x3f8587(0x6c9)]('walk'):!_0x27d6af['battleMembers']()[_0x3f8587(0xc3d)](this[_0x3f8587(0x38c)])&&(this[_0x3f8587(0x38c)]=null);}}}}}}}}}}}},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xcc3)]=function(){const _0x2aab5d=_0x1e608f,_0x3f0f27=0xa,_0x55552c=0x12c*_0x3f0f27,_0x5705c3=0x1e*_0x3f0f27;this[_0x2aab5d(0xd62)](_0x55552c,0x0,_0x5705c3);},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x9bf)]=function(){const _0x2c602=_0x1e608f;Sprite_Battler[_0x2c602(0xbe1)][_0x2c602(0x9bf)][_0x2c602(0x2d7)](this);},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xaab)]=function(){const _0x4e5fd2=_0x1e608f;return Sprite_Battler[_0x4e5fd2(0xa12)];},Sprite_Weapon['prototype'][_0x1e608f(0x3f6)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xbbf)]=function(){},Sprite_Actor[_0x1e608f(0xbe1)]['setupWeaponAnimation']=function(){},Sprite_Actor['prototype'][_0x1e608f(0x3ee)]=function(){const _0x5ca7cc=_0x1e608f;if(this[_0x5ca7cc(0x4c8)]&&++this[_0x5ca7cc(0x623)]>=this['motionSpeed']()){if(this[_0x5ca7cc(0x4c8)][_0x5ca7cc(0xcc7)])this[_0x5ca7cc(0x3d7)]=(this['_pattern']+0x1)%0x4;else this['_pattern']<0x2?_0x5ca7cc(0x2b1)==='NRuZk'?this['autoSelectPriority']():this['_pattern']++:this[_0x5ca7cc(0x36c)]();this['_motionCount']=0x0;}},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x8d4)]=function(_0x52e6ec){const _0x417388=_0x1e608f;if(_0x52e6ec===_0x417388(0xb86))this['_checkOn']=!![];if(this[_0x417388(0x606)]&&this[_0x417388(0x606)][_0x417388(0xbdc)]()){this[_0x417388(0x4c8)]=Sprite_Actor[_0x417388(0x6b2)][_0x417388(0x2bf)];return;}const _0xb0dcec=Sprite_Actor[_0x417388(0x6b2)][_0x52e6ec];this[_0x417388(0x4c8)]=_0xb0dcec,this[_0x417388(0x623)]=0x0,this[_0x417388(0x3d7)]=0x0;},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0xd45)]=function(_0x24f0f){const _0x140a5f=_0x1e608f;if(this[_0x140a5f(0x578)]())return;this[_0x140a5f(0xd66)](),this[_0x140a5f(0xcbb)][_0x140a5f(0x429)](_0x24f0f),this[_0x140a5f(0xa5d)][_0x140a5f(0x246)]();},Sprite_Actor['prototype'][_0x1e608f(0xd66)]=function(){const _0x5720fc=_0x1e608f;let _0x380150=-0x10,_0x3e68ed=this[_0x5720fc(0x96b)]*0.5;const _0x3f25cf=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x211cd4=this[_0x5720fc(0x606)][_0x5720fc(0x6ab)]()['map'](_0x423760=>_0x423760&&_0x423760[_0x5720fc(0xb2d)][_0x5720fc(0x97b)](_0x3f25cf)?Number(RegExp['$1']):0x0),_0x4d079e=this[_0x5720fc(0x606)][_0x5720fc(0x6ab)]()[_0x5720fc(0x725)](_0x417f02=>_0x417f02&&_0x417f02[_0x5720fc(0xb2d)][_0x5720fc(0x97b)](_0x3f25cf)?Number(RegExp['$2']):0x0);_0x380150=_0x211cd4['reduce']((_0x253f13,_0x5bda15)=>_0x253f13+_0x5bda15,_0x380150),_0x3e68ed=_0x4d079e[_0x5720fc(0x6a6)]((_0x1f45aa,_0x10e87a)=>_0x1f45aa+_0x10e87a,_0x3e68ed),this[_0x5720fc(0xcbb)]['x']=_0x380150,this[_0x5720fc(0xcbb)]['y']=_0x3e68ed,this['_weaponSprite']['update']();},Sprite_Weapon[_0x1e608f(0xbe1)][_0x1e608f(0x429)]=function(_0x5378c4){const _0x41ec22=_0x1e608f;this[_0x41ec22(0x18a)]=_0x5378c4,this[_0x41ec22(0x26e)]=-0x1,this['_pattern']=0x0,this[_0x41ec22(0x230)](),this['updateFrame']();},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x2f6)]=function(){},Sprite_Actor['prototype'][_0x1e608f(0x533)]=function(){const _0x1c2cba=_0x1e608f,_0xd32e4a=VisuMZ[_0x1c2cba(0xce2)]['Settings'][_0x1c2cba(0x151)],_0x399c71=_0xd32e4a[_0x1c2cba(0x6d1)],_0x37373c=_0xd32e4a[_0x1c2cba(0xb8c)],_0x5a533f=_0xd32e4a[_0x1c2cba(0x765)];this['startMove'](-_0x399c71,-_0x37373c,_0x5a533f);},VisuMZ['BattleCore'][_0x1e608f(0xb1f)]=Sprite_Actor[_0x1e608f(0xbe1)]['updateFrame'],Sprite_Actor['prototype'][_0x1e608f(0x5ad)]=function(){const _0x2d5ce4=_0x1e608f;if(this['hasStaticSvBattler']()){if('mefgz'!==_0x2d5ce4(0xc50)){if(!_0x396a83[_0x2d5ce4(0x5f2)]())return;const _0x4c4f51=_0x2bfb8a['getLastPluginCommandInterpreter']();if(!_0x4c4f51)return;_0x4c4f51[_0x2d5ce4(0x7b2)](_0x2d5ce4(0x407));}else this[_0x2d5ce4(0x960)]();}else this[_0x2d5ce4(0x9e6)](),VisuMZ[_0x2d5ce4(0xce2)][_0x2d5ce4(0xb1f)][_0x2d5ce4(0x2d7)](this);},Sprite_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x9e6)]=function(){const _0x5a0c4e=_0x1e608f;if(this[_0x5a0c4e(0x606)]&&this[_0x5a0c4e(0x606)][_0x5a0c4e(0xc10)]){const _0x43c06b=this[_0x5a0c4e(0x606)]['_freezeMotionData'];this[_0x5a0c4e(0x4c8)]=Sprite_Actor['MOTIONS'][_0x43c06b[_0x5a0c4e(0x795)]],this[_0x5a0c4e(0x3d7)]=_0x43c06b[_0x5a0c4e(0xaf1)];const _0x84c499=this['_weaponSprite'];_0x84c499[_0x5a0c4e(0x577)](_0x43c06b['weaponImageId'],_0x43c06b[_0x5a0c4e(0xaf1)]),this[_0x5a0c4e(0xd66)]();}},Sprite_Weapon[_0x1e608f(0xbe1)]['freezeFrame']=function(_0x44d80c,_0x23b4a4){const _0x431925=_0x1e608f;this[_0x431925(0x18a)]=_0x44d80c,this['_animationCount']=-Infinity,this[_0x431925(0x3d7)]=_0x23b4a4,this[_0x431925(0x230)](),this[_0x431925(0x5ad)]();},Sprite_Enemy[_0x1e608f(0xbe1)]['initMembers']=function(){const _0x2c4885=_0x1e608f;Sprite_Battler[_0x2c4885(0xbe1)][_0x2c4885(0x5a7)][_0x2c4885(0x2d7)](this),this['_enemy']=null,this[_0x2c4885(0x98e)]=![],this[_0x2c4885(0x811)]='',this['_battlerHue']=0x0,this[_0x2c4885(0xc32)]=null,this['_effectDuration']=0x0,this[_0x2c4885(0x4bd)]=0x0,this[_0x2c4885(0x3d8)](),this[_0x2c4885(0x304)]();},VisuMZ['BattleCore'][_0x1e608f(0x430)]=Sprite_Enemy[_0x1e608f(0xbe1)]['update'],Sprite_Enemy[_0x1e608f(0xbe1)]['update']=function(){const _0x599427=_0x1e608f;VisuMZ['BattleCore'][_0x599427(0x430)][_0x599427(0x2d7)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x3d8)]=function(){const _0x339a50=_0x1e608f;this[_0x339a50(0xc27)]=new Sprite(),this[_0x339a50(0xc27)][_0x339a50(0x2f7)]['x']=0.5,this[_0x339a50(0xc27)][_0x339a50(0x2f7)]['y']=0x1,this['addChild'](this[_0x339a50(0xc27)]),this[_0x339a50(0x694)]();},Sprite_Enemy[_0x1e608f(0xbe1)]['mainSprite']=function(){const _0x4373cb=_0x1e608f;return this[_0x4373cb(0x8e8)]||this['_mainSprite']||this;},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x230)]=function(_0x5612f3){const _0x417b11=_0x1e608f;this[_0x417b11(0x34b)]=new Bitmap(0x1,0x1);if(this[_0x417b11(0x7dd)]()){const _0x38b199=this[_0x417b11(0x8f6)][_0x417b11(0x42e)]();this[_0x417b11(0x34b)]=new Bitmap(_0x38b199['width'],_0x38b199[_0x417b11(0x96b)]),this[_0x417b11(0xc27)][_0x417b11(0x34b)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x417b11(0x3e6)]()){const _0xc9c0f0=ImageManager['loadSvEnemy'](_0x5612f3);_0xc9c0f0[_0x417b11(0x10f)](this[_0x417b11(0x9b3)][_0x417b11(0xcdb)](this,_0xc9c0f0));}else{const _0x27b664=ImageManager[_0x417b11(0xc08)](_0x5612f3);_0x27b664[_0x417b11(0x10f)](this['onStaticEnemyBitmapLoad'][_0x417b11(0xcdb)](this,_0x27b664));}}},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x9b3)]=function(_0x28fdaf){const _0x189fd0=_0x1e608f;this[_0x189fd0(0xc27)][_0x189fd0(0x34b)]=_0x28fdaf,this['bitmap']=new Bitmap(_0x28fdaf['width'],_0x28fdaf[_0x189fd0(0x96b)]);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa5b)]=Sprite_Enemy[_0x1e608f(0xbe1)]['setHue'],Sprite_Enemy['prototype'][_0x1e608f(0x1e9)]=function(_0x2e3ada){const _0x1d397e=_0x1e608f;this[_0x1d397e(0xc27)]&&this['_mainSprite'][_0x1d397e(0x1e9)](_0x2e3ada);},VisuMZ[_0x1e608f(0xce2)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x425)],Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x425)]=function(){const _0x4b0095=_0x1e608f;this[_0x4b0095(0x1a0)]()?'KKyda'!==_0x4b0095(0x910)?VisuMZ[_0x4b0095(0xce2)][_0x4b0095(0x5fa)][_0x4b0095(0x2d7)](this):(_0x4a4462[_0x4b0095(0xce2)][_0x4b0095(0x883)]['call'](this,_0x5bab9a,_0x374412),!this[_0x4b0095(0x31a)]()&&_0x49d695&&_0x554957[_0x4b0095(0x5b2)]()[_0x4b0095(0x6c2)]>0x0&&this['performLifeSteal']('MP',_0x33bb24,_0x35c8da['result']()['mpDamage'])):(this[_0x4b0095(0x98e)]=!this[_0x4b0095(0x8f6)][_0x4b0095(0xb69)](),!this[_0x4b0095(0x98e)]&&(_0x4b0095(0x995)===_0x4b0095(0x995)?this[_0x4b0095(0xb1b)]=0x0:(_0x971f7d[_0x4b0095(0xbe1)][_0x4b0095(0xbe3)][_0x4b0095(0x2d7)](this),this[_0x4b0095(0x7c6)](_0x4b0095(0x35f)))));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x321)]=Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xb61)],Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0xb61)]=function(){const _0x16da75=_0x1e608f;if(this[_0x16da75(0x1a0)]())VisuMZ[_0x16da75(0xce2)][_0x16da75(0x321)][_0x16da75(0x2d7)](this);},Sprite_Enemy[_0x1e608f(0xbe1)]['updateFrame']=function(){const _0x16299f=_0x1e608f;Sprite_Battler['prototype']['updateFrame'][_0x16299f(0x2d7)](this);const _0x1a41e8=this[_0x16299f(0x188)]()||this;if(!_0x1a41e8)return;!_0x1a41e8[_0x16299f(0x34b)]&&(_0x1a41e8[_0x16299f(0x34b)]=new Bitmap(this['width']||0x1,this[_0x16299f(0x96b)]||0x1));if(this[_0x16299f(0xc32)]==='bossCollapse'){if(_0x16299f(0x7de)===_0x16299f(0x7de))this[_0x16299f(0xc27)]['setFrame'](0x0,0x0,this[_0x16299f(0xc27)]['width']||0x1,this[_0x16299f(0xa9e)]);else{const _0xedd7b3=_0x394f86(_0x5c8270['$1']);_0x6cef5e[_0x16299f(0x161)]([this],_0xedd7b3,![],![]);}}else{let _0x5832aa=0x1;if(_0x1a41e8&&_0x1a41e8[_0x16299f(0x34b)])_0x5832aa=_0x1a41e8['bitmap']['width'];let _0x307a2b=0x1;if(this[_0x16299f(0x34b)])_0x307a2b=this[_0x16299f(0x34b)][_0x16299f(0x96b)];_0x1a41e8['setFrame'](0x0,0x0,_0x5832aa,_0x307a2b);}},VisuMZ['BattleCore'][_0x1e608f(0x829)]=Sprite_Enemy['prototype'][_0x1e608f(0xc19)],Sprite_Enemy[_0x1e608f(0xbe1)]['updateBossCollapse']=function(){const _0x551854=_0x1e608f;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x551854(0x829)]['call'](this);},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x57b)]=function(){const _0x50d9c1=_0x1e608f;return Sprite_Battler[_0x50d9c1(0xbe1)][_0x50d9c1(0x57b)]['call'](this);},VisuMZ['BattleCore'][_0x1e608f(0xae2)]=Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x54b)],Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x54b)]=function(){const _0x13d873=_0x1e608f;VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite'][_0x13d873(0x2d7)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x1e608f(0xbe1)]['updateStateSpriteBattleCore']=function(){const _0x30eb84=_0x1e608f,_0x458c86=VisuMZ[_0x30eb84(0xce2)][_0x30eb84(0x4a9)][_0x30eb84(0x662)];if(_0x458c86[_0x30eb84(0x87a)]&&!_0x458c86[_0x30eb84(0x259)]){if(_0x30eb84(0xab7)!==_0x30eb84(0xab7))_0x532a0c[_0x30eb84(0xce2)][_0x30eb84(0x107)][_0x30eb84(0x2d7)](this),this['_mainSprite']&&this['_mainSprite'][_0x30eb84(0x34b)]&&this['_battler']&&(this[_0x30eb84(0xc27)]['bitmap']['smooth']!==this[_0x30eb84(0x606)][_0x30eb84(0x4f8)]()&&(this[_0x30eb84(0xc27)][_0x30eb84(0x34b)][_0x30eb84(0x9d1)]=this['_battler']['battlerSmoothImage']()));else{this['_stateIconSprite'][_0x30eb84(0xb1b)]=0x0;return;}}this[_0x30eb84(0x1cc)]['x']=0x0,this[_0x30eb84(0x1cc)]['x']+=this['_battler'][_0x30eb84(0xc29)]();let _0x2c2813=0x1;if(this[_0x30eb84(0x34b)])_0x2c2813=this[_0x30eb84(0x34b)][_0x30eb84(0x96b)];this['_stateIconSprite']['y']=-_0x2c2813-this[_0x30eb84(0x1cc)][_0x30eb84(0x96b)]-0x4,this[_0x30eb84(0x1cc)]['y']+=this['_battler'][_0x30eb84(0x7c9)](),this[_0x30eb84(0x1cc)][_0x30eb84(0x6e9)]['x']=0x1/(this[_0x30eb84(0x6e9)]['x']||0.001),this[_0x30eb84(0x1cc)][_0x30eb84(0x6e9)]['y']=0x1/(this['scale']['y']||0.001),this['hasSvBattler']()&&(this[_0x30eb84(0xc7b)][_0x30eb84(0x5bd)][_0x30eb84(0x6e9)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x30eb84(0xc7b)][_0x30eb84(0x5bd)][_0x30eb84(0x6e9)]['y']=0x1/(this[_0x30eb84(0x6e9)]['y']||0.001));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x82e)]=Sprite_Enemy['prototype'][_0x1e608f(0x9c8)],Sprite_Enemy['prototype'][_0x1e608f(0x9c8)]=function(_0x3a148c){const _0x2386bf=_0x1e608f;VisuMZ['BattleCore'][_0x2386bf(0x82e)][_0x2386bf(0x2d7)](this,_0x3a148c),this['setSvBattlerSprite'](_0x3a148c);},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x9f4)]=function(_0x238405){const _0x79d0dd=_0x1e608f;!this[_0x79d0dd(0xc7b)]&&(this[_0x79d0dd(0xc7b)]=new Sprite_SvEnemy(_0x238405),this[_0x79d0dd(0x694)]()),this['_svBattlerSprite']['setBattler'](_0x238405);},Sprite_Enemy['prototype'][_0x1e608f(0x7dd)]=function(){const _0x14d2c3=_0x1e608f;return this[_0x14d2c3(0x8f6)]&&this[_0x14d2c3(0x8f6)][_0x14d2c3(0x7dd)]();},Sprite_Enemy['prototype'][_0x1e608f(0x1a0)]=function(){const _0x51f67c=_0x1e608f;if(this[_0x51f67c(0x7dd)]())return this[_0x51f67c(0x8f6)]['allowCollapse']();else{if(_0x51f67c(0x706)!==_0x51f67c(0x336))return!![];else{if(!this[_0x51f67c(0x606)][_0x51f67c(0x948)]())return;while(this[_0x51f67c(0x606)][_0x51f67c(0x948)]()){this[_0x51f67c(0x606)][_0x51f67c(0x9fa)]()&&this[_0x51f67c(0x614)]();}this[_0x51f67c(0x606)][_0x51f67c(0x258)](),this['_battler'][_0x51f67c(0xd6a)]();}}},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x36c)]=function(){const _0x3d94ac=_0x1e608f;this['hasSvBattler']()&&this[_0x3d94ac(0xc7b)][_0x3d94ac(0x36c)]();},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x8d4)]=function(_0x3ee585){if(this['hasSvBattler']())this['_svBattlerSprite']['forceMotion'](_0x3ee585);},Sprite_Enemy['prototype'][_0x1e608f(0xd45)]=function(_0x350a43){const _0x3fa44a=_0x1e608f;if(this['hasSvBattler']())this[_0x3fa44a(0xc7b)][_0x3fa44a(0xd45)](_0x350a43);},Sprite_Enemy[_0x1e608f(0xbe1)][_0x1e608f(0x533)]=function(){const _0x9332f8=_0x1e608f,_0xbdf1de=VisuMZ[_0x9332f8(0xce2)]['Settings'][_0x9332f8(0x151)],_0x4ee23e=_0xbdf1de['StepDistanceX'],_0xaf2989=_0xbdf1de[_0x9332f8(0xb8c)],_0x1f4859=_0xbdf1de[_0x9332f8(0x765)];this[_0x9332f8(0xd62)](_0x4ee23e,_0xaf2989,_0x1f4859);};function Sprite_SvEnemy(){const _0x3d3335=_0x1e608f;this[_0x3d3335(0xb89)](...arguments);}Sprite_SvEnemy[_0x1e608f(0xbe1)]=Object[_0x1e608f(0x770)](Sprite_Actor[_0x1e608f(0xbe1)]),Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x5c0)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(_0x4176b1){const _0x1e55a7=_0x1e608f;Sprite_Actor[_0x1e55a7(0xbe1)][_0x1e55a7(0xb89)][_0x1e55a7(0x2d7)](this,_0x4176b1),this[_0x1e55a7(0x6e9)]['x']=-0x1,this['_stateSprite'][_0x1e55a7(0x6e9)]['x']=-0x1;},Sprite_SvEnemy[_0x1e608f(0xbe1)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0xbfb)]=function(){},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x677)]=function(_0x27e285){},Sprite_SvEnemy['prototype']['updateShadow']=function(){},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x17a)]=function(){},Sprite_SvEnemy['prototype'][_0x1e608f(0x54b)]=function(){const _0x1cda78=_0x1e608f;this['_stateSprite'][_0x1cda78(0x734)]=![];},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x461)]=function(){const _0xb79b08=_0x1e608f;Sprite_Battler[_0xb79b08(0xbe1)][_0xb79b08(0x461)][_0xb79b08(0x2d7)](this);const _0x187928=this['_actor'][_0xb79b08(0x2ed)]();this[_0xb79b08(0x811)]!==_0x187928&&(_0xb79b08(0xbef)!=='xiEVK'?(this[_0xb79b08(0x811)]=_0x187928,this['_mainSprite']['bitmap']=ImageManager[_0xb79b08(0x7b1)](_0x187928)):(_0x139a2b[_0xb79b08(0xa16)](),_0x5e56c5['isValid']()?(this[_0xb79b08(0xcc0)](),_0x234589[_0xb79b08(0x224)]()):(_0xeadc50[_0xb79b08(0x224)](),this[_0xb79b08(0xa86)]()))),this[_0xb79b08(0xc27)]&&this[_0xb79b08(0xc27)][_0xb79b08(0x34b)]&&this[_0xb79b08(0x606)]&&(this[_0xb79b08(0xc27)][_0xb79b08(0x34b)][_0xb79b08(0x9d1)]!==this[_0xb79b08(0x606)][_0xb79b08(0x4f8)]()&&(this[_0xb79b08(0xc27)][_0xb79b08(0x34b)][_0xb79b08(0x9d1)]=this['_battler'][_0xb79b08(0x4f8)]()));},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0xcc3)]=function(){},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0xd62)]=function(_0x1c2ae4,_0x53f219,_0x5ec917){const _0x195831=_0x1e608f;if(this[_0x195831(0xbb5)])this[_0x195831(0xbb5)][_0x195831(0xd62)](_0x1c2ae4,_0x53f219,_0x5ec917);},Sprite_SvEnemy['prototype']['refreshMotion']=function(){const _0x5b1f29=_0x1e608f,_0x172bea=this['_actor'];if(_0x172bea){if('njQXw'===_0x5b1f29(0x806))_0x4940dc=_0x29c18e>=_0xe04ef8?_0x3e9609:_0x247ec4;else{const _0x4db63f=_0x172bea[_0x5b1f29(0x9c5)]();if(_0x172bea[_0x5b1f29(0x886)]()||_0x172bea['isActing']())this[_0x5b1f29(0x6c9)]('walk');else{if(_0x4db63f===0x3)_0x5b1f29(0x32e)!==_0x5b1f29(0x32e)?(this['_battlerName']=_0x2ac8db,this['_mainSprite'][_0x5b1f29(0x34b)]=_0x115ea8[_0x5b1f29(0x7b1)](_0xfdc570)):this[_0x5b1f29(0x6c9)](_0x5b1f29(0x2bf));else{if(_0x4db63f===0x2)_0x5b1f29(0xb99)!=='XvZfj'?this['startMotion'](_0x5b1f29(0xceb)):(this[_0x5b1f29(0xc67)][_0x5b1f29(0x512)]=_0x1ba4fc[_0x5b1f29(0x8c2)](),this[_0x5b1f29(0xc67)][_0x5b1f29(0xd4e)]=_0x300a48[_0x5b1f29(0xaf5)]());else{if(_0x172bea['isChanting']()){if(_0x5b1f29(0xd6c)===_0x5b1f29(0xd6c))this[_0x5b1f29(0x6c9)](_0x5b1f29(0xcf6));else{if(_0x2175c0['_animation'][_0x5b1f29(0x236)]!==0x0)return![];}}else{if(_0x172bea[_0x5b1f29(0x5c7)]()||_0x172bea[_0x5b1f29(0xb13)]())this['startMotion']('guard');else{if(_0x4db63f===0x1){if(_0x5b1f29(0x36a)==='qWIhl'){if(!_0xd0aacc[_0x5b1f29(0x875)])return;const _0x1ae0b4=_0x5ed24b['_scene'][_0x5b1f29(0x4b1)];if(!_0x1ae0b4)return;if(_0x1b87cb[_0x5b1f29(0xa04)][_0x5b1f29(0x37f)]<=1.04){_0xe18292(_0x5b1f29(0x589)),_0x5ba376[_0x5b1f29(0x3ea)]();return;}_0x3c0786[_0x5b1f29(0x47c)](_0x1f9ecb,_0x43e7f1);const _0x187fcb=_0x5dd252[_0x5b1f29(0x255)];_0x1ae0b4[_0x5b1f29(0x23e)](_0x187fcb);}else this[_0x5b1f29(0x6c9)](_0x5b1f29(0x71e));}else{if(_0x172bea['isDying']())this['startMotion'](_0x5b1f29(0x54a));else _0x172bea[_0x5b1f29(0xc60)]()?_0x5b1f29(0xc4a)===_0x5b1f29(0xd89)?this[_0x5b1f29(0x9de)]=(this[_0x5b1f29(0x9de)]*(_0x433d6d-0x1)+this[_0x5b1f29(0xc4b)])/_0x240fcc:this[_0x5b1f29(0x6c9)](_0x5b1f29(0x504)):this['startMotion'](_0x172bea[_0x5b1f29(0x42e)]()[_0x5b1f29(0x759)]||'walk');}}}}}}}}},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x175)]=function(){const _0x167ba4=_0x1e608f;return this[_0x167ba4(0xbb5)]?this['parent'][_0x167ba4(0x66d)]===0x0&&this[_0x167ba4(0xbb5)][_0x167ba4(0x5f0)]===0x0:_0x167ba4(0x8c6)!=='ZYGbY'?!![]:this['subject']()[_0x167ba4(0x579)]();},Sprite_SvEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x122)]=function(){},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x484)]=Sprite_Animation[_0x1e608f(0xbe1)][_0x1e608f(0x711)],Sprite_Animation[_0x1e608f(0xbe1)][_0x1e608f(0x711)]=function(_0x39e451){const _0x4cde3e=_0x1e608f;if(_0x39e451[_0x4cde3e(0x8e8)])return this[_0x4cde3e(0x914)](_0x39e451);else{if(_0x4cde3e(0x74b)!==_0x4cde3e(0x3a1))return VisuMZ[_0x4cde3e(0xce2)]['Sprite_Animation_targetSpritePosition'][_0x4cde3e(0x2d7)](this,_0x39e451);else _0x52ca0d[_0x4cde3e(0x2d1)](_0x300df2,_0x11e8c4);}},Sprite_Animation[_0x1e608f(0xbe1)][_0x1e608f(0x914)]=function(_0x415c91){const _0x8e490=_0x1e608f;let _0x7dc175=_0x415c91['x'],_0x404321=_0x415c91['y'],_0x3fa716=_0x415c91['height'],_0x322bfc=_0x415c91[_0x8e490(0x8e8)][_0x8e490(0x6e9)]['y'];_0x415c91['x']=_0x415c91[_0x8e490(0x8d8)]+_0x415c91[_0x8e490(0x1ad)](),_0x415c91['y']=_0x415c91[_0x8e490(0x171)]+_0x415c91[_0x8e490(0xabf)](),_0x415c91[_0x8e490(0x96b)]*=_0x322bfc;let _0x3fd409=VisuMZ[_0x8e490(0xce2)][_0x8e490(0x484)]['call'](this,_0x415c91);return _0x415c91['x']=_0x7dc175,_0x415c91['y']=_0x404321,_0x415c91['height']=_0x3fa716,_0x3fd409;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3f8)]=Sprite_AnimationMV[_0x1e608f(0xbe1)][_0x1e608f(0x234)],Sprite_AnimationMV[_0x1e608f(0xbe1)][_0x1e608f(0x234)]=function(){const _0x34a399=_0x1e608f;VisuMZ[_0x34a399(0xce2)][_0x34a399(0x3f8)][_0x34a399(0x2d7)](this);if(!SceneManager[_0x34a399(0x5f2)]())return;if(this['_animation']['position']===0x3){if(_0x34a399(0xa23)===_0x34a399(0x9cf)){if(!_0x4f570c[_0x34a399(0x5f2)]())return;_0x5445b2['ConvertParams'](_0x5f14f7,_0x453180);const _0x3e29e5=_0x574ae3['_action'],_0x305e83={'arPenRate':_0x35d0db[_0x34a399(0x700)],'arPenFlat':_0x4810d0[_0x34a399(0x1df)],'arRedRate':_0x3aeb40['ArRedRate'],'arRedFlat':_0xcb598e[_0x34a399(0x75e)]};_0x3e29e5['_armorPenetration']=_0x305e83;}else this['x']=Math[_0x34a399(0x1a5)](Graphics[_0x34a399(0x748)]/0x2),this['y']=Math[_0x34a399(0x1a5)](Graphics[_0x34a399(0x865)]/0x2);}else{if(this[_0x34a399(0xb7c)])return;}},Sprite_Damage['prototype'][_0x1e608f(0x712)]=function(_0x3e3596){const _0x3041a4=_0x1e608f,_0x9710a5=_0x3e3596[_0x3041a4(0x1f0)]()||_0x3e3596[_0x3041a4(0x5b2)]();if(_0x9710a5[_0x3041a4(0xa7e)]||_0x9710a5['evaded'])_0x3041a4(0x11b)===_0x3041a4(0x11b)?(this[_0x3041a4(0x78e)]=0x0,this[_0x3041a4(0x7e1)]()):_0x2bd2d3[_0x3041a4(0x2e1)]([_0x1a6166]);else{if(_0x9710a5[_0x3041a4(0x824)]){if('Wyrxy'===_0x3041a4(0x2a1)){if(this[_0x3041a4(0x687)]()===_0x3041a4(0xd11))return this[_0x3041a4(0x209)]();else return this[_0x3041a4(0x281)]()?this[_0x3041a4(0x945)]():_0x1a0dc7[_0x3041a4(0xce2)][_0x3041a4(0x50f)]['call'](this);}else this[_0x3041a4(0x78e)]=_0x9710a5['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x9710a5[_0x3041a4(0xae9)]);}else _0x3e3596[_0x3041a4(0x205)]()&&_0x9710a5[_0x3041a4(0x6c2)]!==0x0&&('DSRMz'!==_0x3041a4(0x9c2)?(_0x1ff11a[_0x3041a4(0xce2)][_0x3041a4(0x34f)][_0x3041a4(0x2d7)](this),this['processRefresh'](),this[_0x3041a4(0xd30)]()):(this['_colorType']=_0x9710a5['mpDamage']>=0x0?0x2:0x3,this[_0x3041a4(0x2a5)](_0x9710a5['mpDamage'])));}_0x9710a5[_0x3041a4(0x2f4)]&&(_0x3041a4(0xc26)==='LdTsa'?this[_0x3041a4(0xa18)]=![]:this[_0x3041a4(0x12f)]());},Sprite_Damage[_0x1e608f(0xbe1)][_0x1e608f(0x429)]=function(_0x7b6fdd){},Sprite_Damage['prototype'][_0x1e608f(0x2a5)]=function(_0x545579){const _0x378ec9=_0x1e608f;let _0x2b56ad=this[_0x378ec9(0x325)](_0x545579);const _0x4e3e4a=this[_0x378ec9(0x422)](),_0x1c910a=Math[_0x378ec9(0x14d)](_0x4e3e4a*0.75);for(let _0x467034=0x0;_0x467034<_0x2b56ad[_0x378ec9(0xcaf)];_0x467034++){if(_0x378ec9(0x4f9)!=='wdLgh'){const _0x17bbf7=this[_0x378ec9(0xcd9)](_0x1c910a,_0x4e3e4a);_0x17bbf7[_0x378ec9(0x34b)][_0x378ec9(0xb96)](_0x2b56ad[_0x467034],0x0,0x0,_0x1c910a,_0x4e3e4a,'center'),_0x17bbf7['x']=(_0x467034-(_0x2b56ad[_0x378ec9(0xcaf)]-0x1)/0x2)*_0x1c910a,_0x17bbf7['dy']=-_0x467034;}else return this[_0x378ec9(0x761)]();}},Sprite_Damage[_0x1e608f(0xbe1)][_0x1e608f(0x325)]=function(_0x3a3ef6){const _0x3c9aef=_0x1e608f;let _0x57cd57=Math[_0x3c9aef(0x799)](_0x3a3ef6)[_0x3c9aef(0xbf4)]();this['useDigitGrouping']()&&(_0x57cd57=VisuMZ[_0x3c9aef(0x710)](_0x57cd57));const _0x1516ac=VisuMZ[_0x3c9aef(0xce2)][_0x3c9aef(0x4a9)]['Damage'];let _0xe2ad58='',_0xecd51e='';switch(this[_0x3c9aef(0x78e)]){case 0x0:_0xe2ad58=_0x1516ac[_0x3c9aef(0x12a)]||_0x3c9aef(0x938),_0xecd51e=TextManager['hp'];if(_0x3a3ef6===0x0)_0xe2ad58='%1';break;case 0x1:_0xe2ad58=_0x1516ac['hpHealingFmt']||_0x3c9aef(0x4ce),_0xecd51e=TextManager['hp'];break;case 0x2:_0xe2ad58=_0x1516ac['mpDamageFmt']||_0x3c9aef(0x93e),_0xecd51e=TextManager['mp'];break;case 0x3:_0xe2ad58=_0x1516ac['mpHealingFmt']||'+%1\x20MP',_0xecd51e=TextManager['mp'];break;}return _0xe2ad58[_0x3c9aef(0x92f)](_0x57cd57,_0xecd51e)[_0x3c9aef(0x2a9)]();},Sprite_Damage[_0x1e608f(0xbe1)]['useDigitGrouping']=function(){const _0x34e38e=_0x1e608f;if(Imported[_0x34e38e(0x8b3)]){if(_0x34e38e(0x75d)==='PTRAJ')return VisuMZ[_0x34e38e(0xc09)]['Settings']['QoL'][_0x34e38e(0xac0)];else{if(!_0x26131f[_0x34e38e(0x5f2)]())return;if(!_0x2f3761[_0x34e38e(0x6d5)])return;_0x57edc6[_0x34e38e(0x47c)](_0x3383a4,_0x5273f7);const _0x5d60c4=_0x491057[_0x34e38e(0x68b)](),_0x50cd4d=_0x2c4caf[_0x34e38e(0x752)];_0x10f3a3['setBattleCameraOffset'](_0x2929ef['OffsetX'],_0x3ce273[_0x34e38e(0x2c2)],_0x413c23[_0x34e38e(0x39d)],_0x6c4086[_0x34e38e(0x9a8)]);if(_0x50cd4d)_0x5d60c4[_0x34e38e(0x7b2)](_0x34e38e(0x594));}}else return _0x34e38e(0x311)!==_0x34e38e(0x311)?_0x3e4839['filter'](_0x4caab6=>_0x4caab6[_0x34e38e(0x205)]()&&_0x4caab6!==_0x332631):![];},Sprite_Damage['prototype']['setupCriticalEffect']=function(){const _0x2a338c=_0x1e608f,_0x494299=VisuMZ['BattleCore'][_0x2a338c(0x4a9)][_0x2a338c(0x2db)];this[_0x2a338c(0xcac)]=_0x494299[_0x2a338c(0xc0a)][_0x2a338c(0xc06)](0x0),this['_flashDuration']=_0x494299[_0x2a338c(0xbff)];},Sprite_Damage[_0x1e608f(0xbe1)]['setupTextPopup']=function(_0x47b873,_0x830136){const _0x3d31ba=_0x1e608f;this[_0x3d31ba(0xcac)]=_0x830136[_0x3d31ba(0xaa6)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x3d31ba(0x346)](this[_0x3d31ba(0xcac)]),this['_flashDuration']=_0x830136[_0x3d31ba(0x464)]||0x0;const _0x5c870d=this[_0x3d31ba(0x422)](),_0x1db51d=Math[_0x3d31ba(0x14d)](_0x5c870d*0x1e),_0x13e5f8=this[_0x3d31ba(0xcd9)](_0x1db51d,_0x5c870d);_0x13e5f8[_0x3d31ba(0x34b)]['textColor']=ColorManager[_0x3d31ba(0xd5a)](_0x830136[_0x3d31ba(0x500)]),_0x13e5f8[_0x3d31ba(0x34b)][_0x3d31ba(0xb96)](_0x47b873,0x0,0x0,_0x1db51d,_0x5c870d,_0x3d31ba(0x624)),_0x13e5f8['dy']=0x0;},Sprite_Damage[_0x1e608f(0xbe1)][_0x1e608f(0x8ca)]=function(_0x3ea84a,_0x3490a9,_0x3992aa){const _0x1c0fe2=_0x1e608f,_0x401371=Math[_0x1c0fe2(0x127)](this[_0x1c0fe2(0x422)](),ImageManager[_0x1c0fe2(0x115)]),_0x3c973e=Math['floor'](_0x401371*0x1e),_0x3ba6fa=this[_0x1c0fe2(0xcd9)](_0x3c973e,_0x401371),_0x5c0662=ImageManager['iconWidth']/0x2,_0x3aa8d5=_0x3ba6fa['bitmap'][_0x1c0fe2(0x9a1)](_0x3490a9+'\x20');_0x3ba6fa[_0x1c0fe2(0x34b)]['textColor']=ColorManager[_0x1c0fe2(0xd5a)](_0x3992aa[_0x1c0fe2(0x500)]),_0x3ba6fa[_0x1c0fe2(0x34b)][_0x1c0fe2(0xb96)](_0x3490a9,_0x5c0662,0x0,_0x3c973e-_0x5c0662,_0x401371,_0x1c0fe2(0x624));const _0x382d58=Math[_0x1c0fe2(0x1a5)]((_0x401371-ImageManager[_0x1c0fe2(0x115)])/0x2),_0xc3a353=_0x3c973e/0x2-ImageManager[_0x1c0fe2(0x202)]-_0x3aa8d5/0x2+_0x5c0662/0x2,_0x550879=ImageManager[_0x1c0fe2(0x5f3)](_0x1c0fe2(0x4a8)),_0x9260f1=ImageManager[_0x1c0fe2(0x202)],_0x23f6ea=ImageManager[_0x1c0fe2(0x115)],_0x1a4841=_0x3ea84a%0x10*_0x9260f1,_0x19c478=Math[_0x1c0fe2(0x14d)](_0x3ea84a/0x10)*_0x23f6ea;_0x3ba6fa[_0x1c0fe2(0x34b)]['blt'](_0x550879,_0x1a4841,_0x19c478,_0x9260f1,_0x23f6ea,_0xc3a353,_0x382d58),this[_0x1c0fe2(0xcac)]=_0x3992aa[_0x1c0fe2(0xaa6)]||[0x0,0x0,0x0,0x0],this[_0x1c0fe2(0xcac)]=JsonEx[_0x1c0fe2(0x346)](this[_0x1c0fe2(0xcac)]),this['_flashDuration']=_0x3992aa['flashDuration']||0x0,_0x3ba6fa['dy']=0x0;},VisuMZ[_0x1e608f(0xce2)]['Sprite_Damage_createChildSprite']=Sprite_Damage[_0x1e608f(0xbe1)][_0x1e608f(0xcd9)],Sprite_Damage['prototype'][_0x1e608f(0xcd9)]=function(_0x2653a3,_0x26f1bc){const _0x326253=_0x1e608f;return _0x26f1bc=Math[_0x326253(0x1a5)](_0x26f1bc*1.2),VisuMZ['BattleCore']['Sprite_Damage_createChildSprite'][_0x326253(0x2d7)](this,_0x2653a3,_0x26f1bc);},VisuMZ[_0x1e608f(0xce2)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x1e608f(0xbe1)]['updateFrame'],Sprite_StateIcon[_0x1e608f(0xbe1)]['updateFrame']=function(){const _0x3304c0=_0x1e608f;VisuMZ[_0x3304c0(0xce2)]['Sprite_StateIcon_updateFrame'][_0x3304c0(0x2d7)](this),this[_0x3304c0(0xb1b)]=this[_0x3304c0(0xbc0)]>0x0?0xff:0x0;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4cb)]=Sprite_Weapon['prototype'][_0x1e608f(0x230)],Sprite_Weapon[_0x1e608f(0xbe1)][_0x1e608f(0x230)]=function(){const _0x3c045c=_0x1e608f;VisuMZ[_0x3c045c(0xce2)][_0x3c045c(0x4cb)]['call'](this),this[_0x3c045c(0x34b)]&&(this[_0x3c045c(0x34b)][_0x3c045c(0x9d1)]=VisuMZ['BattleCore']['Settings'][_0x3c045c(0xa6a)][_0x3c045c(0x2b3)]);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x41c)]=Sprite_Gauge['prototype'][_0x1e608f(0x5cd)],Sprite_Gauge[_0x1e608f(0xbe1)][_0x1e608f(0x5cd)]=function(){const _0x11c955=_0x1e608f;if(this[_0x11c955(0x2df)]!==_0x11c955(0x540))return'OSwXT'===_0x11c955(0xb14)?VisuMZ[_0x11c955(0xce2)][_0x11c955(0x4a9)]['HpGauge'][_0x11c955(0x907)]??0x14:!![];else{if('EUbPF'!==_0x11c955(0x9f3))return VisuMZ[_0x11c955(0xce2)]['Sprite_Gauge_smoothness']['call'](this);else{let _0x4f7cdf=_0x5bdedb[_0x11c955(0xbd9)];_0x4f7cdf*=_0x4800fc['stateRate'](_0x2c79ff),_0x4f7cdf*=this[_0x11c955(0x8b4)]()['attackStatesRate'](_0x467f07),_0x4f7cdf*=this[_0x11c955(0x351)](_0x13af87),_0x5d2025['random']()<_0x4f7cdf&&(_0x56a38a[_0x11c955(0xc1f)]=!![],this[_0x11c955(0xbda)](_0x18e942));}}};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x1e608f(0xbe1)]=Object['create'](Sprite_Gauge[_0x1e608f(0xbe1)]),Sprite_HpGauge[_0x1e608f(0xbe1)][_0x1e608f(0x5c0)]=Sprite_HpGauge,Sprite_HpGauge[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(){const _0x160774=_0x1e608f;Sprite_Gauge['prototype'][_0x160774(0xb89)][_0x160774(0x2d7)](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x1e608f(0xbe1)][_0x1e608f(0x724)]=function(){const _0x43a8cd=_0x1e608f;this[_0x43a8cd(0x34b)][_0x43a8cd(0x639)]();const _0x50061c=this[_0x43a8cd(0x117)]();if(!isNaN(_0x50061c)){if(_0x43a8cd(0xbd6)===_0x43a8cd(0xbd6))this['drawGauge']();else return this[_0x43a8cd(0x673)]||0x0;}};function Sprite_EnemyName(){const _0x1232b9=_0x1e608f;this[_0x1232b9(0xb89)](...arguments);}Sprite_EnemyName[_0x1e608f(0xbe1)]=Object[_0x1e608f(0x770)](Sprite_Name[_0x1e608f(0xbe1)]),Sprite_EnemyName['prototype'][_0x1e608f(0x5c0)]=Sprite_EnemyName,Sprite_EnemyName[_0x1e608f(0xbe1)]['initialize']=function(){const _0x16e206=_0x1e608f;Sprite_Name[_0x16e206(0xbe1)][_0x16e206(0xb89)][_0x16e206(0x2d7)](this),this[_0x16e206(0xc70)]();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0x1ed142=_0x1e608f;Sprite_Name[_0x1ed142(0xbe1)][_0x1ed142(0x5a7)][_0x1ed142(0x2d7)](this),this[_0x1ed142(0xb1b)]=0x0,this[_0x1ed142(0xb98)]=null,this[_0x1ed142(0x2f7)]['x']=0.5,this[_0x1ed142(0x2f7)]['y']=0x0;},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0xc70)]=function(){const _0x35137a=_0x1e608f;VisuMZ['BattleCore'][_0x35137a(0x4a9)]['Enemy'][_0x35137a(0x87a)]&&(_0x35137a(0x85f)!==_0x35137a(0x85f)?(this['_requestRefresh']=![],this['refresh'](),this['updateAttachmentSprites']()):(this[_0x35137a(0x1cc)]=new Sprite_StateIcon(),this[_0x35137a(0x9a5)](this[_0x35137a(0x1cc)])));},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x8cf)]=function(){const _0x53a2a4=_0x1e608f;return Graphics[_0x53a2a4(0x748)];},Sprite_EnemyName['prototype']['bitmapHeight']=function(){const _0x2e8245=_0x1e608f;return this['_lineHeight']=this[_0x2e8245(0xd3e)]||Window_Base['prototype'][_0x2e8245(0x4a7)]()||0x24,this[_0x2e8245(0xd3e)]*0x4;},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x422)]=function(){const _0x594eaf=_0x1e608f;return VisuMZ[_0x594eaf(0xce2)][_0x594eaf(0x4a9)][_0x594eaf(0x662)][_0x594eaf(0x7ab)]||$gameSystem[_0x594eaf(0xd40)]();},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x8b1)]=function(_0xa6a9f0){this['_linkedSprite']=_0xa6a9f0;},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x5c841f=_0x1e608f;Sprite_Name[_0x5c841f(0xbe1)][_0x5c841f(0x593)][_0x5c841f(0x2d7)](this),this[_0x5c841f(0x9c0)](),this[_0x5c841f(0x234)](),this[_0x5c841f(0x868)](),this['updateOpacity']();},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x724)]=function(){const _0x596dd1=_0x1e608f;this[_0x596dd1(0x474)]=undefined;const _0x56a4d0=this[_0x596dd1(0x6aa)](),_0x3b5535=this[_0x596dd1(0x8cf)](),_0x33bb67=Window_Base[_0x596dd1(0xbe1)][_0x596dd1(0x4a7)]();this[_0x596dd1(0x621)](),this[_0x596dd1(0x34b)][_0x596dd1(0x639)](),this[_0x596dd1(0x34b)]['drawText'](_0x56a4d0,0x0,0x0,_0x3b5535,_0x33bb67,'center');},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x9c0)]=function(){const _0x20bc01=_0x1e608f;if(!this[_0x20bc01(0xb98)])return;this[_0x20bc01(0x606)]!==this[_0x20bc01(0xb98)]['_battler']&&this[_0x20bc01(0x429)](this[_0x20bc01(0xb98)][_0x20bc01(0x606)]);},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x234)]=function(){const _0x2ca949=_0x1e608f;if(!this['_linkedSprite'])return;this['_lineHeight']=this['_lineHeight']||Window_Base[_0x2ca949(0xbe1)][_0x2ca949(0x4a7)](),this['x']=Math['round'](this[_0x2ca949(0xb98)][_0x2ca949(0x8d8)]),this['y']=Math['round'](this[_0x2ca949(0xb98)][_0x2ca949(0x171)]-this[_0x2ca949(0xd3e)]*0.5);const _0x3a1d05=VisuMZ[_0x2ca949(0xce2)][_0x2ca949(0x4a9)][_0x2ca949(0x662)];this['x']+=Math['round'](_0x3a1d05['NameOffsetX']||0x0),this['y']+=Math[_0x2ca949(0x1a5)](_0x3a1d05[_0x2ca949(0x360)]||0x0);},Sprite_EnemyName['prototype'][_0x1e608f(0x868)]=function(){const _0x4c778d=_0x1e608f;this[_0x4c778d(0x9c7)]();},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x9c7)]=function(){const _0x985432=_0x1e608f;if(!this[_0x985432(0x1cc)])return;this['_battler']!==this[_0x985432(0x1cc)][_0x985432(0x606)]&&this['_stateIconSprite'][_0x985432(0x429)](this[_0x985432(0x606)]);const _0x25854e=this[_0x985432(0xd6d)]();this[_0x985432(0xd3e)]=this[_0x985432(0xd3e)]||Window_Base['prototype'][_0x985432(0x4a7)](),this[_0x985432(0x1cc)]['x']=Math['round']((_0x25854e+ImageManager[_0x985432(0x202)])/0x2)+0x8,this[_0x985432(0x1cc)]['y']=this[_0x985432(0xd3e)]/0x2;const _0x3242e2=VisuMZ[_0x985432(0xce2)]['Settings'][_0x985432(0x662)];this[_0x985432(0x1cc)]['x']+=_0x3242e2[_0x985432(0x166)]||0x0,this['_stateIconSprite']['y']+=_0x3242e2[_0x985432(0x838)]||0x0;},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x1a3)]=function(){const _0x5f4b9d=_0x1e608f,_0x24170b=this[_0x5f4b9d(0x962)]();if(_0x24170b&&this['opacity']<0xff){if(_0x5f4b9d(0x3d6)!=='aepiS')return this[_0x5f4b9d(0x32c)]()[_0x5f4b9d(0x93a)](_0x66d8e=>_0x66d8e[_0x5f4b9d(0x3a7)]());else this[_0x5f4b9d(0xb1b)]+=0x10;}else!_0x24170b&&this['opacity']>0x0&&(_0x5f4b9d(0xae1)===_0x5f4b9d(0xae1)?this['opacity']-=0x10:(this[_0x5f4b9d(0x574)]=new _0x31dd52(),this[_0x5f4b9d(0x574)][_0x5f4b9d(0x34b)]=_0x193965[_0x5f4b9d(0x5f3)]('Shadow2'),this[_0x5f4b9d(0x574)]['bitmap'][_0x5f4b9d(0x9d1)]=_0x3a3d5a['BattleCore'][_0x5f4b9d(0x4a9)][_0x5f4b9d(0xa6a)][_0x5f4b9d(0x2b3)],this[_0x5f4b9d(0x574)][_0x5f4b9d(0x2f7)]['x']=0.5,this[_0x5f4b9d(0x574)][_0x5f4b9d(0x2f7)]['y']=0.5,this[_0x5f4b9d(0x574)]['y']=-0x2,this[_0x5f4b9d(0x574)]['visible']=![],this['addChild'](this[_0x5f4b9d(0x574)])));},Sprite_EnemyName[_0x1e608f(0xbe1)]['visibilityState']=function(){const _0x3762ac=_0x1e608f;if(this[_0x3762ac(0x4d5)]())return![];else{if(!this[_0x3762ac(0x606)])return![];else{if(this['_battler']['isDead']())return![];else{if(!this[_0x3762ac(0x606)][_0x3762ac(0x5d6)]())return![];else{if(this['compatibilityVisible']()){if('nbGPC'===_0x3762ac(0xc8b))return!![];else _0x9bafaf+=_0x44c906,_0x364f35+=_0x3f1f3e;}else{if(this[_0x3762ac(0x4d2)]()){if(_0x3762ac(0xc44)==='rGFZc')this[_0x3762ac(0x578)]()?this[_0x3762ac(0x960)]():(this['applyFreezeMotionFrames'](),_0x3cd5a3['BattleCore'][_0x3762ac(0xb1f)][_0x3762ac(0x2d7)](this));else return!![];}else{if(this[_0x3762ac(0x20e)]())return!![];else{if(this[_0x3762ac(0xb1b)]>0x0){if(_0x3762ac(0x79b)===_0x3762ac(0xad6)){this[_0x3762ac(0x184)](_0x21bcec);if(_0x4a7c8d[_0x3762ac(0xba2)]()){const _0x5cfccb=_0x32fab5[_0x3762ac(0xb81)]()[_0x58c2e4],_0x4e7060=_0x8f0a60[_0x3762ac(0x374)][_0x3762ac(0x8fc)](_0x5cfccb);_0x4e7060>=0x0&&(_0x51a731['select'](_0x4e7060),_0x550114[_0x3762ac(0xba3)]());}}else return![];}}}}}}}}},Sprite_EnemyName[_0x1e608f(0xbe1)]['isAlwaysHidden']=function(){const _0x32c8a5=_0x1e608f;return VisuMZ[_0x32c8a5(0xce2)][_0x32c8a5(0x4a9)][_0x32c8a5(0x662)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x1e608f(0xbe1)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x4d2)]=function(){const _0x27515c=_0x1e608f;return VisuMZ[_0x27515c(0xce2)]['Settings'][_0x27515c(0x662)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x20e)]=function(){const _0x2bbb10=_0x1e608f;return VisuMZ[_0x2bbb10(0xce2)]['Settings'][_0x2bbb10(0x662)][_0x2bbb10(0x98d)]?_0x2bbb10(0x524)===_0x2bbb10(0x524)?this['_battler'][_0x2bbb10(0xbd7)]():this[_0x2bbb10(0xbb5)][_0x2bbb10(0x66d)]===0x0&&this[_0x2bbb10(0xbb5)]['_offsetY']===0x0:SceneManager[_0x2bbb10(0x327)][_0x2bbb10(0x5fc)]&&SceneManager['_scene']['_enemyWindow'][_0x2bbb10(0x197)]&&SceneManager['_scene']['_enemyWindow'][_0x2bbb10(0x374)]['includes'](this[_0x2bbb10(0x606)]);},Sprite_EnemyName['prototype'][_0x1e608f(0xd6d)]=function(){const _0x443dee=_0x1e608f;if(!this[_0x443dee(0x606)])return 0x0;if(this[_0x443dee(0x474)])return this[_0x443dee(0x474)];const _0x2618b6=this[_0x443dee(0x6aa)]();return this['setupFont'](),this[_0x443dee(0x474)]=this[_0x443dee(0x34b)][_0x443dee(0x9a1)](_0x2618b6)||0x1,this[_0x443dee(0x474)];},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x7cc)]=Sprite_Battleback[_0x1e608f(0xbe1)][_0x1e608f(0xb3e)],Sprite_Battleback[_0x1e608f(0xbe1)][_0x1e608f(0xb3e)]=function(){const _0x272911=_0x1e608f,_0x594da8=VisuMZ[_0x272911(0xce2)][_0x272911(0x4a9)][_0x272911(0x680)];if(!_0x594da8)return VisuMZ['BattleCore'][_0x272911(0x7cc)]['call'](this);const _0x6a866b=String(_0x594da8[_0x272911(0x98c)])||'MZ';switch(_0x6a866b){case'MZ':VisuMZ['BattleCore'][_0x272911(0x7cc)][_0x272911(0x2d7)](this);break;case'1:1':this[_0x272911(0x31d)]();break;case _0x272911(0x148):this[_0x272911(0x8a3)]();break;case _0x272911(0x63f):this[_0x272911(0x2b4)]();break;case _0x272911(0x25e):this[_0x272911(0xb7e)]();break;}},Sprite_Battleback[_0x1e608f(0xbe1)][_0x1e608f(0x31d)]=function(){const _0x39c50a=_0x1e608f,_0x5e8261=VisuMZ[_0x39c50a(0xce2)][_0x39c50a(0x4a9)]['BattlebackScale'];if(_0x5e8261&&_0x5e8261[_0x39c50a(0x1a1)])return _0x5e8261[_0x39c50a(0x1a1)][_0x39c50a(0x2d7)](this);this[_0x39c50a(0x78f)]=Graphics[_0x39c50a(0x78f)],this[_0x39c50a(0x96b)]=Graphics['height'];const _0x19bd72=0x1;this[_0x39c50a(0x6e9)]['x']=_0x19bd72,this[_0x39c50a(0x6e9)]['y']=_0x19bd72,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x1e608f(0xbe1)][_0x1e608f(0x8a3)]=function(){const _0x28005e=_0x1e608f,_0x25b8be=VisuMZ[_0x28005e(0xce2)][_0x28005e(0x4a9)][_0x28005e(0x680)];if(_0x25b8be&&_0x25b8be['jsScaleToFit']){if(_0x28005e(0x3c4)===_0x28005e(0x3c4))return _0x25b8be[_0x28005e(0x86d)][_0x28005e(0x2d7)](this);else{if(_0x99eca2['isActor']()&&!_0x37ccbd[_0x28005e(0x3e6)]())return;const _0x333c17=_0x23a401[_0x28005e(0x8dd)]();if(_0x333c17&&_0x168665['isActor']())this[_0x28005e(0xce9)][_0x28005e(0x9a5)](_0x333c17);}}this['width']=Graphics[_0x28005e(0x78f)],this[_0x28005e(0x96b)]=Graphics['height'];const _0xb75449=this['width']/this[_0x28005e(0x34b)]['width'],_0x163d7a=this[_0x28005e(0x96b)]/this[_0x28005e(0x34b)]['height'],_0x18b3d9=Math[_0x28005e(0x127)](_0xb75449,_0x163d7a);this['scale']['x']=_0x18b3d9,this[_0x28005e(0x6e9)]['y']=_0x18b3d9,this['x']=(Graphics['width']-this[_0x28005e(0x78f)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback[_0x1e608f(0xbe1)][_0x1e608f(0x2b4)]=function(){const _0x24ec98=_0x1e608f,_0x181b56=VisuMZ[_0x24ec98(0xce2)]['Settings'][_0x24ec98(0x680)];if(_0x181b56&&_0x181b56[_0x24ec98(0x4ec)])return _0x181b56[_0x24ec98(0x4ec)][_0x24ec98(0x2d7)](this);this[_0x24ec98(0x78f)]=Graphics[_0x24ec98(0x78f)],this[_0x24ec98(0x96b)]=Graphics[_0x24ec98(0x96b)];const _0x4c3ba6=Math[_0x24ec98(0xb27)](0x1,this[_0x24ec98(0x78f)]/this[_0x24ec98(0x34b)][_0x24ec98(0x78f)]),_0x1c20ba=Math[_0x24ec98(0xb27)](0x1,this[_0x24ec98(0x96b)]/this['bitmap']['height']),_0x2fac6e=Math[_0x24ec98(0x127)](_0x4c3ba6,_0x1c20ba);this[_0x24ec98(0x6e9)]['x']=_0x2fac6e,this[_0x24ec98(0x6e9)]['y']=_0x2fac6e,this['x']=(Graphics['width']-this[_0x24ec98(0x78f)])/0x2,this['y']=Graphics[_0x24ec98(0x96b)]-this['height'];},Sprite_Battleback['prototype'][_0x1e608f(0xb7e)]=function(){const _0x209e48=_0x1e608f,_0x448ee2=VisuMZ['BattleCore'][_0x209e48(0x4a9)][_0x209e48(0x680)];if(_0x448ee2&&_0x448ee2[_0x209e48(0x41a)])return _0x448ee2[_0x209e48(0x41a)][_0x209e48(0x2d7)](this);this[_0x209e48(0x78f)]=Graphics[_0x209e48(0x78f)],this['height']=Graphics[_0x209e48(0x96b)];const _0x368910=Math[_0x209e48(0x127)](0x1,this['width']/this[_0x209e48(0x34b)][_0x209e48(0x78f)]),_0x46fed8=Math[_0x209e48(0x127)](0x1,this[_0x209e48(0x96b)]/this['bitmap'][_0x209e48(0x96b)]),_0x3d1c83=Math[_0x209e48(0x127)](_0x368910,_0x46fed8);this[_0x209e48(0x6e9)]['x']=_0x3d1c83,this[_0x209e48(0x6e9)]['y']=_0x3d1c83,this['x']=(Graphics[_0x209e48(0x78f)]-this[_0x209e48(0x78f)])/0x2,this['y']=Graphics[_0x209e48(0x96b)]-this[_0x209e48(0x96b)];},Spriteset_Battle[_0x1e608f(0x48f)]=![],Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x369)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype'][_0x1e608f(0x893)]=function(){return 0x0;},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xa4c)]=function(){return 0x0;},VisuMZ[_0x1e608f(0xce2)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x1e608f(0xb63)],Spriteset_Battle[_0x1e608f(0xbe1)]['createLowerLayer']=function(){const _0x26d8ee=_0x1e608f;VisuMZ[_0x26d8ee(0xce2)][_0x26d8ee(0x551)][_0x26d8ee(0x2d7)](this),this[_0x26d8ee(0x269)](),this[_0x26d8ee(0xb29)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd02)]=Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x593)],Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x1390fb=_0x1e608f;VisuMZ['BattleCore'][_0x1390fb(0xd02)]['call'](this),this[_0x1390fb(0x25f)](),this['updateUiContainerPosition'](),this['updateWeather'](),this[_0x1390fb(0x610)]();},Spriteset_Battle[_0x1e608f(0xbe1)]['createWeather']=function(){const _0x59d89e=_0x1e608f;this[_0x59d89e(0xc67)]=new Weather(),this[_0x59d89e(0x552)]['addChild'](this[_0x59d89e(0xc67)]);},Spriteset_Battle['prototype']['updateWeather']=function(){const _0x4ebc1a=_0x1e608f;this[_0x4ebc1a(0xc67)]['type']=$gameScreen[_0x4ebc1a(0x8c2)](),this[_0x4ebc1a(0xc67)][_0x4ebc1a(0xd4e)]=$gameScreen[_0x4ebc1a(0xaf5)]();},Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x605)]=function(_0x573382){const _0x45d94a=_0x1e608f;$gameScreen[_0x45d94a(0x1b3)](_0x573382[0x0],_0x573382[0x1],_0x573382[0x2]);if(_0x573382[0x3])this[_0x45d94a(0x380)](_0x573382[0x2]);return!![];},VisuMZ[_0x1e608f(0xce2)]['Game_Interpreter_command283']=Game_Interpreter[_0x1e608f(0xbe1)][_0x1e608f(0x43f)],Game_Interpreter['prototype']['command283']=function(_0x2c9705){const _0x35049f=_0x1e608f;return SceneManager[_0x35049f(0x5f2)]()?(SceneManager[_0x35049f(0x327)]['_spriteset'][_0x35049f(0x557)](_0x2c9705[0x0],_0x2c9705[0x1]),!![]):VisuMZ[_0x35049f(0xce2)][_0x35049f(0xacc)]['call'](this,_0x2c9705);},Spriteset_Battle['prototype'][_0x1e608f(0x3a6)]=function(_0x35f988,_0x1f2b52){const _0x100371=_0x1e608f;_0x35f988[_0x100371(0x34b)]=_0x1f2b52;},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x557)]=function(_0x1daaa5,_0x3784f7){const _0x18d130=_0x1e608f;_0x1daaa5=_0x1daaa5||'',_0x3784f7=_0x3784f7||'';_0x1daaa5===''&&_0x3784f7===''&&(_0x1daaa5=this[_0x18d130(0x267)][_0x18d130(0x626)](),_0x3784f7=this[_0x18d130(0xcef)][_0x18d130(0x8d3)]());const _0x4a824c=ImageManager[_0x18d130(0x571)](_0x1daaa5),_0xd1fb37=ImageManager['loadBattleback2'](_0x3784f7);_0x4a824c[_0x18d130(0x10f)](this[_0x18d130(0x767)][_0x18d130(0xcdb)](this,this['_back1Sprite'],this['_back2Sprite'],_0x4a824c,_0xd1fb37));},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x767)]=function(_0x4504d8,_0x499543,_0x21f531,_0x1784eb){const _0x55c5d0=_0x1e608f;_0x1784eb[_0x55c5d0(0x10f)](this[_0x55c5d0(0xaa5)][_0x55c5d0(0xcdb)](this,_0x4504d8,_0x499543,_0x21f531,_0x1784eb));},Spriteset_Battle['prototype']['updateBattlebackBitmap2']=function(_0x1f2574,_0x3e6d51,_0x1599d7,_0x29498f){const _0x1ebc88=_0x1e608f;_0x1f2574[_0x1ebc88(0x34b)]=_0x1599d7,_0x3e6d51['bitmap']=_0x29498f,_0x1f2574[_0x1ebc88(0xb3e)](),_0x3e6d51[_0x1ebc88(0xb3e)]();},VisuMZ['BattleCore'][_0x1e608f(0x9ee)]=Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xa87)],Spriteset_Battle[_0x1e608f(0xbe1)]['createBattleField']=function(){const _0x4b0eaa=_0x1e608f;VisuMZ['BattleCore'][_0x4b0eaa(0x9ee)][_0x4b0eaa(0x2d7)](this),this[_0x4b0eaa(0x3b2)]();},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x3b2)]=function(){const _0x3440b6=_0x1e608f;this['createBattleFieldContainer'](),this[_0x3440b6(0xa34)](),this[_0x3440b6(0x6f7)](),this['createDamageContainer'](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x1e608f(0xbe1)]['createBattleFieldContainer']=function(){const _0x2e26ad=_0x1e608f;this[_0x2e26ad(0xce9)]=new Sprite(),this['_battleField'][_0x2e26ad(0x9a5)](this[_0x2e26ad(0xce9)]);},Spriteset_Battle[_0x1e608f(0xbe1)]['createAnimationContainer']=function(){const _0x115ebf=_0x1e608f;this[_0x115ebf(0x1b2)]=new Sprite(),Spriteset_Battle[_0x115ebf(0x48f)]?this[_0x115ebf(0x9a5)](this[_0x115ebf(0x1b2)]):this[_0x115ebf(0x552)][_0x115ebf(0x9a5)](this[_0x115ebf(0x1b2)]);},Spriteset_Battle[_0x1e608f(0xbe1)]['createDamageContainer']=function(){const _0x15929a=_0x1e608f;this[_0x15929a(0x67e)]=new Sprite(),this['_damageContainer']['x']=this[_0x15929a(0x552)]['x'],this[_0x15929a(0x67e)]['y']=this[_0x15929a(0x552)]['y'],this[_0x15929a(0x9a5)](this[_0x15929a(0x67e)]);},Spriteset_Battle['prototype']['adjustFlippedBattlefield']=function(){const _0x260c0d=_0x1e608f;if(!this[_0x260c0d(0x369)]())return;this[_0x260c0d(0xce9)]['scale']['x']=-0x1,this[_0x260c0d(0xce9)]['x']=this['_battleField']['width'],this[_0x260c0d(0xc6b)][_0x260c0d(0x6e9)]['x']=-0x1,this['_uiContainer']['x']=this['_battleField'][_0x260c0d(0x78f)],this[_0x260c0d(0x1b2)]['scale']['x']=-0x1,this[_0x260c0d(0x1b2)]['x']=this[_0x260c0d(0x552)][_0x260c0d(0x78f)],this[_0x260c0d(0x67e)][_0x260c0d(0x6e9)]['x']=-0x1,this[_0x260c0d(0x67e)]['x']=this[_0x260c0d(0x552)]['x']+this[_0x260c0d(0x552)][_0x260c0d(0x78f)];},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x503)]=function(){const _0x1565a3=_0x1e608f;Imported[_0x1565a3(0x8b3)]&&this[_0x1565a3(0x851)]()&&this[_0x1565a3(0x75a)]();const _0x2d3dae=$gameTroop[_0x1565a3(0xb81)](),_0x44e194=[];for(const _0x239ef4 of _0x2d3dae){_0x44e194['push'](new Sprite_Enemy(_0x239ef4));}_0x44e194[_0x1565a3(0x7f4)](this[_0x1565a3(0x772)][_0x1565a3(0xcdb)](this));for(const _0x3e3e4a of _0x44e194){this[_0x1565a3(0xce9)][_0x1565a3(0x9a5)](_0x3e3e4a);}this[_0x1565a3(0x4b2)]=_0x44e194;},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1d7)]=function(){const _0x3677f2=_0x1e608f;this['_actorSprites']=[];for(let _0x116dd3=0x0;_0x116dd3<$gameParty[_0x3677f2(0xcfa)]();_0x116dd3++){const _0x51220a=$gameParty[_0x3677f2(0xb46)]()[_0x116dd3],_0x31c495=new Sprite_Actor();_0x31c495[_0x3677f2(0x55c)](_0x51220a),_0x31c495[_0x3677f2(0x9c8)](_0x51220a),_0x31c495[_0x3677f2(0x593)](),this['_actorSprites']['push'](_0x31c495),this[_0x3677f2(0xce9)][_0x3677f2(0x9a5)](_0x31c495);}},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x592)]=function(_0x1e7da2,_0x1a9296,_0x4654f1,_0x410f0c){const _0x316962=_0x1e608f,_0x3a5b72=this[_0x316962(0xc81)](_0x1a9296),_0x446bbd=new(_0x3a5b72?Sprite_AnimationMV:Sprite_Animation)(),_0x5abe4e=this[_0x316962(0x95b)](_0x1e7da2);this[_0x316962(0x613)](_0x1e7da2[0x0])&&(_0x4654f1=!_0x4654f1),_0x446bbd[_0x316962(0x985)]=_0x1e7da2,_0x446bbd['setup'](_0x5abe4e,_0x1a9296,_0x4654f1,_0x410f0c),this['addAnimationSpriteToContainer'](_0x446bbd);},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x7ce)]=function(_0x35f57f){const _0x1a96da=_0x1e608f;if(this[_0x1a96da(0x94f)](_0x35f57f)){if(_0x1a96da(0x183)!==_0x1a96da(0x449))this[_0x1a96da(0xac3)]()[_0x1a96da(0x9a5)](_0x35f57f),_0x35f57f['battleStatusSprite']=!![];else{if(!_0x254cc7[_0x1a96da(0x5f2)]())return;if(!_0x3eb8f['VisuMZ_3_VisualCutinEffect'])return;const _0x118a2c=_0x501160[_0x1a96da(0x68b)]();_0x118a2c[_0x1a96da(0x7b2)](_0x1a96da(0x975));}}else this['_animationContainer'][_0x1a96da(0x9a5)](_0x35f57f),Spriteset_Battle[_0x1a96da(0x48f)]&&(this[_0x1a96da(0x1b2)]['x']=this[_0x1a96da(0x132)]['x'],this['_animationContainer']['y']=this['_effectsContainer']['y']);this['_animationSprites']['push'](_0x35f57f);},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x94f)]=function(_0x58073d){const _0x36fb6c=_0x1e608f;if(!_0x58073d)return![];if(!_0x58073d[_0x36fb6c(0x880)])return![];if(!_0x58073d[_0x36fb6c(0x985)][0x0])return![];if(_0x58073d[_0x36fb6c(0x985)][0x0][_0x36fb6c(0x28c)]&&!_0x58073d[_0x36fb6c(0x985)][0x0]['isActor']())return![];if($gameSystem[_0x36fb6c(0x3e6)]())return![];if(!this[_0x36fb6c(0xac3)]())return![];if(_0x58073d[_0x36fb6c(0x5c0)]===Sprite_Animation){if(_0x58073d[_0x36fb6c(0x880)][_0x36fb6c(0x236)]!==0x0)return![];}else{if(_0x58073d[_0x36fb6c(0x5c0)]===Sprite_AnimationMV){if('wayNP'==='XryEM'){let _0x3faafe='';_0x3faafe+=_0x36fb6c(0xd1c),_0x3faafe+=_0x36fb6c(0x11e),_0x44d2ea(_0x3faafe),_0x44c9e5[_0x36fb6c(0x3ea)]();}else{if(_0x58073d[_0x36fb6c(0x880)][_0x36fb6c(0xa15)]===0x3)return![];}}}return!![];const _0x54e85b=Window_BattleStatus[_0x36fb6c(0xbe1)][_0x36fb6c(0x687)]();return['xp',_0x36fb6c(0x3d5)][_0x36fb6c(0x1e2)](_0x54e85b);},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xac3)]=function(){const _0x54265f=_0x1e608f;if(!SceneManager[_0x54265f(0x327)])return null;if(!SceneManager[_0x54265f(0x327)][_0x54265f(0x496)])return null;if(!SceneManager[_0x54265f(0x327)][_0x54265f(0x496)][_0x54265f(0x132)])return null;return SceneManager['_scene']['_statusWindow'][_0x54265f(0x132)];},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x716)]=function(_0x15c14a){const _0x443da0=_0x1e608f;this[_0x443da0(0x16d)](_0x15c14a);for(const _0x768337 of _0x15c14a[_0x443da0(0x985)]){'YkwRO'===_0x443da0(0xbc4)?_0x768337[_0x443da0(0x798)]&&(_0x443da0(0x2eb)!==_0x443da0(0xb2c)?_0x768337[_0x443da0(0x798)]():this[_0x443da0(0x65f)](_0x3763bc)):(_0x2aeab+=_0xc9efb9,_0x54074e+=_0x2aec2b[_0x443da0(0x28c)]()?-_0x1789ad:_0xaa0bc1);}_0x15c14a[_0x443da0(0x74a)]();},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x16d)]=function(_0x1d393d){const _0x2f1cd1=_0x1e608f;this[_0x2f1cd1(0x94f)](_0x1d393d)?this['battleStatusWindowAnimationContainer']()['removeChild'](_0x1d393d):this['_animationContainer']['removeChild'](_0x1d393d);this[_0x2f1cd1(0x132)][_0x2f1cd1(0xa5f)](_0x1d393d),this['_animationContainer'][_0x2f1cd1(0xa5f)](_0x1d393d),this['_animationSprites']['remove'](_0x1d393d);if(this[_0x2f1cd1(0x8a1)])this[_0x2f1cd1(0x8a1)][_0x2f1cd1(0x569)](_0x1d393d);},VisuMZ[_0x1e608f(0xce2)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1fa)],Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x1fa)]=function(){const _0xc49195=_0x1e608f;VisuMZ[_0xc49195(0xce2)][_0xc49195(0x7e6)][_0xc49195(0x2d7)](this),this[_0xc49195(0x25f)]();},Spriteset_Battle['prototype'][_0x1e608f(0x25f)]=function(){const _0x23a5d9=_0x1e608f;this[_0x23a5d9(0xce9)]['children'][_0x23a5d9(0x7f4)](this[_0x23a5d9(0x525)]['bind'](this)),this[_0x23a5d9(0x299)]();if(!this[_0x23a5d9(0xce9)])return;this[_0x23a5d9(0xce9)][_0x23a5d9(0xb1b)]=this['targetBattlerContainerOpacity']();},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x525)]=function(_0x3e7327,_0x17f152){const _0x290519=_0x1e608f;if(VisuMZ['BattleCore'][_0x290519(0x4a9)][_0x290519(0xa6a)][_0x290519(0x928)]){if('cYGae'!==_0x290519(0x4ef))return this[_0x290519(0x945)]();else{if(_0x3e7327[_0x290519(0x606)]&&_0x17f152[_0x290519(0x606)]){if(_0x3e7327[_0x290519(0x606)][_0x290519(0x28c)]()&&_0x17f152[_0x290519(0x606)]['isEnemy']())return 0x1;else{if(_0x17f152['_battler'][_0x290519(0x28c)]()&&_0x3e7327[_0x290519(0x606)][_0x290519(0xbab)]())return-0x1;}}}}return _0x3e7327['_baseY']!==_0x17f152[_0x290519(0x171)]?_0x3e7327[_0x290519(0x171)]-_0x17f152['_baseY']:_0x17f152[_0x290519(0x674)]-_0x3e7327[_0x290519(0x674)];},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x299)]=function(){const _0x2f7f80=_0x1e608f;if(!VisuMZ[_0x2f7f80(0xce2)][_0x2f7f80(0x4a9)][_0x2f7f80(0xa6a)][_0x2f7f80(0x47b)])return;const _0x578b19=BattleManager['_subject'];if(_0x578b19){if(_0x578b19[_0x2f7f80(0x28c)]()&&!$gameSystem[_0x2f7f80(0x3e6)]())return;const _0x1e90ad=_0x578b19[_0x2f7f80(0x8dd)]();if(_0x1e90ad&&_0x578b19[_0x2f7f80(0x28c)]())this[_0x2f7f80(0xce9)][_0x2f7f80(0x9a5)](_0x1e90ad);}},Spriteset_Battle['prototype'][_0x1e608f(0x25a)]=function(){const _0x4ee3f8=_0x1e608f;for(const _0x4e6378 of $gameParty['aliveMembers']()){if(!_0x4e6378)continue;if(!_0x4e6378[_0x4ee3f8(0x8dd)]())continue;_0x4e6378[_0x4ee3f8(0x8dd)]()[_0x4ee3f8(0x4bb)]=!![],_0x4e6378['battler']()[_0x4ee3f8(0xcc3)]();}},Spriteset_Battle['prototype']['createUIContainer']=function(){const _0x5609f1=_0x1e608f;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x5609f1(0x48f)]?this[_0x5609f1(0x9a5)](this[_0x5609f1(0xc6b)]):this['_battleField'][_0x5609f1(0x9a5)](this[_0x5609f1(0xc6b)]),SceneManager[_0x5609f1(0x327)][_0x5609f1(0xc6b)]=this[_0x5609f1(0xc6b)];},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xb29)]=function(){const _0x4ceca6=_0x1e608f;if(VisuMZ[_0x4ceca6(0xce2)][_0x4ceca6(0x4a9)]['Enemy'][_0x4ceca6(0x259)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x4ceca6(0x40e)](this[_0x4ceca6(0x5fd)]);for(const _0x2a68bb of this[_0x4ceca6(0x4b2)]){if(_0x4ceca6(0x2fc)===_0x4ceca6(0x2fc)){const _0x8dd8d1=new Sprite_EnemyName();this[_0x4ceca6(0x5fd)][_0x4ceca6(0x9a5)](_0x8dd8d1),_0x8dd8d1['linkSprite'](_0x2a68bb);}else{const _0x4e8d3a=_0x140fc8[_0x4ceca6(0xa4d)];if(_0x4e8d3a&&_0x4e8d3a[_0x4ceca6(0x8fb)]())_0x3ea71b=_0x4e8d3a[_0x4ceca6(0xa0b)]()['id'];else return;}}},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xd0f)]=function(){const _0x1298b0=_0x1e608f;if(!this[_0x1298b0(0x67e)])return;if(!this[_0x1298b0(0xc6b)])return;const _0x2aeaac=Spriteset_Battle[_0x1298b0(0x48f)]?this[_0x1298b0(0x67e)]['x']:0x0,_0x35acca=Spriteset_Battle[_0x1298b0(0x48f)]?this[_0x1298b0(0x67e)]['y']:0x0,_0x32a691=Imported[_0x1298b0(0x6d5)]?this[_0x1298b0(0x552)]['x']:0x0,_0x3f8f87=Imported['VisuMZ_3_ActSeqCamera']?this[_0x1298b0(0x552)]['y']:0x0;this[_0x1298b0(0xc6b)]['x']=_0x2aeaac+_0x32a691,this['_uiContainer']['y']=_0x35acca+_0x3f8f87;},BattleManager[_0x1e608f(0x40e)]=function(_0x472ee6){const _0x380111=_0x1e608f;if(!SceneManager[_0x380111(0x327)]['_uiContainer'])return;SceneManager[_0x380111(0x327)][_0x380111(0xc6b)][_0x380111(0x9a5)](_0x472ee6);},BattleManager['removeChildFromUiContainer']=function(_0x541c24){const _0x2e3760=_0x1e608f;if(!SceneManager['_scene'][_0x2e3760(0xc6b)])return;SceneManager[_0x2e3760(0x327)][_0x2e3760(0xc6b)]['removeChild'](_0x541c24);},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x98a)]=function(){return 0xff;},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0xcdd)]=function(){return![];},Spriteset_Battle[_0x1e608f(0xbe1)]['isAnyoneFloating']=function(){const _0x306bd1=_0x1e608f;return this[_0x306bd1(0x32c)]()['some'](_0x35289b=>_0x35289b[_0x306bd1(0x3a7)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x13665d=_0x1e608f;return this['battlerSprites']()[_0x13665d(0x93a)](_0x2d2247=>_0x2d2247[_0x13665d(0x96f)]());},Spriteset_Battle[_0x1e608f(0xbe1)][_0x1e608f(0x823)]=function(){const _0x2a9fcd=_0x1e608f;return this[_0x2a9fcd(0x32c)]()['some'](_0x46b481=>_0x46b481[_0x2a9fcd(0x2e4)]());},Spriteset_Battle['prototype'][_0x1e608f(0xa17)]=function(){const _0x5b5d1c=_0x1e608f;return this[_0x5b5d1c(0x32c)]()[_0x5b5d1c(0x93a)](_0x44536c=>_0x44536c[_0x5b5d1c(0x54d)]());},Spriteset_Battle['prototype'][_0x1e608f(0xb51)]=function(){const _0x3b0cdd=_0x1e608f;return this[_0x3b0cdd(0x32c)]()[_0x3b0cdd(0x93a)](_0x8451b3=>_0x8451b3[_0x3b0cdd(0xacb)]());},Spriteset_Battle[_0x1e608f(0xbe1)]['isAnyoneChangingOpacity']=function(){const _0x457f55=_0x1e608f;return this[_0x457f55(0x32c)]()['some'](_0x4e45ea=>_0x4e45ea[_0x457f55(0xc2f)]());},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd5c)]=Window_ItemList['prototype'][_0x1e608f(0x145)],Window_ItemList[_0x1e608f(0xbe1)][_0x1e608f(0x145)]=function(){const _0x2d93bf=_0x1e608f;if(SceneManager['isSceneBattle']()){if(SceneManager[_0x2d93bf(0x327)][_0x2d93bf(0x687)]()===_0x2d93bf(0xd11))return VisuMZ[_0x2d93bf(0xce2)]['Settings'][_0x2d93bf(0x51a)][_0x2d93bf(0x4a0)];else{if('SFJRS'===_0x2d93bf(0x568))return VisuMZ[_0x2d93bf(0xce2)][_0x2d93bf(0x4a9)]['BattleLayout'][_0x2d93bf(0x93f)];else _0x56a2b4['setWaitMode']('battleInjectPrep');}}else return VisuMZ[_0x2d93bf(0xce2)][_0x2d93bf(0xd5c)][_0x2d93bf(0x2d7)](this);},VisuMZ['BattleCore'][_0x1e608f(0x9bd)]=Window_SkillList['prototype'][_0x1e608f(0x145)],Window_SkillList['prototype']['maxCols']=function(){const _0x390aba=_0x1e608f;if(SceneManager['isSceneBattle']()){if(SceneManager[_0x390aba(0x327)]['battleLayoutStyle']()==='border')return VisuMZ[_0x390aba(0xce2)][_0x390aba(0x4a9)][_0x390aba(0x51a)][_0x390aba(0x4a0)];else{if('oOyLT'!==_0x390aba(0x276))_0x391b9b(_0x390aba(0xafd)['format'](_0x9034dd,_0x58a1c5)),_0x2003c9['exit']();else return VisuMZ['BattleCore'][_0x390aba(0x4a9)][_0x390aba(0x51a)][_0x390aba(0x93f)];}}else return VisuMZ['BattleCore'][_0x390aba(0x9bd)][_0x390aba(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)]['Window_Options_addGeneralOptions']=Window_Options[_0x1e608f(0xbe1)][_0x1e608f(0x486)],Window_Options[_0x1e608f(0xbe1)][_0x1e608f(0x486)]=function(){const _0xd5b488=_0x1e608f;VisuMZ[_0xd5b488(0xce2)][_0xd5b488(0xd83)]['call'](this),this[_0xd5b488(0x80c)](),this[_0xd5b488(0x2e6)]();},Window_Options[_0x1e608f(0xbe1)][_0x1e608f(0x80c)]=function(){const _0x34a8da=_0x1e608f;if(VisuMZ['BattleCore'][_0x34a8da(0x4a9)][_0x34a8da(0x6b5)]['AddOption']){if('ZSvcA'!=='ZSvcA'){if(_0x1e112e[_0x34a8da(0x643)]())return _0x34a8da(0x655);return _0x34a8da(0xb3b);}else this[_0x34a8da(0xbf5)](),this[_0x34a8da(0xa32)]();}},Window_Options['prototype']['addShowHpGaugeCommand']=function(){const _0x219093=_0x1e608f;if(!VisuMZ['BattleCore'][_0x219093(0x4a9)][_0x219093(0x8be)][_0x219093(0xb64)])return;const _0x493ff2=TextManager[_0x219093(0xc49)],_0x328eba=_0x219093(0xc49);this[_0x219093(0x15e)](_0x493ff2,_0x328eba);},Window_Options['prototype'][_0x1e608f(0xbf5)]=function(){const _0x23ab09=_0x1e608f,_0x4ea9c0=TextManager[_0x23ab09(0x32d)],_0x2bde53='autoBattleAtStart';this[_0x23ab09(0x15e)](_0x4ea9c0,_0x2bde53);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0xedb146=_0x1e608f,_0x17ed77=TextManager[_0xedb146(0xac9)],_0x1e3a2e=_0xedb146(0xc25);this['addCommand'](_0x17ed77,_0x1e3a2e);},VisuMZ[_0x1e608f(0xce2)]['Window_Options_statusText']=Window_Options['prototype'][_0x1e608f(0xc5a)],Window_Options['prototype'][_0x1e608f(0xc5a)]=function(_0xb0850e){const _0x3584ba=_0x1e608f,_0x59dcdc=this[_0x3584ba(0xa7f)](_0xb0850e);return _0x59dcdc==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():VisuMZ['BattleCore'][_0x3584ba(0x337)]['call'](this,_0xb0850e);},Window_Options[_0x1e608f(0xbe1)]['statusTextAutoBattleStyle']=function(){const _0x2634fc=_0x1e608f,_0x2b77e7=VisuMZ[_0x2634fc(0xce2)]['Settings']['AutoBattle'],_0x445852=this['getConfigValue'](_0x2634fc(0xc25));return _0x445852?_0x2b77e7['StyleON']:_0x2b77e7[_0x2634fc(0x5fe)];},Window_ShopStatus[_0x1e608f(0xbe1)]['getItemDamageAmountLabelBattleCore']=function(){const _0x298c3c=_0x1e608f,_0x47b9da=DataManager[_0x298c3c(0x530)](this[_0x298c3c(0x788)]),_0xb58494=VisuMZ[_0x298c3c(0x855)][_0x47b9da];if(!_0xb58494)return this[_0x298c3c(0x813)]();const _0x32e742=_0x298c3c(0x514)['format'](this[_0x298c3c(0x788)][_0x298c3c(0x848)]['type']),_0x2dfe5f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x298c3c(0x788)]['damage']['type']];return _0xb58494[_0x32e742]['format'](_0x2dfe5f);},Window_ShopStatus['prototype'][_0x1e608f(0xc96)]=function(){const _0x38697e=_0x1e608f,_0x40c7cd=DataManager[_0x38697e(0x530)](this[_0x38697e(0x788)]),_0x47b00d=VisuMZ[_0x38697e(0x855)][_0x40c7cd];if(!_0x47b00d)return this[_0x38697e(0xb91)]();return _0x47b00d[_0x38697e(0xc8f)][_0x38697e(0x2d7)](this);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd71)]=Window_PartyCommand[_0x1e608f(0xbe1)]['initialize'],Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(_0x6e81a7){const _0x3ee6e0=_0x1e608f;VisuMZ[_0x3ee6e0(0xce2)][_0x3ee6e0(0xd71)][_0x3ee6e0(0x2d7)](this,_0x6e81a7),this[_0x3ee6e0(0x19c)](_0x6e81a7);},Window_PartyCommand['prototype'][_0x1e608f(0x19c)]=function(_0x4ade50){const _0x45756c=_0x1e608f,_0x3b08cc=new Rectangle(0x0,0x0,_0x4ade50[_0x45756c(0x78f)],_0x4ade50[_0x45756c(0x96b)]);this[_0x45756c(0x326)]=new Window_Base(_0x3b08cc),this[_0x45756c(0x326)]['opacity']=0x0,this[_0x45756c(0x9a5)](this['_commandNameWindow']),this[_0x45756c(0x33d)]();},Window_PartyCommand['prototype'][_0x1e608f(0xadb)]=function(){const _0x27806d=_0x1e608f;Window_Command[_0x27806d(0xbe1)][_0x27806d(0xadb)][_0x27806d(0x2d7)](this);if(this[_0x27806d(0x326)])this[_0x27806d(0x33d)]();},Window_PartyCommand['prototype'][_0x1e608f(0x33d)]=function(){const _0x9e37d6=_0x1e608f,_0x9451c7=this[_0x9e37d6(0x326)];_0x9451c7['contents'][_0x9e37d6(0x639)]();const _0x548b55=this[_0x9e37d6(0x8b0)](this['index']());if(_0x548b55===_0x9e37d6(0xad0)&&this[_0x9e37d6(0x3f4)]()>0x0){if(_0x9e37d6(0x28b)===_0x9e37d6(0x28b)){const _0x11fcb1=this[_0x9e37d6(0x9c1)](this['index']());let _0x233956=this[_0x9e37d6(0x8f5)](this[_0x9e37d6(0xcb0)]());_0x233956=_0x233956[_0x9e37d6(0x5e4)](/\\I\[(\d+)\]/gi,''),_0x9451c7[_0x9e37d6(0x843)](),this[_0x9e37d6(0x984)](_0x233956,_0x11fcb1),this[_0x9e37d6(0xd13)](_0x233956,_0x11fcb1),this[_0x9e37d6(0x53e)](_0x233956,_0x11fcb1);}else{if(this[_0x9e37d6(0x6ad)]==='all\x20actors')return!![];return this[_0x9e37d6(0x5a9)]()&&!this['isCustomBattleScope']()?this[_0x9e37d6(0x4fd)]():_0x9eaf36['BattleCore']['Game_Action_isForAliveFriend'][_0x9e37d6(0x2d7)](this);}}},Window_PartyCommand['prototype'][_0x1e608f(0x984)]=function(_0x42f1e0,_0xc5e265){},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0xd13)]=function(_0x3655d7,_0x6df3e6){const _0x1b2c0c=_0x1e608f,_0x4a24ec=this[_0x1b2c0c(0x326)];_0x4a24ec[_0x1b2c0c(0xb96)](_0x3655d7,0x0,_0x6df3e6['y'],_0x4a24ec[_0x1b2c0c(0x5b5)],_0x1b2c0c(0x624));},Window_PartyCommand[_0x1e608f(0xbe1)]['commandNameWindowCenter']=function(_0x35f2e7,_0x2660be){const _0x44223e=_0x1e608f,_0x2748a6=this[_0x44223e(0x326)],_0x350327=$gameSystem[_0x44223e(0x7bf)](),_0x2f8478=_0x2660be['x']+Math[_0x44223e(0x14d)](_0x2660be[_0x44223e(0x78f)]/0x2)+_0x350327;_0x2748a6['x']=_0x2748a6[_0x44223e(0x78f)]/-0x2+_0x2f8478,_0x2748a6['y']=Math['floor'](_0x2660be[_0x44223e(0x96b)]/0x2);},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0xcbe)]=function(){const _0x47c404=_0x1e608f;this[_0x47c404(0x720)](),this['addAutoBattleCommand'](),this[_0x47c404(0x356)](),this[_0x47c404(0x6fe)](),this['addEscapeCommand']();},Window_PartyCommand['prototype'][_0x1e608f(0x720)]=function(){const _0x1c469f=_0x1e608f,_0xd21e21=this[_0x1c469f(0x947)](),_0x2aa93e=VisuMZ['BattleCore'][_0x1c469f(0x4a9)][_0x1c469f(0x408)]['CmdIconFight'],_0x23e8ba=_0xd21e21===_0x1c469f(0xb68)?TextManager[_0x1c469f(0x33c)]:'\x5cI[%1]%2'[_0x1c469f(0x92f)](_0x2aa93e,TextManager['fight']),_0x33120e=this['isFightCommandEnabled']();this[_0x1c469f(0x15e)](_0x23e8ba,_0x1c469f(0x33c),_0x33120e);},Window_PartyCommand['prototype'][_0x1e608f(0x6de)]=function(){return!![];},Window_PartyCommand['prototype']['addAutoBattleCommand']=function(){const _0x2e5e09=_0x1e608f;if(!this[_0x2e5e09(0x528)]())return;const _0xc4a698=this[_0x2e5e09(0x947)](),_0x16c029=VisuMZ[_0x2e5e09(0xce2)][_0x2e5e09(0x4a9)]['PartyCmd'][_0x2e5e09(0xa2d)],_0x3fed7b=_0xc4a698===_0x2e5e09(0xb68)?TextManager[_0x2e5e09(0x685)]:'\x5cI[%1]%2'['format'](_0x16c029,TextManager[_0x2e5e09(0x685)]),_0x17d554=this[_0x2e5e09(0xbcf)]();this['addCommand'](_0x3fed7b,_0x2e5e09(0x685),_0x17d554);},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x528)]=function(){const _0xaa2d2b=_0x1e608f;return VisuMZ[_0xaa2d2b(0xce2)]['Settings']['PartyCmd'][_0xaa2d2b(0x927)];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0xbcf)]=function(){return!![];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x356)]=function(){},Window_PartyCommand['prototype'][_0x1e608f(0x6fe)]=function(){const _0x5f3136=_0x1e608f;if(!this[_0x5f3136(0x723)]())return;const _0xdf817f=this['commandStyle'](),_0x271eb8=VisuMZ[_0x5f3136(0xce2)][_0x5f3136(0x4a9)][_0x5f3136(0x408)][_0x5f3136(0xcba)],_0xc398b3=_0xdf817f===_0x5f3136(0xb68)?TextManager['options']:_0x5f3136(0x30b)['format'](_0x271eb8,TextManager['options']),_0x298088=this[_0x5f3136(0x37c)]();this[_0x5f3136(0x15e)](_0xc398b3,_0x5f3136(0xb5f),_0x298088);},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x723)]=function(){const _0x403fba=_0x1e608f;return VisuMZ['BattleCore'][_0x403fba(0x4a9)][_0x403fba(0x408)][_0x403fba(0x600)];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x37c)]=function(){return!![];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x73e)]=function(){const _0x1b8a43=_0x1e608f,_0x35a8c6=this[_0x1b8a43(0x947)](),_0xae3840=VisuMZ[_0x1b8a43(0xce2)][_0x1b8a43(0x4a9)][_0x1b8a43(0x408)][_0x1b8a43(0xbb7)],_0x1f3936=_0x35a8c6==='text'?TextManager['escape']:_0x1b8a43(0x30b)[_0x1b8a43(0x92f)](_0xae3840,TextManager[_0x1b8a43(0x5aa)]),_0x1de385=this[_0x1b8a43(0x786)]();this[_0x1b8a43(0x15e)](_0x1f3936,'escape',_0x1de385);},Window_PartyCommand[_0x1e608f(0xbe1)]['isEscapeCommandEnabled']=function(){const _0x946a34=_0x1e608f;return BattleManager[_0x946a34(0x349)]();},Window_PartyCommand[_0x1e608f(0xbe1)]['itemTextAlign']=function(){const _0x372c05=_0x1e608f;return VisuMZ[_0x372c05(0xce2)][_0x372c05(0x4a9)][_0x372c05(0x408)]['CmdTextAlign'];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x387)]=function(_0x319dbd){const _0x9948f8=_0x1e608f,_0x9bdfd1=this['commandStyleCheck'](_0x319dbd);if(_0x9bdfd1===_0x9948f8(0x6e6))this['drawItemStyleIconText'](_0x319dbd);else _0x9bdfd1===_0x9948f8(0xad0)?this['drawItemStyleIcon'](_0x319dbd):Window_Command[_0x9948f8(0xbe1)][_0x9948f8(0x387)][_0x9948f8(0x2d7)](this,_0x319dbd);},Window_PartyCommand['prototype'][_0x1e608f(0x947)]=function(){const _0x515608=_0x1e608f;return VisuMZ[_0x515608(0xce2)][_0x515608(0x4a9)][_0x515608(0x408)]['CmdStyle'];},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x8b0)]=function(_0x37bcab){const _0x3deedf=_0x1e608f;if(_0x37bcab<0x0)return'text';const _0x46eb07=this[_0x3deedf(0x947)]();if(_0x46eb07!==_0x3deedf(0xa2f))return _0x46eb07;else{if(this[_0x3deedf(0x3f4)]()>0x0){const _0x349c5e=this[_0x3deedf(0x8f5)](_0x37bcab);if(_0x349c5e[_0x3deedf(0x97b)](/\\I\[(\d+)\]/i)){if('HfZmV'!==_0x3deedf(0x177)){const _0x360682=this[_0x3deedf(0x9c1)](_0x37bcab),_0x3fb3d1=this[_0x3deedf(0xa3d)](_0x349c5e)[_0x3deedf(0x78f)];return _0x3fb3d1<=_0x360682['width']?_0x3deedf(0x6e6):'icon';}else{const _0x51c029=_0x17dd60[_0x3deedf(0x327)][_0x3deedf(0x496)];_0x51c029[_0x3deedf(0x6e9)]['y']=0x0;}}}}return _0x3deedf(0xb68);},Window_PartyCommand['prototype'][_0x1e608f(0x3e3)]=function(_0x3ad2cb){const _0x116c47=_0x1e608f,_0x1aca77=this[_0x116c47(0x9c1)](_0x3ad2cb),_0x90ebe3=this[_0x116c47(0x8f5)](_0x3ad2cb),_0x41b1d2=this[_0x116c47(0xa3d)](_0x90ebe3)[_0x116c47(0x78f)];this[_0x116c47(0x69e)](this[_0x116c47(0x60c)](_0x3ad2cb));const _0x43c132=this[_0x116c47(0x335)]();if(_0x43c132===_0x116c47(0x2d8))this[_0x116c47(0x53d)](_0x90ebe3,_0x1aca77['x']+_0x1aca77['width']-_0x41b1d2,_0x1aca77['y'],_0x41b1d2);else{if(_0x43c132==='center'){const _0x13a12=_0x1aca77['x']+Math[_0x116c47(0x14d)]((_0x1aca77['width']-_0x41b1d2)/0x2);this[_0x116c47(0x53d)](_0x90ebe3,_0x13a12,_0x1aca77['y'],_0x41b1d2);}else this['drawTextEx'](_0x90ebe3,_0x1aca77['x'],_0x1aca77['y'],_0x41b1d2);}},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x412)]=function(_0x3c14d6){const _0x11e35c=_0x1e608f;this[_0x11e35c(0x8f5)](_0x3c14d6)[_0x11e35c(0x97b)](/\\I\[(\d+)\]/i);const _0x3b5c0a=Number(RegExp['$1'])||0x0,_0x4271cc=this['itemLineRect'](_0x3c14d6),_0x33d637=_0x4271cc['x']+Math[_0x11e35c(0x14d)]((_0x4271cc['width']-ImageManager[_0x11e35c(0x202)])/0x2),_0x43703d=_0x4271cc['y']+(_0x4271cc['height']-ImageManager['iconHeight'])/0x2;this[_0x11e35c(0xc52)](_0x3b5c0a,_0x33d637,_0x43703d);},Window_PartyCommand['prototype'][_0x1e608f(0x64e)]=function(){},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x8ad)]=function(){const _0x4e2002=_0x1e608f;Window_Command[_0x4e2002(0xbe1)][_0x4e2002(0x8ad)]['call'](this);const _0x3231e7=this[_0x4e2002(0x687)]();_0x3231e7==='border'&&this['showHelpWindow']();},Window_PartyCommand[_0x1e608f(0xbe1)][_0x1e608f(0x687)]=function(){const _0x70a5f0=_0x1e608f;if(this[_0x70a5f0(0x675)])return this[_0x70a5f0(0x675)];return this[_0x70a5f0(0x675)]=SceneManager[_0x70a5f0(0x327)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x1e608f(0xbe1)]['updateHelp']=function(){const _0x4f5944=_0x1e608f,_0x137eb4=VisuMZ[_0x4f5944(0xce2)][_0x4f5944(0x4a9)]['PartyCmd'],_0x50b7c8=this[_0x4f5944(0x5ca)]();switch(_0x50b7c8){case _0x4f5944(0x33c):this[_0x4f5944(0x482)][_0x4f5944(0x460)](_0x137eb4[_0x4f5944(0x159)]);break;case _0x4f5944(0x685):this[_0x4f5944(0x482)][_0x4f5944(0x460)](_0x137eb4[_0x4f5944(0x1c0)]);break;case _0x4f5944(0xb5f):this[_0x4f5944(0x482)][_0x4f5944(0x460)](_0x137eb4[_0x4f5944(0xc2d)]);break;case'escape':this[_0x4f5944(0x482)][_0x4f5944(0x460)](_0x137eb4[_0x4f5944(0x717)]);break;default:this[_0x4f5944(0x482)][_0x4f5944(0x460)]('');break;}},VisuMZ['BattleCore'][_0x1e608f(0x14b)]=Window_ActorCommand[_0x1e608f(0xbe1)]['initialize'],Window_ActorCommand[_0x1e608f(0xbe1)]['initialize']=function(_0x6377f7){const _0x2c65c0=_0x1e608f;VisuMZ[_0x2c65c0(0xce2)][_0x2c65c0(0x14b)][_0x2c65c0(0x2d7)](this,_0x6377f7),this[_0x2c65c0(0x19c)](_0x6377f7);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x19c)]=function(_0x4af2c3){const _0x15a7cc=_0x1e608f,_0xf0a8a=new Rectangle(0x0,0x0,_0x4af2c3['width'],_0x4af2c3[_0x15a7cc(0x96b)]);this[_0x15a7cc(0x326)]=new Window_Base(_0xf0a8a),this['_commandNameWindow'][_0x15a7cc(0xb1b)]=0x0,this[_0x15a7cc(0x9a5)](this[_0x15a7cc(0x326)]),this[_0x15a7cc(0x33d)]();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x3cbbec=_0x1e608f;Window_Command[_0x3cbbec(0xbe1)][_0x3cbbec(0xadb)][_0x3cbbec(0x2d7)](this);if(this[_0x3cbbec(0x326)])this[_0x3cbbec(0x33d)]();},Window_ActorCommand['prototype'][_0x1e608f(0x33d)]=function(){const _0x20b0a1=_0x1e608f,_0x38f69f=this[_0x20b0a1(0x326)];_0x38f69f[_0x20b0a1(0x1c9)]['clear']();const _0x97d2d=this[_0x20b0a1(0x8b0)](this[_0x20b0a1(0xcb0)]());if(_0x97d2d===_0x20b0a1(0xad0)&&this[_0x20b0a1(0x3f4)]()>0x0){if(_0x20b0a1(0x3aa)!=='dAMwQ')this[_0x20b0a1(0x6c9)]('guard');else{const _0x919235=this[_0x20b0a1(0x9c1)](this[_0x20b0a1(0xcb0)]());let _0x29517d=this[_0x20b0a1(0x8f5)](this['index']());_0x29517d=_0x29517d[_0x20b0a1(0x5e4)](/\\I\[(\d+)\]/gi,''),_0x38f69f['resetFontSettings'](),this[_0x20b0a1(0x984)](_0x29517d,_0x919235),this[_0x20b0a1(0xd13)](_0x29517d,_0x919235),this[_0x20b0a1(0x53e)](_0x29517d,_0x919235);}}},Window_ActorCommand['prototype'][_0x1e608f(0x984)]=function(_0x285c14,_0x19f1c0){},Window_ActorCommand['prototype'][_0x1e608f(0xd13)]=function(_0x2c7b1a,_0x56f130){const _0x4a12d7=_0x1e608f,_0x544629=this[_0x4a12d7(0x326)];_0x544629[_0x4a12d7(0xb96)](_0x2c7b1a,0x0,_0x56f130['y'],_0x544629[_0x4a12d7(0x5b5)],_0x4a12d7(0x624));},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x53e)]=function(_0x5bcff1,_0x59181f){const _0x5eb8d8=_0x1e608f,_0x1e98ff=this[_0x5eb8d8(0x326)],_0x20272d=$gameSystem[_0x5eb8d8(0x7bf)](),_0x3b60c0=_0x59181f['x']+Math[_0x5eb8d8(0x14d)](_0x59181f[_0x5eb8d8(0x78f)]/0x2)+_0x20272d;_0x1e98ff['x']=_0x1e98ff['width']/-0x2+_0x3b60c0,_0x1e98ff['y']=Math[_0x5eb8d8(0x14d)](_0x59181f[_0x5eb8d8(0x96b)]/0x2);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0xcbe)]=function(){const _0x19d016=_0x1e608f;if(!this[_0x19d016(0xa5d)])return;const _0x233e9d=this[_0x19d016(0xa5d)][_0x19d016(0x888)]();for(const _0x51b505 of _0x233e9d){_0x19d016(0x1b0)===_0x19d016(0x1b0)?this[_0x19d016(0x9b5)](_0x51b505[_0x19d016(0xb11)]()[_0x19d016(0x2a9)]()):(this['applyFreezeMotionFrames'](),_0x39eafa[_0x19d016(0xce2)]['Sprite_Actor_updateFrame']['call'](this));}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x9b5)]=function(_0x192715){const _0x3f067b=_0x1e608f;_0x192715==='ATTACK'&&(_0x3f067b(0x28f)==='ymSTk'?this[_0x3f067b(0xbc6)]():(_0x1616be[_0x3f067b(0xce2)]['Window_BattleLog_performMagicEvasion'][_0x3f067b(0x2d7)](this,_0x5d1635),this[_0x3f067b(0xd30)]()));[_0x3f067b(0xbb3),_0x3f067b(0x9c3)][_0x3f067b(0xc3d)](_0x192715)&&this[_0x3f067b(0xb3f)]();_0x192715===_0x3f067b(0x40d)&&this['addGuardCommand']();_0x192715==='ITEM'&&this[_0x3f067b(0xb53)]();_0x192715===_0x3f067b(0xb22)&&this[_0x3f067b(0x73e)]();_0x192715==='AUTO\x20BATTLE'&&this[_0x3f067b(0x849)]();if(_0x192715[_0x3f067b(0x97b)](/STYPE: (\d+)/i)){if(_0x3f067b(0x50a)!==_0x3f067b(0x50a))this[_0x3f067b(0xa64)]('HP',_0x5b7b36,_0x1c006a[_0x3f067b(0x5b2)]()[_0x3f067b(0xae9)]);else{const _0x1779e3=Number(RegExp['$1']);this[_0x3f067b(0x8eb)](_0x1779e3);}}else{if(_0x192715[_0x3f067b(0x97b)](/STYPE: (.*)/i)){if(_0x3f067b(0xae0)===_0x3f067b(0xae0)){const _0x3aabaa=DataManager[_0x3f067b(0xbe0)](RegExp['$1']);this[_0x3f067b(0x8eb)](_0x3aabaa);}else return _0x3393d0[_0x3f067b(0xce2)]['Settings'][_0x3f067b(0x6b5)][_0x3f067b(0xd5f)]['call'](this);}}if(_0x192715===_0x3f067b(0xcfb)){if(_0x3f067b(0x6db)===_0x3f067b(0x2ef)){if(this[_0x3f067b(0x940)]&&this[_0x3f067b(0x374)]['includes'](this[_0x3f067b(0x940)])){const _0x3fbf58=this[_0x3f067b(0x374)]['indexOf'](this['_lastActor']);return this[_0x3f067b(0xd27)](_0x3fbf58);}else return this[_0x3f067b(0xd32)]();}else this[_0x3f067b(0x8e7)]();}if(_0x192715[_0x3f067b(0x97b)](/SKILL: (\d+)/i)){const _0x5ce129=Number(RegExp['$1']);this[_0x3f067b(0x2fd)]($dataSkills[_0x5ce129]);}else{if(_0x192715['match'](/SKILL: (.*)/i)){if(_0x3f067b(0x5b0)===_0x3f067b(0xb30)){if(!_0x20c8ba[_0x3f067b(0xce2)]['Settings'][_0x3f067b(0x409)][_0x3f067b(0xcbf)])return;const _0x59b426=_0x184fc2[_0x3f067b(0x5b2)](),_0x30f12b=_0x59b426[_0x3f067b(0x5c8)]();for(const _0x4c25bf of _0x30f12b){_0x4c25bf[_0x3f067b(0x644)]&&(this[_0x3f067b(0xb79)](_0x3f067b(0x9ca)),this[_0x3f067b(0xb79)]('popBaseLine'),this['push'](_0x3f067b(0x7e7)),this['push'](_0x3f067b(0xac5),_0x4c25bf['message4'][_0x3f067b(0x92f)](_0x1415bf['name']())),this[_0x3f067b(0xb79)](_0x3f067b(0x380)));}}else{const _0x501e83=DataManager[_0x3f067b(0x7af)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x501e83]);}}}_0x192715===_0x3f067b(0xa94)&&Imported[_0x3f067b(0xb08)]&&this[_0x3f067b(0x469)](),[_0x3f067b(0x86e),_0x3f067b(0xa70)]['includes'](_0x192715)&&Imported[_0x3f067b(0xb6d)]&&(_0x3f067b(0x3f5)===_0x3f067b(0x3f5)?this[_0x3f067b(0xd24)]():this[_0x3f067b(0x77a)](_0x257ac4[_0x3f067b(0x497)])),_0x192715==='WEAPON\x20SWAP'&&Imported[_0x3f067b(0x90a)]&&(_0x3f067b(0x440)!==_0x3f067b(0x440)?(_0x35dcda['BattleCore'][_0x3f067b(0x5d4)][_0x3f067b(0x2d7)](this),_0x35bf7e[_0x3f067b(0xbad)]()):this[_0x3f067b(0xca3)](!![])),_0x192715===_0x3f067b(0x27f)&&Imported['VisuMZ_2_BattleGridSystem']&&this[_0x3f067b(0x13a)]();},Window_ActorCommand['prototype'][_0x1e608f(0xbc6)]=function(){const _0x132810=_0x1e608f,_0x1f6ef0=$dataSkills[this[_0x132810(0xa5d)]['attackSkillId']()];if(!_0x1f6ef0)return;if(!this[_0x132810(0x8d6)](_0x1f6ef0))return;const _0x16908c=this['commandStyle'](),_0x2c47c3=DataManager[_0x132810(0x8d7)](_0x1f6ef0),_0x280ea6=DataManager[_0x132810(0x495)](_0x1f6ef0),_0x3c43e1=_0x16908c===_0x132810(0xb68)?_0x2c47c3:_0x132810(0x30b)[_0x132810(0x92f)](_0x280ea6,_0x2c47c3);this[_0x132810(0x15e)](_0x3c43e1,_0x132810(0x16c),this[_0x132810(0xa5d)][_0x132810(0xa90)]());},Window_ActorCommand['prototype'][_0x1e608f(0x4da)]=function(){const _0x1fd369=_0x1e608f,_0x32cb75=$dataSkills[this['_actor'][_0x1fd369(0xade)]()];if(!_0x32cb75)return;if(!this[_0x1fd369(0x8d6)](_0x32cb75))return;const _0x3f6e64=this['commandStyle'](),_0x19290c=DataManager[_0x1fd369(0x8d7)](_0x32cb75),_0xe70054=DataManager[_0x1fd369(0x495)](_0x32cb75),_0x2a467d=_0x3f6e64==='text'?_0x19290c:_0x1fd369(0x30b)['format'](_0xe70054,_0x19290c);this[_0x1fd369(0x15e)](_0x2a467d,_0x1fd369(0x950),this[_0x1fd369(0xa5d)]['canGuard']());},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0xb53)]=function(){const _0x324f93=_0x1e608f,_0x412aca=this[_0x324f93(0x947)](),_0x3ba6ac=VisuMZ[_0x324f93(0xce2)][_0x324f93(0x4a9)]['ActorCmd'][_0x324f93(0xc8d)],_0x5a7da9=_0x412aca===_0x324f93(0xb68)?TextManager[_0x324f93(0xa0b)]:_0x324f93(0x30b)['format'](_0x3ba6ac,TextManager[_0x324f93(0xa0b)]),_0x12ddb0=this[_0x324f93(0x76e)]();this[_0x324f93(0x15e)](_0x5a7da9,_0x324f93(0xa0b),_0x12ddb0);},Window_ActorCommand['prototype'][_0x1e608f(0x76e)]=function(){const _0x38d023=_0x1e608f;return this[_0x38d023(0xa5d)]&&this[_0x38d023(0xa5d)]['canUseItemCommand']();},Window_ActorCommand[_0x1e608f(0xbe1)]['addSkillCommands']=function(){const _0x5f2719=_0x1e608f,_0x354167=this[_0x5f2719(0xa5d)][_0x5f2719(0x310)]();for(const _0x4b17fe of _0x354167){this['addSkillTypeCommand'](_0x4b17fe);}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x8eb)]=function(_0x2c487c){const _0x54f0be=_0x1e608f;let _0x582d40=$dataSystem[_0x54f0be(0x310)][_0x2c487c];if(!_0x582d40)return;let _0x221de7=_0x582d40;const _0x40d281=this[_0x54f0be(0x947)]();if(_0x40d281===_0x54f0be(0xb68))_0x221de7=_0x221de7[_0x54f0be(0x5e4)](/\x1I\[(\d+)\]/gi,''),_0x221de7=_0x221de7[_0x54f0be(0x5e4)](/\\I\[(\d+)\]/gi,'');else{if(!_0x582d40[_0x54f0be(0x97b)](/\\I\[(\d+)\]/i)){const _0x1ed448=Imported[_0x54f0be(0x3ef)]?VisuMZ['SkillsStatesCore'][_0x54f0be(0x4a9)][_0x54f0be(0x6cb)]:VisuMZ[_0x54f0be(0xce2)][_0x54f0be(0x4a9)]['ActorCmd'],_0x4f7432=$dataSystem[_0x54f0be(0x44a)][_0x54f0be(0xc3d)](_0x2c487c),_0x3c5de3=_0x4f7432?_0x1ed448[_0x54f0be(0x511)]:_0x1ed448[_0x54f0be(0x2cc)];_0x221de7=_0x54f0be(0x30b)[_0x54f0be(0x92f)](_0x3c5de3,_0x582d40);}}this[_0x54f0be(0x15e)](_0x221de7,'skill',!![],_0x2c487c);},Window_ActorCommand['prototype'][_0x1e608f(0x8e7)]=function(){const _0x12363b=_0x1e608f,_0x568811=this[_0x12363b(0xa5d)][_0x12363b(0x310)](),_0x1933cf=this['_actor']['skills']();for(const _0x4f1c86 of _0x1933cf){if(!_0x4f1c86)continue;if(Imported[_0x12363b(0x3ef)]){if(this[_0x12363b(0x684)](_0x4f1c86))continue;if(this['isHiddenSkill'](_0x4f1c86))continue;}else{if(!_0x568811['includes'](_0x4f1c86[_0x12363b(0x96d)])){if('ubUMC'===_0x12363b(0x615))continue;else{if(!_0x278104[_0x12363b(0x1c6)](_0x4b991e))return!![];}}}this[_0x12363b(0x2fd)](_0x4f1c86);}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x684)]=function(_0x545886){const _0x4ef7d6=_0x1e608f,_0x2287a4=this[_0x4ef7d6(0xa5d)]['skillTypes'](),_0x134b79=_0x2287a4[_0x4ef7d6(0x9f1)](_0x2a6092=>DataManager[_0x4ef7d6(0x698)](_0x545886)[_0x4ef7d6(0xc3d)](_0x2a6092));return _0x134b79[_0x4ef7d6(0xcaf)]<=0x0;},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x7a5)]=function(_0x556923){const _0x220a63=_0x1e608f;if(Imported[_0x220a63(0x3ef)]){if(VisuMZ['SkillsStatesCore'][_0x220a63(0x37f)]>=1.24){if(_0x220a63(0x900)!=='yROcJ')_0x25c19e=_0x263f52['x']+_0x179d9b[_0x220a63(0x721)]+0x8;else{if(this['_actor']){if(!VisuMZ[_0x220a63(0x263)]['CheckVisibleBattleNotetags'](this[_0x220a63(0xa5d)],_0x556923))return!![];if(!VisuMZ[_0x220a63(0x263)][_0x220a63(0x11f)](this[_0x220a63(0xa5d)],_0x556923))return!![];if(!VisuMZ[_0x220a63(0x263)][_0x220a63(0x936)](this[_0x220a63(0xa5d)],_0x556923))return!![];}}}else{if(_0x220a63(0x318)!==_0x220a63(0x8a8)){if(!Window_SkillList[_0x220a63(0xbe1)]['checkShowHideBattleNotetags'][_0x220a63(0x2d7)](this,_0x556923))return!![];if(!Window_SkillList[_0x220a63(0xbe1)][_0x220a63(0x844)][_0x220a63(0x2d7)](this,_0x556923))return!![];if(!Window_SkillList[_0x220a63(0xbe1)][_0x220a63(0x625)][_0x220a63(0x2d7)](this,_0x556923))return!![];}else _0xb0fba6[_0x220a63(0x34b)]=_0x350334[_0x220a63(0x48c)];}}return![];},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x2fd)]=function(_0x1d081e){const _0x54f5b0=_0x1e608f;if(!_0x1d081e)return;if(!this[_0x54f5b0(0x8d6)](_0x1d081e))return;const _0x286d1f=this['commandStyle'](),_0x1e85d2=DataManager[_0x54f5b0(0x8d7)](_0x1d081e),_0x32fb10=DataManager[_0x54f5b0(0x495)](_0x1d081e),_0x12e132=_0x286d1f===_0x54f5b0(0xb68)?_0x1e85d2:_0x54f5b0(0x30b)[_0x54f5b0(0x92f)](_0x32fb10,_0x1e85d2),_0x57f0c9=this[_0x54f5b0(0xa5d)]['canUse'](_0x1d081e);this[_0x54f5b0(0x15e)](_0x12e132,_0x54f5b0(0x1d9),_0x57f0c9,_0x1d081e['id']);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x8d6)]=function(_0x26449f){const _0x5b7c4c=_0x1e608f,_0x330dde=_0x26449f['note'];if(_0x330dde[_0x5b7c4c(0x97b)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x5b7c4c(0xa5d)][_0x5b7c4c(0x2a0)](_0x26449f['id']))return![];}if(_0x330dde[_0x5b7c4c(0x97b)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x5b7c4c(0xa5d)][_0x5b7c4c(0xcb8)](_0x26449f['id']))return![];}const _0x70ca64=VisuMZ[_0x5b7c4c(0xce2)][_0x5b7c4c(0x1eb)](_0x26449f,'CommandVisible');if(VisuMZ[_0x5b7c4c(0xce2)]['JS'][_0x70ca64]){if(!VisuMZ['BattleCore']['JS'][_0x70ca64]['call'](this,this[_0x5b7c4c(0xa5d)],_0x26449f))return![];}return VisuMZ['BattleCore'][_0x5b7c4c(0x603)](_0x26449f);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x603)]=function(_0x3aed74){const _0x22489e=_0x1e608f,_0x4169cd=_0x3aed74[_0x22489e(0xb2d)];if(_0x4169cd[_0x22489e(0x97b)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x22489e(0xce7)===_0x22489e(0x4f2))return _0x506e28(_0x599fa6['$1'])[_0x22489e(0x783)](/[\r\n]+/);else{const _0x1a7419=JSON[_0x22489e(0x771)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1d2c92 of _0x1a7419){if(!$gameSwitches[_0x22489e(0x1c6)](_0x1d2c92))return![];}return!![];}}if(_0x4169cd[_0x22489e(0x97b)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x22489e(0x79e)!==_0x22489e(0x330)){const _0x571b78=JSON[_0x22489e(0x771)]('['+RegExp['$1'][_0x22489e(0x97b)](/\d+/g)+']');for(const _0x38c558 of _0x571b78){if(!$gameSwitches[_0x22489e(0x1c6)](_0x38c558))return![];}return!![];}else{const _0x1b362d=_0x5cf717[_0x22489e(0x54c)][0x0];if(_0x1b362d['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}if(_0x4169cd['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x291fa9=JSON[_0x22489e(0x771)]('['+RegExp['$1'][_0x22489e(0x97b)](/\d+/g)+']');for(const _0x1438ed of _0x291fa9){if($gameSwitches[_0x22489e(0x1c6)](_0x1438ed))return!![];}return![];}if(_0x4169cd['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x32cce8=JSON[_0x22489e(0x771)]('['+RegExp['$1'][_0x22489e(0x97b)](/\d+/g)+']');for(const _0x340a4a of _0x32cce8){if(!$gameSwitches[_0x22489e(0x1c6)](_0x340a4a))return!![];}return![];}if(_0x4169cd[_0x22489e(0x97b)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x72718d=JSON['parse']('['+RegExp['$1'][_0x22489e(0x97b)](/\d+/g)+']');for(const _0x30a9eb of _0x72718d){if(!$gameSwitches[_0x22489e(0x1c6)](_0x30a9eb))return!![];}return![];}if(_0x4169cd[_0x22489e(0x97b)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x38172e=JSON[_0x22489e(0x771)]('['+RegExp['$1'][_0x22489e(0x97b)](/\d+/g)+']');for(const _0x583a9a of _0x38172e){if(_0x22489e(0x35b)===_0x22489e(0x5b4))this[_0x22489e(0x9a5)](this[_0x22489e(0x8b8)]);else{if($gameSwitches[_0x22489e(0x1c6)](_0x583a9a))return![];}}return!![];}return!![];},Window_ActorCommand[_0x1e608f(0xbe1)]['addEscapeCommand']=function(){const _0x5a5426=_0x1e608f,_0x4e0a2f=this[_0x5a5426(0x947)](),_0x13cf40=VisuMZ[_0x5a5426(0xce2)][_0x5a5426(0x4a9)][_0x5a5426(0x408)][_0x5a5426(0xbb7)],_0x7eec93=_0x4e0a2f==='text'?TextManager[_0x5a5426(0x5aa)]:'\x5cI[%1]%2'['format'](_0x13cf40,TextManager[_0x5a5426(0x5aa)]),_0x106a8e=this['isEscapeCommandEnabled']();this['addCommand'](_0x7eec93,_0x5a5426(0x5aa),_0x106a8e);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x786)]=function(){const _0x48ed0a=_0x1e608f;return BattleManager[_0x48ed0a(0x349)]();},Window_ActorCommand['prototype']['addAutoBattleCommand']=function(){const _0x40f5da=_0x1e608f,_0xffce07=this[_0x40f5da(0x947)](),_0x31770e=VisuMZ['BattleCore'][_0x40f5da(0x4a9)][_0x40f5da(0x408)][_0x40f5da(0xa2d)],_0x451ed7=_0xffce07===_0x40f5da(0xb68)?TextManager['autoBattle']:_0x40f5da(0x30b)['format'](_0x31770e,TextManager[_0x40f5da(0x685)]),_0xdb960d=this['isAutoBattleCommandEnabled']();this[_0x40f5da(0x15e)](_0x451ed7,'autoBattle',_0xdb960d);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0xbcf)]=function(){return!![];},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x335)]=function(){const _0x56dcff=_0x1e608f;return VisuMZ[_0x56dcff(0xce2)][_0x56dcff(0x4a9)][_0x56dcff(0x4de)][_0x56dcff(0x8db)];},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x387)]=function(_0x5e018a){const _0x2f1a73=_0x1e608f,_0x1f5604=this[_0x2f1a73(0x8b0)](_0x5e018a);if(_0x1f5604===_0x2f1a73(0x6e6))this[_0x2f1a73(0x3e3)](_0x5e018a);else _0x1f5604===_0x2f1a73(0xad0)?this[_0x2f1a73(0x412)](_0x5e018a):Window_Command['prototype']['drawItem']['call'](this,_0x5e018a);this[_0x2f1a73(0x1cb)](_0x5e018a);},Window_ActorCommand['prototype']['commandStyle']=function(){const _0x3a5b4a=_0x1e608f;return VisuMZ[_0x3a5b4a(0xce2)]['Settings']['ActorCmd'][_0x3a5b4a(0x835)];},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x8b0)]=function(_0x276225){const _0x537b5a=_0x1e608f;if(_0x276225<0x0)return _0x537b5a(0xb68);const _0x428492=this[_0x537b5a(0x947)]();if(_0x428492!==_0x537b5a(0xa2f))return _0x428492;else{if(this['maxItems']()>0x0){if('jeHzD'!==_0x537b5a(0xd38)){const _0x3da644=this['commandName'](_0x276225);if(_0x3da644[_0x537b5a(0x97b)](/\\I\[(\d+)\]/i)){const _0x3decec=this[_0x537b5a(0x9c1)](_0x276225),_0xf2fc65=this[_0x537b5a(0xa3d)](_0x3da644)[_0x537b5a(0x78f)];if(_0xf2fc65<=_0x3decec['width']){if('kpBCi'===_0x537b5a(0xc7a))return _0x537b5a(0x6e6);else this[_0x537b5a(0x36d)]=_0x537b5a(0xd11);}else return _0x537b5a(0xad0);}}else{if(_0x5d9d43[_0x537b5a(0xce2)]['_commonEventKey'][_0x993d5]){const _0x20c3f0=_0x31bdd3[_0x537b5a(0xce2)]['_commonEventKey'][_0x2b51b5],_0x4992fc={'code':0x2c,'dataId':_0x20c3f0,'value1':0x1,'value2':0x0};_0x1ae2ce['effects']['push'](_0x4992fc);}}}}return _0x537b5a(0xb68);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x3e3)]=function(_0x355a61){const _0x21c2d0=_0x1e608f,_0x1cfee3=this['itemLineRect'](_0x355a61),_0x27f442=this['commandName'](_0x355a61),_0x3a3bf6=this['textSizeEx'](_0x27f442)[_0x21c2d0(0x78f)];this[_0x21c2d0(0x69e)](this['isCommandEnabled'](_0x355a61));const _0x3df959=this[_0x21c2d0(0x335)]();if(_0x3df959===_0x21c2d0(0x2d8))this[_0x21c2d0(0x53d)](_0x27f442,_0x1cfee3['x']+_0x1cfee3['width']-_0x3a3bf6,_0x1cfee3['y'],_0x3a3bf6);else{if(_0x3df959==='center'){if(_0x21c2d0(0xa2a)!==_0x21c2d0(0x1b8)){const _0x16c1ab=_0x1cfee3['x']+Math[_0x21c2d0(0x14d)]((_0x1cfee3[_0x21c2d0(0x78f)]-_0x3a3bf6)/0x2);this[_0x21c2d0(0x53d)](_0x27f442,_0x16c1ab,_0x1cfee3['y'],_0x3a3bf6);}else this[_0x21c2d0(0x552)][_0x21c2d0(0x9a5)](this['_uiContainer']);}else this['drawTextEx'](_0x27f442,_0x1cfee3['x'],_0x1cfee3['y'],_0x3a3bf6);}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x412)]=function(_0x47e2a1){const _0x12c01e=_0x1e608f;this['commandName'](_0x47e2a1)[_0x12c01e(0x97b)](/\\I\[(\d+)\]/i);const _0x3e3f1b=Number(RegExp['$1'])||0x0,_0x4baacc=this['itemLineRect'](_0x47e2a1),_0x444cef=_0x4baacc['x']+Math['floor']((_0x4baacc[_0x12c01e(0x78f)]-ImageManager[_0x12c01e(0x202)])/0x2),_0x3778dc=_0x4baacc['y']+(_0x4baacc[_0x12c01e(0x96b)]-ImageManager[_0x12c01e(0x115)])/0x2;this[_0x12c01e(0xc52)](_0x3e3f1b,_0x444cef,_0x3778dc);},Window_ActorCommand[_0x1e608f(0xbe1)]['drawSingleSkillCost']=function(_0xf9ccaf){const _0x37a809=_0x1e608f;if(!(VisuMZ['BattleCore'][_0x37a809(0x4a9)]['ActorCmd'][_0x37a809(0xc76)]??!![]))return;const _0x72044=this['commandSymbol'](_0xf9ccaf);if(![_0x37a809(0x16c),_0x37a809(0x950),_0x37a809(0x1d9)][_0x37a809(0xc3d)](_0x72044))return;const _0x15d6a0=this[_0x37a809(0x9c1)](_0xf9ccaf);let _0x5c320c=null;if(_0x72044===_0x37a809(0x16c))_0x37a809(0xcb5)===_0x37a809(0xcb5)?_0x5c320c=$dataSkills[this[_0x37a809(0xa5d)][_0x37a809(0x60b)]()]:_0xf187ae['BattleCore']['Game_Action_setGuard']['call'](this);else{if(_0x72044==='guard'){if(_0x37a809(0x379)!==_0x37a809(0x3e1))_0x5c320c=$dataSkills[this[_0x37a809(0xa5d)]['guardSkillId']()];else{const _0x32433c=!!this[_0x37a809(0xc10)];this[_0x37a809(0xc10)]=_0x41f5dc,_0x32433c&&(this[_0x37a809(0xc75)](),this[_0x37a809(0x1d6)]());}}else{if('GRMka'===_0x37a809(0x5c6)){if(!this[_0x37a809(0xd81)]())return;if(_0xbb3ebe<=0x0)return;this[_0x37a809(0xb4f)]=_0x173392,this[_0x37a809(0x560)]=_0x2e179e,this[_0x37a809(0xb0f)]=_0x22273b;}else _0x5c320c=$dataSkills[this[_0x37a809(0xb21)][_0xf9ccaf][_0x37a809(0x41b)]];}}this[_0x37a809(0x4b4)](this[_0x37a809(0xa5d)],_0x5c320c,_0x15d6a0['x'],_0x15d6a0['y'],_0x15d6a0['width']);},Window_ActorCommand[_0x1e608f(0xbe1)]['drawSkillCost']=function(_0x2d8b9,_0x1d9093,_0xf0580b,_0x115c65,_0x1130f3){const _0x542b3c=_0x1e608f;if(!_0x1d9093)return;Imported[_0x542b3c(0x3ef)]?Window_Command[_0x542b3c(0xbe1)][_0x542b3c(0x4b4)]['call'](this,_0x2d8b9,_0x1d9093,_0xf0580b,_0x115c65,_0x1130f3):Window_SkillList['prototype'][_0x542b3c(0x4b4)][_0x542b3c(0x2d7)](this,_0x1d9093,_0xf0580b,_0x115c65,_0x1130f3);},Window_ActorCommand['prototype'][_0x1e608f(0x64e)]=function(){},Window_ActorCommand['prototype'][_0x1e608f(0x8ad)]=function(){const _0x469a7b=_0x1e608f;Window_Command[_0x469a7b(0xbe1)][_0x469a7b(0x8ad)]['call'](this);const _0x2e5bc4=this[_0x469a7b(0x687)]();if(_0x2e5bc4===_0x469a7b(0xd11)){if(_0x469a7b(0x3d0)===_0x469a7b(0x3d0))this[_0x469a7b(0x5d2)]();else{const _0x59abf1=_0x335d82[_0x469a7b(0x3cb)](_0x3f981e['x'],_0x29eba5['y']);if(this[_0x469a7b(0x9b8)]&&this[_0x469a7b(0x9b8)][_0x59abf1])return this[_0x469a7b(0x9b8)][_0x59abf1];}}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x687)]=function(){const _0x227681=_0x1e608f;if(this['_battleLayoutStyle'])return this[_0x227681(0x675)];return this[_0x227681(0x675)]=SceneManager[_0x227681(0x327)][_0x227681(0x687)](),this[_0x227681(0x675)];},VisuMZ[_0x1e608f(0xce2)]['Window_ActorCommand_setup']=Window_ActorCommand['prototype'][_0x1e608f(0x429)],Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x429)]=function(_0x54ac23){const _0xcb4176=_0x1e608f,_0x25f2f3=this[_0xcb4176(0x687)]();if(_0x54ac23&&['xp',_0xcb4176(0x3d5)][_0xcb4176(0xc3d)](_0x25f2f3))this[_0xcb4176(0x44d)](_0x54ac23);else{if(_0x54ac23&&[_0xcb4176(0xd11)]['includes'](_0x25f2f3)){if(_0xcb4176(0x83d)==='yFmLJ')return this['customDamageFormula'](_0x28c1b0);else this[_0xcb4176(0x36b)](_0x54ac23),this[_0xcb4176(0x5d2)]();}}VisuMZ[_0xcb4176(0xce2)]['Window_ActorCommand_setup'][_0xcb4176(0x2d7)](this,_0x54ac23),_0x54ac23&&$gameTroop[_0xcb4176(0x588)]()[_0xcb4176(0xcaf)]>0x0&&_0x54ac23[_0xcb4176(0x8dd)]()&&_0x54ac23[_0xcb4176(0x8dd)]()[_0xcb4176(0x533)]();},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x44d)]=function(_0x28b417){const _0x27fa3b=_0x1e608f,_0x3b8fe2=VisuMZ[_0x27fa3b(0xce2)][_0x27fa3b(0x4a9)][_0x27fa3b(0x51a)][_0x27fa3b(0x428)],_0x5d3926=Math[_0x27fa3b(0x1a5)](Graphics[_0x27fa3b(0x748)]/0x3),_0x2a91bd=Math['round'](Graphics[_0x27fa3b(0x748)]/$gameParty[_0x27fa3b(0xb46)]()[_0x27fa3b(0xcaf)]),_0x51ff51=Math[_0x27fa3b(0x127)](Math[_0x27fa3b(0xb27)](_0x5d3926,_0x2a91bd),_0x3b8fe2),_0x9461e8=this[_0x27fa3b(0xcd6)](VisuMZ[_0x27fa3b(0xce2)][_0x27fa3b(0x4a9)]['BattleLayout']['XPActorCommandLines']),_0xfc085f=Math[_0x27fa3b(0x14d)]((Graphics[_0x27fa3b(0x748)]-Graphics[_0x27fa3b(0x78f)])/0x2),_0x73e9ab=Graphics[_0x27fa3b(0x748)]-_0xfc085f,_0x2b798d=(Math['round'](_0x2a91bd*_0x28b417[_0x27fa3b(0xcb0)]())+Math['round']((_0x2a91bd-_0x51ff51)/0x2))['clamp'](_0xfc085f,_0x73e9ab-_0x51ff51),_0xdfdaac=Math['round'](SceneManager['_scene']['_statusWindow']['y']-_0x9461e8);this['move'](_0x2b798d,_0xdfdaac,_0x51ff51,_0x9461e8),this[_0x27fa3b(0xb44)](),this[_0x27fa3b(0x8cd)](0x1);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x36b)]=function(_0xc1c98a){const _0x136f51=_0x1e608f,_0x28a77c=SceneManager[_0x136f51(0x327)][_0x136f51(0x92d)]();this[_0x136f51(0xc35)](_0x28a77c['x'],_0x28a77c['y'],_0x28a77c[_0x136f51(0x78f)],_0x28a77c['height']),this[_0x136f51(0xb44)](),this[_0x136f51(0x8cd)](0x0);},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x7d0)]=function(){const _0x34d62d=_0x1e608f;if(this[_0x34d62d(0xd42)]){const _0x101f96=this[_0x34d62d(0xd42)][_0x34d62d(0x34b)],_0x405ae0=this[_0x34d62d(0x78f)]-0x8,_0x248c76=this[_0x34d62d(0x96b)],_0x4c1fe1=this[_0x34d62d(0x85a)],_0x2449f2=ColorManager[_0x34d62d(0x9b2)](),_0x35e75b=ColorManager[_0x34d62d(0x6d7)]();this[_0x34d62d(0xd42)]['x']=0x4,_0x101f96['resize'](_0x405ae0,_0x248c76),_0x101f96[_0x34d62d(0xd70)](0x0,0x0,_0x405ae0,_0x4c1fe1,_0x35e75b,_0x2449f2,!![]),_0x101f96[_0x34d62d(0x731)](0x0,_0x4c1fe1,_0x405ae0,_0x248c76-_0x4c1fe1*0x2,_0x2449f2),_0x101f96[_0x34d62d(0xd70)](0x0,_0x248c76-_0x4c1fe1,_0x405ae0,_0x4c1fe1,_0x2449f2,_0x35e75b,!![]),this[_0x34d62d(0xd42)][_0x34d62d(0x23f)](0x0,0x0,_0x405ae0,_0x248c76);}},Window_ActorCommand['prototype']['updateHelp']=function(){const _0x5606e6=_0x1e608f;if(!this['_actor'])return;const _0x145c08=VisuMZ[_0x5606e6(0xce2)]['Settings']['ActorCmd'],_0x4749d9=this[_0x5606e6(0x5ca)]();switch(_0x4749d9){case _0x5606e6(0x16c):this[_0x5606e6(0x226)]($dataSkills[this['_actor'][_0x5606e6(0x60b)]()]);break;case'guard':this[_0x5606e6(0x226)]($dataSkills[this['_actor']['guardSkillId']()]);break;case _0x5606e6(0x86c):const _0x332cf1=_0x145c08[_0x5606e6(0x210)],_0x2203de=_0x332cf1[_0x5606e6(0x92f)]($dataSystem['skillTypes'][this[_0x5606e6(0x715)]()]);this[_0x5606e6(0x482)][_0x5606e6(0x460)](_0x2203de);break;case'singleSkill':this[_0x5606e6(0x226)]($dataSkills[this[_0x5606e6(0x715)]()]);break;case _0x5606e6(0xa0b):this[_0x5606e6(0x482)][_0x5606e6(0x460)](_0x145c08['HelpItem']);break;case _0x5606e6(0x5aa):this['_helpWindow'][_0x5606e6(0x460)](_0x145c08[_0x5606e6(0x717)]);break;case _0x5606e6(0x685):this[_0x5606e6(0x482)][_0x5606e6(0x460)](_0x145c08[_0x5606e6(0x1c0)]);break;default:this[_0x5606e6(0x482)][_0x5606e6(0x460)]('');break;}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0xa42)]=function(){const _0x31abeb=_0x1e608f;this[_0x31abeb(0xd27)](0x0);if(this[_0x31abeb(0xa5d)]&&ConfigManager[_0x31abeb(0x164)]){const _0x4627e0=this[_0x31abeb(0xa5d)][_0x31abeb(0xa35)]();this['selectSymbol'](_0x4627e0);if(_0x4627e0===_0x31abeb(0x86c)){if('ttbCK'===_0x31abeb(0xaf0)){const _0x3b3134=this[_0x31abeb(0xa5d)][_0x31abeb(0x31b)]();if(_0x3b3134){const _0x2f67e6=this[_0x31abeb(0x645)]('skill',_0x3b3134[_0x31abeb(0x96d)]);this[_0x31abeb(0x184)](_0x2f67e6||0x0);}}else return _0x3f25de[_0x31abeb(0x969)][0x0];}else{if(_0x4627e0===_0x31abeb(0x1d9)){if('pPOoS'==='pPOoS'){const _0x2406ba=this[_0x31abeb(0xa5d)][_0x31abeb(0x31b)]();if(_0x2406ba){const _0x32b207=this[_0x31abeb(0x645)](_0x31abeb(0x1d9),_0x2406ba['id']);this[_0x31abeb(0x184)](_0x32b207||0x0);}}else return _0x4757c3[_0x31abeb(0xce2)][_0x31abeb(0xd5c)][_0x31abeb(0x2d7)](this);}}}},Window_ActorCommand[_0x1e608f(0xbe1)][_0x1e608f(0x645)]=function(_0x3c26bf,_0x348d7f){const _0x361eb0=_0x1e608f;return this[_0x361eb0(0xb21)]['findIndex'](_0x38d22b=>_0x38d22b[_0x361eb0(0x91b)]===_0x3c26bf&&_0x38d22b[_0x361eb0(0x41b)]===_0x348d7f);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4b5)]=Window_BattleStatus[_0x1e608f(0xbe1)]['initialize'],Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xb89)]=function(_0x516b6c){const _0x5b7562=_0x1e608f;VisuMZ['BattleCore'][_0x5b7562(0x4b5)]['call'](this,_0x516b6c),this[_0x5b7562(0xb15)](),this[_0x5b7562(0x789)]();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x687)]=function(){const _0x2b31f1=_0x1e608f;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x2b31f1(0x675)]=SceneManager[_0x2b31f1(0x327)][_0x2b31f1(0x687)](),this[_0x2b31f1(0x675)];},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xb15)]=function(){const _0x55bf36=_0x1e608f;this['frameVisible']=this[_0x55bf36(0x427)]();const _0x2474ac=VisuMZ[_0x55bf36(0xce2)][_0x55bf36(0x4a9)][_0x55bf36(0x51a)];_0x2474ac[_0x55bf36(0xa39)]&&(this['opacity']=0x0);},Window_BattleStatus['prototype'][_0x1e608f(0x427)]=function(){const _0x58d059=_0x1e608f,_0x5b04d0=VisuMZ[_0x58d059(0xce2)][_0x58d059(0x4a9)][_0x58d059(0x51a)];if(_0x5b04d0[_0x58d059(0x1d0)]){if(_0x58d059(0x264)===_0x58d059(0x264))return!![];else{let _0x5c0f49=0x0;this[_0x58d059(0x285)]['length']>0x0&&(_0x5c0f49=this[_0x58d059(0x285)][this[_0x58d059(0x285)]['length']-0x1]),this[_0x58d059(0xa08)][_0x58d059(0xcaf)]>_0x5c0f49?this['wait']():this['callNextMethod']();}}const _0x43c816=this[_0x58d059(0x687)]();switch(_0x43c816){case _0x58d059(0x68e):case _0x58d059(0xd11):return!![];break;case'default':case'xp':case _0x58d059(0x3d5):default:return![];break;}},Window_BattleStatus[_0x1e608f(0xbe1)]['extraHeight']=function(){const _0x14a589=_0x1e608f;if(this[_0x14a589(0x427)]())return 0x0;else{if(_0x14a589(0xaba)!==_0x14a589(0x31f))return 0xa;else{if(_0x245f09['_spriteset']['isAnyProjectilePresent']())return!![];this[_0x14a589(0x7c0)]='';}}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x145)]=function(){const _0x1cc4b8=_0x1e608f,_0x820f40=this['battleLayoutStyle']();switch(_0x820f40){case _0x1cc4b8(0x68e):return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()[_0x1cc4b8(0xcaf)];break;case'default':default:return $gameParty[_0x1cc4b8(0xcfa)]();break;}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xaf8)]=function(){const _0x1780fb=_0x1e608f,_0x2512ff=this[_0x1780fb(0x687)]();switch(_0x2512ff){case _0x1780fb(0x68e):return Window_StatusBase[_0x1780fb(0xbe1)][_0x1780fb(0xaf8)][_0x1780fb(0x2d7)](this);break;case _0x1780fb(0x702):case'xp':case _0x1780fb(0x3d5):default:return this[_0x1780fb(0xacd)];break;}},Window_BattleStatus[_0x1e608f(0xbe1)]['rowSpacing']=function(){const _0x55ccfd=_0x1e608f,_0x4e6b0e=this['battleLayoutStyle']();switch(_0x4e6b0e){case _0x55ccfd(0x68e):return Window_StatusBase['prototype'][_0x55ccfd(0x743)][_0x55ccfd(0x2d7)](this);break;case _0x55ccfd(0x702):case'xp':case _0x55ccfd(0x3d5):default:return 0x0;break;}},Window_BattleStatus[_0x1e608f(0xbe1)]['updatePadding']=function(){const _0x28c53b=_0x1e608f;this['isFrameVisible']()?Window_StatusBase['prototype']['updatePadding'][_0x28c53b(0x2d7)](this):this[_0x28c53b(0x85a)]=0x8;},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xb20)]=function(){const _0x56940e=_0x1e608f,_0x202c3d=VisuMZ['BattleCore'][_0x56940e(0x4a9)][_0x56940e(0x51a)];if(_0x202c3d['StatusWindowSkinFilename'])_0x56940e(0x2af)!==_0x56940e(0x57e)?this[_0x56940e(0xc91)]=ImageManager[_0x56940e(0x5f3)](_0x202c3d['StatusWindowSkinFilename']):(this[_0x56940e(0x8d8)]=this['x'],this[_0x56940e(0x171)]=this['y'],this['updateFloat'](),this[_0x56940e(0x4b7)](),this['x']+=this[_0x56940e(0x1ad)](),this['y']+=this[_0x56940e(0xabf)](),this['y']+=this['extraPositionScaledY'](),this['x']=_0x110d4b['floor'](this['x']),this['y']=_0x3f9ba7[_0x56940e(0x14d)](this['y']));else{if(_0x56940e(0x244)!=='tLrCx')Window_StatusBase[_0x56940e(0xbe1)][_0x56940e(0xb20)][_0x56940e(0x2d7)](this);else{const _0xf080ff=this['_forcedBattlers'][_0x56940e(0x97d)](),_0x342516=_0xf080ff[0x0];return _0x342516[_0x56940e(0x49d)]=_0x342516[_0x56940e(0x49d)]||[],_0x342516[_0x56940e(0x49d)][0x0]=_0xf080ff[0x1],_0x342516;}}},Window_BattleStatus[_0x1e608f(0xbe1)]['drawItemBackground']=function(_0x1e2568){const _0x143348=_0x1e608f,_0x547da2=VisuMZ[_0x143348(0xce2)][_0x143348(0x4a9)][_0x143348(0x51a)];if(_0x547da2[_0x143348(0x82a)])return;Window_StatusBase[_0x143348(0xbe1)]['drawItemBackground'][_0x143348(0x2d7)](this,_0x1e2568);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x316)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x13a1c7=_0x1e608f;Window_StatusBase[_0x13a1c7(0xbe1)][_0x13a1c7(0x593)]['call'](this),this[_0x13a1c7(0x190)](),this[_0x13a1c7(0x5d1)]();if(this['battleLayoutStyle']()==='border')this[_0x13a1c7(0x452)]();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x190)]=function(){const _0x19794c=_0x1e608f;if($gameTemp[_0x19794c(0x85d)]())this[_0x19794c(0x17d)](),this[_0x19794c(0x7ae)]=![],$gameTemp[_0x19794c(0x82f)]();else this[_0x19794c(0x7ae)]&&(this[_0x19794c(0x7ae)]=![],this[_0x19794c(0xd5d)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x478)]=function(){const _0x2421dc=_0x1e608f;Window_StatusBase[_0x2421dc(0xbe1)][_0x2421dc(0x478)][_0x2421dc(0x2d7)](this);if(!$gameSystem[_0x2421dc(0x3e6)]())this['refresh']();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x64e)]=function(){const _0x1cfedd=_0x1e608f;if(this[_0x1cfedd(0x5c0)]===Window_BattleStatus)return;Window_StatusBase[_0x1cfedd(0xbe1)][_0x1cfedd(0x64e)][_0x1cfedd(0x2d7)](this);},Window_BattleStatus[_0x1e608f(0xbe1)]['drawBackgroundRect']=function(_0x10b1af){const _0x489d2c=_0x1e608f,_0x331f1c=this[_0x489d2c(0x687)]();switch(_0x331f1c){case'xp':case'portrait':break;case _0x489d2c(0x702):case _0x489d2c(0x68e):case _0x489d2c(0xd11):default:return Window_StatusBase[_0x489d2c(0xbe1)][_0x489d2c(0x19e)][_0x489d2c(0x2d7)](this,_0x10b1af);break;}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xcf5)]=Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x1d5)],Window_BattleStatus['prototype'][_0x1e608f(0x1d5)]=function(_0x27af81){const _0x24abd8=_0x1e608f,_0x1e266f=this[_0x24abd8(0x687)]();switch(_0x1e266f){case _0x24abd8(0x68e):this[_0x24abd8(0x1ba)](_0x27af81);break;case'xp':this[_0x24abd8(0x70e)](_0x27af81);break;case'portrait':this[_0x24abd8(0xd64)](_0x27af81);break;case'default':case _0x24abd8(0xd11):default:VisuMZ['BattleCore'][_0x24abd8(0xcf5)][_0x24abd8(0x2d7)](this,_0x27af81);break;}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x472)]=function(_0x56bcb8){const _0x29a53b=_0x1e608f,_0x40d05b=this[_0x29a53b(0x687)]();if(!$gameSystem[_0x29a53b(0x3e6)]())this[_0x29a53b(0x576)](_0x56bcb8);switch(_0x40d05b){case _0x29a53b(0x68e):this[_0x29a53b(0x541)](_0x56bcb8);break;case'xp':case _0x29a53b(0x3d5):case _0x29a53b(0x702):case _0x29a53b(0xd11):default:this['drawItemStatusXPStyle'](_0x56bcb8);break;}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x4e8)]=function(){const _0x225057=_0x1e608f,_0x586cff=this['battleLayoutStyle']();if(['xp'][_0x225057(0xc3d)](_0x586cff)&&!$gameSystem[_0x225057(0x3e6)]()){if(_0x225057(0x18f)===_0x225057(0xbf2)){const _0x488dee=_0x3e88a3['_scene'][_0x225057(0x5fc)];if(!_0x488dee)return;this[_0x225057(0xba1)]=![];const _0x282a58=this[_0x225057(0x24c)]();if(_0x282a58>=0x0){this[_0x225057(0x184)](_0x282a58);if(_0x13d404[_0x225057(0xba2)]()){const _0x16d9e6=_0x1bd429[_0x225057(0xb81)]()[_0x282a58],_0x283173=_0x488dee['_enemies'][_0x225057(0x8fc)](_0x16d9e6);_0x283173>=0x0&&(_0x488dee['select'](_0x283173),_0x488dee[_0x225057(0xba3)]());}}}else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x225057(0xbe1)][_0x225057(0x4e8)][_0x225057(0x2d7)](this);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x576)]=function(_0x1b9085){const _0x254a1f=_0x1e608f,_0x348b38=this[_0x254a1f(0x532)](_0x1b9085)['battler']();if(!_0x348b38)return;const _0x2bf2e6=this[_0x254a1f(0x687)](),_0x227f37=this[_0x254a1f(0x372)](_0x1b9085);let _0x21f2be=Math[_0x254a1f(0x1a5)](_0x227f37['x']+_0x227f37[_0x254a1f(0x78f)]/0x2)+this[_0x254a1f(0x85a)];if([_0x254a1f(0x68e)][_0x254a1f(0xc3d)](_0x2bf2e6)){if(_0x254a1f(0x477)===_0x254a1f(0x477))_0x21f2be=_0x227f37[_0x254a1f(0x78f)]/$gameParty['battleMembers']()[_0x254a1f(0xcaf)],_0x21f2be*=_0x1b9085,_0x21f2be+=_0x227f37[_0x254a1f(0x78f)]/$gameParty['battleMembers']()[_0x254a1f(0xcaf)]/0x2;else return null;}let _0x38e043=Math[_0x254a1f(0x1a5)](this[_0x254a1f(0x832)](_0x1b9085,_0x348b38,_0x227f37));_0x348b38[_0x254a1f(0x63d)](_0x21f2be,_0x38e043),this[_0x254a1f(0x9a7)](_0x348b38,0x1),_0x348b38[_0x254a1f(0x478)](),this[_0x254a1f(0x689)](),this[_0x254a1f(0x8d2)]();},Window_BattleStatus[_0x1e608f(0xbe1)]['frontviewSpriteY']=function(_0xdaab3c,_0x325843,_0x1a9b4d){const _0x8828d0=_0x1e608f,_0x25e2c0=VisuMZ['BattleCore'][_0x8828d0(0x4a9)][_0x8828d0(0x51a)],_0x38c844=this[_0x8828d0(0x687)]();if(_0x38c844==='xp'){const _0x58380d=_0x25e2c0[_0x8828d0(0x627)];switch(_0x58380d[_0x8828d0(0x377)]()[_0x8828d0(0x2a9)]()){case _0x8828d0(0x448):return _0x1a9b4d['height']-_0x325843[_0x8828d0(0x574)][_0x8828d0(0x96b)]/0x4;break;case _0x8828d0(0x624):const _0x4df698=_0x25e2c0[_0x8828d0(0xa47)];return(_0x1a9b4d[_0x8828d0(0x96b)]+(_0x325843[_0x8828d0(0x96b)]||_0x4df698))/0x2;break;case _0x8828d0(0x27a):return 0x0;case _0x8828d0(0x6aa):default:return this[_0x8828d0(0x64d)](_0x1a9b4d);break;}}else{if(_0x38c844===_0x8828d0(0x3d5)){}}return _0x325843['height'];},Sprite_Name[_0x1e608f(0xbe1)][_0x1e608f(0x439)]=function(){return 0x24;},Sprite_Name[_0x1e608f(0xbe1)][_0x1e608f(0x724)]=function(){const _0x1b364b=_0x1e608f,_0x38be00=this[_0x1b364b(0x6aa)](),_0x2b1236=this[_0x1b364b(0x8cf)](),_0x425dde=this['bitmapHeight']();this[_0x1b364b(0x621)](),this[_0x1b364b(0x34b)][_0x1b364b(0x639)](),this[_0x1b364b(0x34b)][_0x1b364b(0x2a6)](_0x38be00,0x4,0x0,_0x2b1236,_0x425dde,'left');},Bitmap[_0x1e608f(0xbe1)][_0x1e608f(0x2a6)]=function(_0x1a4753,_0x22dc99,_0x450663,_0x4983c2,_0x25858d,_0x3c3565){const _0x318b6c=_0x1e608f;TextManager['parseLocalizedText']&&(_0x1a4753=TextManager['parseLocalizedText'](_0x1a4753));const _0x39e676=this[_0x318b6c(0xbf6)],_0x4b8752=_0x39e676[_0x318b6c(0x7ba)];_0x4983c2=_0x4983c2||0xffffffff;let _0x270517=_0x22dc99,_0x3734bd=Math['round'](_0x450663+0x18/0x2+this[_0x318b6c(0x422)]*0.35);_0x3c3565===_0x318b6c(0x624)&&(_0x270517+=_0x4983c2/0x2),_0x3c3565===_0x318b6c(0x2d8)&&('xOVji'===_0x318b6c(0x9ae)?_0x270517+=_0x4983c2:this[_0x318b6c(0xb54)](_0x306573)),_0x39e676[_0x318b6c(0xaec)](),_0x39e676[_0x318b6c(0xa4f)]=this['_makeFontNameText'](),_0x39e676['textAlign']=_0x3c3565,_0x39e676['textBaseline']=_0x318b6c(0x162),_0x39e676[_0x318b6c(0x7ba)]=0x1,this[_0x318b6c(0x334)](_0x1a4753,_0x270517,_0x3734bd,_0x4983c2),_0x39e676[_0x318b6c(0x7ba)]=_0x4b8752,this[_0x318b6c(0x480)](_0x1a4753,_0x270517,_0x3734bd,_0x4983c2),_0x39e676['restore'](),this[_0x318b6c(0x3b9)]['update']();},Window_BattleStatus['prototype']['nameY']=function(_0x3688f0){const _0x41a4d5=_0x1e608f;return this[_0x41a4d5(0x1fd)](_0x3688f0)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x1e608f(0x1ba)]=function(_0x454fa4){const _0x4abfa2=_0x1e608f;if(!VisuMZ['BattleCore'][_0x4abfa2(0x4a9)]['BattleLayout'][_0x4abfa2(0x774)])return;const _0x399e9a=this[_0x4abfa2(0x532)](_0x454fa4),_0x1f90b5=this[_0x4abfa2(0x372)](_0x454fa4);_0x1f90b5['width']=ImageManager[_0x4abfa2(0x721)],_0x1f90b5['height']-=0x2,this[_0x4abfa2(0xadc)](_0x399e9a,_0x1f90b5['x']+0x1,_0x1f90b5['y']+0x1,_0x1f90b5[_0x4abfa2(0x78f)],_0x1f90b5[_0x4abfa2(0x96b)]);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x541)]=function(_0x399e8c){const _0x34142f=_0x1e608f,_0x4e8650=VisuMZ[_0x34142f(0xce2)][_0x34142f(0x4a9)][_0x34142f(0x51a)],_0x556c5b=$dataSystem[_0x34142f(0xc0c)]?0x4:0x3,_0x34d36a=_0x556c5b*0x80+(_0x556c5b-0x1)*0x8+0x4,_0x1a5687=this[_0x34142f(0x532)](_0x399e8c),_0x5d02c4=this[_0x34142f(0x372)](_0x399e8c);let _0x20da59=_0x5d02c4['x']+this['padding'];if(_0x4e8650[_0x34142f(0x774)]){if(_0x34142f(0xcab)===_0x34142f(0xcab))_0x20da59=_0x5d02c4['x']+ImageManager[_0x34142f(0x721)]+0x8;else{if(!_0x2287c['BattleCore'][_0x34142f(0x4a9)][_0x34142f(0x409)]['ShowMpDmg'])return;_0x4ffa2e[_0x34142f(0xce2)][_0x34142f(0x83a)]['call'](this,_0x106810);}}else _0x34142f(0x67c)===_0x34142f(0xb18)?this['autoMeleeMultiTargetActionSet'](_0x37ca27,_0x1cb82d,_0xb616c1):_0x20da59+=ImageManager['iconWidth'];const _0x43e1ca=Math[_0x34142f(0x1a5)](Math['min'](_0x5d02c4['x']+_0x5d02c4['width']-_0x34d36a,_0x20da59)),_0x9ad081=Math['round'](_0x5d02c4['y']+(_0x5d02c4[_0x34142f(0x96b)]-Sprite_Name[_0x34142f(0xbe1)][_0x34142f(0x439)]())/0x2),_0x59ec62=Math[_0x34142f(0x1a5)](_0x43e1ca-ImageManager[_0x34142f(0x202)]/0x2-0x4),_0x4ac7b6=Math['round'](_0x5d02c4['y']+(_0x5d02c4['height']-ImageManager[_0x34142f(0x115)])/0x2+ImageManager['iconHeight']/0x2);let _0x91ce54=_0x43e1ca+0x88;const _0xbd3eee=_0x9ad081;this[_0x34142f(0x8c7)](_0x1a5687,_0x43e1ca-0x4+(_0x4e8650[_0x34142f(0x773)]||0x0),_0x9ad081+(_0x4e8650[_0x34142f(0x1a8)]||0x0)),this[_0x34142f(0xc7f)](_0x1a5687,_0x43e1ca+(_0x4e8650['NameOffsetX']||0x0),_0x9ad081+(_0x4e8650[_0x34142f(0x360)]||0x0)),this['placeStateIcon'](_0x1a5687,_0x59ec62+(_0x4e8650[_0x34142f(0x2d2)]||0x0),_0x4ac7b6+(_0x4e8650['StateIconOffsetY']||0x0)),this['placeGauge'](_0x1a5687,'hp',_0x91ce54+0x88*0x0+(_0x4e8650[_0x34142f(0x15a)]||0x0),_0xbd3eee+(_0x4e8650[_0x34142f(0xc11)]||0x0)),this['placeGauge'](_0x1a5687,'mp',_0x91ce54+0x88*0x1+(_0x4e8650['MpGaugeOffsetX']||0x0),_0xbd3eee+(_0x4e8650[_0x34142f(0x4f5)]||0x0)),$dataSystem[_0x34142f(0xc0c)]&&this[_0x34142f(0xa8a)](_0x1a5687,'tp',_0x91ce54+0x88*0x2+(_0x4e8650[_0x34142f(0x755)]||0x0),_0xbd3eee+(_0x4e8650[_0x34142f(0xd37)]||0x0));},Window_BattleStatus[_0x1e608f(0xbe1)]['drawItemImageXPStyle']=function(_0xe94200){const _0x4ea624=_0x1e608f;if(!$gameSystem[_0x4ea624(0x3e6)]())return;VisuMZ['BattleCore'][_0x4ea624(0xcf5)][_0x4ea624(0x2d7)](this,_0xe94200);},Window_BattleStatus['prototype'][_0x1e608f(0xb3c)]=function(_0x1fbd4){const _0x26e339=_0x1e608f,_0x53281c=VisuMZ['BattleCore'][_0x26e339(0x4a9)][_0x26e339(0x51a)],_0x4a847b=this[_0x26e339(0x532)](_0x1fbd4),_0x169849=this[_0x26e339(0x372)](_0x1fbd4),_0x1c979f=Math[_0x26e339(0x1a5)](_0x169849['x']+(_0x169849[_0x26e339(0x78f)]-0x80)/0x2),_0x9546f0=this[_0x26e339(0x64d)](_0x169849);let _0x507047=_0x1c979f-ImageManager['iconWidth']/0x2-0x4,_0x3762c5=_0x9546f0+ImageManager[_0x26e339(0x115)]/0x2;if(_0x507047-ImageManager[_0x26e339(0x202)]/0x2<_0x169849['x']){if('ZsoRd'!==_0x26e339(0x61a)){if(this[_0x26e339(0x35a)])_0x1a9f66=_0x401681[_0x26e339(0x127)](0x0,this[_0x26e339(0x35a)]['height']-0x4);}else _0x507047=_0x1c979f+ImageManager[_0x26e339(0x202)]/0x2-0x4,_0x3762c5=_0x9546f0-ImageManager['iconHeight']/0x2;}const _0x404572=_0x1c979f,_0x284450=this[_0x26e339(0x1fd)](_0x169849);this[_0x26e339(0x8c7)](_0x4a847b,_0x1c979f+(_0x53281c[_0x26e339(0x773)]||0x0),_0x9546f0+(_0x53281c[_0x26e339(0x1a8)]||0x0)),this[_0x26e339(0xc7f)](_0x4a847b,_0x1c979f+(_0x53281c[_0x26e339(0x23d)]||0x0),_0x9546f0+(_0x53281c[_0x26e339(0x360)]||0x0)),this[_0x26e339(0xa58)](_0x4a847b,_0x507047+(_0x53281c[_0x26e339(0x2d2)]||0x0),_0x3762c5+(_0x53281c[_0x26e339(0x9e7)]||0x0)),this[_0x26e339(0xa8a)](_0x4a847b,'hp',_0x404572+(_0x53281c['HpGaugeOffsetX']||0x0),_0x284450+(_0x53281c[_0x26e339(0xc11)]||0x0)),this[_0x26e339(0xa8a)](_0x4a847b,'mp',_0x404572+(_0x53281c['MpGaugeOffsetX']||0x0),_0x284450+this[_0x26e339(0x836)]()+(_0x53281c[_0x26e339(0x4f5)]||0x0)),$dataSystem[_0x26e339(0xc0c)]&&(_0x26e339(0x39b)!=='OWyzl'?_0x742685[_0x26e339(0x3cd)]():this[_0x26e339(0xa8a)](_0x4a847b,'tp',_0x404572+(_0x53281c[_0x26e339(0x755)]||0x0),_0x284450+this[_0x26e339(0x836)]()*0x2+(_0x53281c[_0x26e339(0xd37)]||0x0)));},Window_BattleStatus['prototype']['showPortraits']=function(_0x338017){const _0x5a2291=_0x1e608f;if(!VisuMZ[_0x5a2291(0xce2)]['Settings'][_0x5a2291(0x51a)][_0x5a2291(0x243)])return![];if(_0x338017[_0x5a2291(0x8f7)]())return!![];return Imported[_0x5a2291(0x50b)]&&_0x338017[_0x5a2291(0xa3e)]();},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x4e0)]=function(){const _0x398fee=_0x1e608f;if(this[_0x398fee(0x532)]()[_0x398fee(0xb2d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x398fee(0x532)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('irHqH'!==_0x398fee(0x830))return Number(RegExp['$1']);else this[_0x398fee(0x12f)]();}}return 0x0;},Game_Actor[_0x1e608f(0xbe1)][_0x1e608f(0x204)]=function(){const _0xb6cba4=_0x1e608f;if(this['actor']()[_0xb6cba4(0xb2d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0xb6cba4(0x933)===_0xb6cba4(0xbac))this[_0xb6cba4(0xa80)][_0xb6cba4(0x3f7)]=_0xbd71f1(_0x537158['$1']),this[_0xb6cba4(0xa80)][_0xb6cba4(0x348)]=_0x1eb213(_0x16efc6['$2']);else return Number(RegExp['$1']);}else{if(this[_0xb6cba4(0x532)]()[_0xb6cba4(0xb2d)][_0xb6cba4(0x97b)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xd64)]=function(_0x17aef9){const _0x698afe=_0x1e608f,_0x2a8b1f=this[_0x698afe(0x532)](_0x17aef9);if(this[_0x698afe(0xbd8)](_0x2a8b1f)){if('CtbUp'!=='CtbUp')_0x2d7726[_0x698afe(0x91f)](0x0,0x0,_0x5e5fbc[_0x698afe(0x39d)],_0x4625db[_0x698afe(0x9a8)]);else{const _0xacd3c=_0x698afe(0x16f)[_0x698afe(0x92f)](_0x2a8b1f[_0x698afe(0x632)]()),_0x133469=this['createInnerPortrait'](_0xacd3c,Sprite),_0x24fcd3=_0x2a8b1f[_0x698afe(0x265)]();if(_0x24fcd3!=='')_0x133469['bitmap']=ImageManager['loadPicture'](_0x24fcd3);else{if(_0x698afe(0x993)!==_0x698afe(0x59d))_0x133469[_0x698afe(0x34b)]=ImageManager['_emptyBitmap'];else return this[_0x698afe(0x881)]();}const _0x4a3dcc=this[_0x698afe(0x372)](_0x17aef9);_0x133469['anchor']['x']=0.5,_0x133469[_0x698afe(0x2f7)]['y']=0x1;let _0x8dbf83=Math[_0x698afe(0x1a5)](_0x4a3dcc['x']+_0x4a3dcc['width']/0x2)+this[_0x698afe(0x85a)];_0x8dbf83+=_0x2a8b1f[_0x698afe(0x4e0)]();let _0x56051d=Math['round'](this['height']);_0x56051d+=_0x2a8b1f[_0x698afe(0x204)](),_0x133469[_0x698afe(0xc35)](_0x8dbf83,_0x56051d);const _0x6a3514=VisuMZ['BattleCore'][_0x698afe(0x4a9)]['BattleLayout']['PortraitScale'];_0x133469['scale']['x']=_0x6a3514,_0x133469[_0x698afe(0x6e9)]['y']=_0x6a3514,_0x133469[_0x698afe(0x478)]();}}else{const _0x5338b2=this[_0x698afe(0x7a6)](_0x17aef9);this['drawActorFace'](_0x2a8b1f,_0x5338b2['x'],_0x5338b2['y'],_0x5338b2[_0x698afe(0x78f)],_0x5338b2[_0x698afe(0x96b)]);}},Window_BattleStatus[_0x1e608f(0xbe1)]['createInnerPortrait']=function(_0x13c736,_0x5af8d3){const _0x52b214=_0x1e608f,_0x466d7c=this['_additionalSprites'];if(_0x466d7c[_0x13c736])return _0x466d7c[_0x13c736];else{const _0x3ecde1=new _0x5af8d3();return _0x466d7c[_0x13c736]=_0x3ecde1,this[_0x52b214(0x718)](_0x3ecde1),this[_0x52b214(0x718)](this[_0x52b214(0x9b0)]),_0x3ecde1;}},Window_BattleStatus['prototype'][_0x1e608f(0x7b4)]=function(){const _0x39adf2=_0x1e608f;this['_createCursorArea'](),this['_createEffectsContainer'](),Window_StatusBase[_0x39adf2(0xbe1)][_0x39adf2(0x7b4)][_0x39adf2(0x2d7)](this),this[_0x39adf2(0x78a)]();},Window_BattleStatus['prototype'][_0x1e608f(0x997)]=function(){const _0x3d9408=_0x1e608f;this[_0x3d9408(0x9b0)]=new Sprite(),this['_cursorArea'][_0x3d9408(0x93b)]=[new PIXI[(_0x3d9408(0x93b))]['AlphaFilter']()],this[_0x3d9408(0x9b0)]['filterArea']=new Rectangle(),this[_0x3d9408(0x9b0)]['move'](this['_padding'],this[_0x3d9408(0xb60)]),this[_0x3d9408(0x9a5)](this[_0x3d9408(0x9b0)]);},Window_BattleStatus['prototype']['_createEffectsContainer']=function(){const _0x49a619=_0x1e608f;this[_0x49a619(0x132)]=new Sprite(),this[_0x49a619(0x9a5)](this['_effectsContainer']);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x689)]=function(){const _0xadc48e=_0x1e608f;if(this['_effectsContainer']){if(_0xadc48e(0x193)===_0xadc48e(0x193))this[_0xadc48e(0x9a5)](this[_0xadc48e(0x132)]);else{_0x2de8e4[_0xadc48e(0xce2)][_0xadc48e(0x9f2)]['call'](this,_0x503b54),this['clearBattleCoreData'](),this[_0xadc48e(0x9d6)]();const _0x26a890=this[_0xadc48e(0x8dd)]();_0x26a890&&(_0x26a890[_0xadc48e(0x811)]=_0xd8849a,_0x26a890['setBattler'](this));}}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x78a)]=function(){const _0x588f9d=_0x1e608f;this[_0x588f9d(0x67e)]=new Sprite(),this[_0x588f9d(0x9a5)](this[_0x588f9d(0x67e)]);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x9a6)]=function(){const _0x20f261=_0x1e608f;this[_0x20f261(0xce5)]=new Sprite();for(let _0x4caead=0x0;_0x4caead<0x9;_0x4caead++){_0x20f261(0x745)===_0x20f261(0x745)?this[_0x20f261(0xce5)][_0x20f261(0x9a5)](new Sprite()):this[_0x20f261(0x376)]()?this[_0x20f261(0xab2)]():_0x49cb2f[_0x20f261(0xce2)]['Scene_Battle_startPartyCommandSelection'][_0x20f261(0x2d7)](this);}this[_0x20f261(0x9b0)]['addChild'](this[_0x20f261(0xce5)]);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x4d1)]=function(){const _0x373214=_0x1e608f;Window_StatusBase['prototype']['_updateClientArea'][_0x373214(0x2d7)](this),this[_0x373214(0x647)]();},Window_BattleStatus[_0x1e608f(0xbe1)]['_updateCursorArea']=function(){const _0x34b0ff=_0x1e608f,_0x595ef8=this[_0x34b0ff(0xb60)];this[_0x34b0ff(0x9b0)][_0x34b0ff(0xc35)](_0x595ef8,_0x595ef8),this[_0x34b0ff(0x9b0)]['x']=_0x595ef8-this[_0x34b0ff(0xd7a)]['x'],this['_cursorArea']['y']=_0x595ef8-this['origin']['y'],this[_0x34b0ff(0x5b5)]>0x0&&this[_0x34b0ff(0xacd)]>0x0?this[_0x34b0ff(0x9b0)][_0x34b0ff(0x734)]=this[_0x34b0ff(0x84b)]():this[_0x34b0ff(0x9b0)][_0x34b0ff(0x734)]=![];},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xc98)]=function(){const _0xa156a2=_0x1e608f;Window_StatusBase[_0xa156a2(0xbe1)][_0xa156a2(0xc98)][_0xa156a2(0x2d7)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xbca)]=function(){const _0x242671=_0x1e608f,_0x53edc6=this[_0x242671(0x9b0)][_0x242671(0xba4)][_0x242671(0x967)](new Point(0x0,0x0)),_0x87d547=this[_0x242671(0x9b0)][_0x242671(0x5b8)];_0x87d547['x']=_0x53edc6['x']+this[_0x242671(0xd7a)]['x'],_0x87d547['y']=_0x53edc6['y']+this[_0x242671(0xd7a)]['y'],_0x87d547['width']=this['innerWidth'],_0x87d547[_0x242671(0x96b)]=this[_0x242671(0xacd)];},Window_BattleStatus['prototype'][_0x1e608f(0x4ad)]=function(_0x603e32){const _0x1dcf7b=_0x1e608f;if(this[_0x1dcf7b(0x687)]()!==_0x1dcf7b(0x3d5))return;this[_0x1dcf7b(0xd64)](_0x603e32[_0x1dcf7b(0xcb0)]());},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x80f)]=function(_0x3ce0df,_0x2a1e0f){const _0x5b4f66=_0x1e608f;if(!this[_0x5b4f66(0x67e)])return;if(!_0x3ce0df)return;if(!_0x2a1e0f)return;const _0x4f3f0b=this[_0x5b4f66(0x372)](_0x2a1e0f[_0x5b4f66(0xcb0)]());_0x4f3f0b['x']+=_0x4f3f0b['width']/0x2+this['padding'],_0x3ce0df['x']=_0x4f3f0b['x'],_0x3ce0df['y']=_0x4f3f0b['y'],this[_0x5b4f66(0x67e)][_0x5b4f66(0x9a5)](_0x3ce0df);},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x12c)]=function(_0x25207c){const _0x1f5c4f=_0x1e608f;if(!this['_damageContainer'])return;if(!_0x25207c)return;this['_damageContainer'][_0x1f5c4f(0xa5f)](_0x25207c);},Window_BattleStatus['prototype']['updateBorderStyle']=function(){const _0x1228ec=_0x1e608f;if(!this[_0x1228ec(0xc72)]())return;if(!this[_0x1228ec(0x6a4)])this[_0x1228ec(0x2e5)]();this[_0x1228ec(0xa51)](),this['updateBorderSprite']();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xc72)]=function(){const _0x312174=_0x1e608f;if(this[_0x312174(0x5c0)]!==Window_BattleStatus)return![];if(!SceneManager[_0x312174(0x5f2)]())return![];return VisuMZ['BattleCore'][_0x312174(0x4a9)]['BattleLayout'][_0x312174(0x163)];},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x2e5)]=function(){const _0x506464=_0x1e608f;this[_0x506464(0x6a4)]=new Sprite();const _0x2a673d=SceneManager[_0x506464(0x327)],_0x205e8a=_0x2a673d[_0x506464(0x76d)][_0x506464(0x8fc)](_0x2a673d[_0x506464(0xa9c)]);_0x2a673d[_0x506464(0x9a7)](this[_0x506464(0x6a4)],_0x205e8a),this['_borderPortraitSprite']['anchor']['x']=0.5,this['_borderPortraitSprite'][_0x506464(0x2f7)]['y']=0x1;const _0x514c0a=VisuMZ[_0x506464(0xce2)][_0x506464(0x4a9)]['BattleLayout']['PortraitScaleBorderStyle'];this[_0x506464(0x6a4)]['scale']['x']=_0x514c0a,this[_0x506464(0x6a4)][_0x506464(0x6e9)]['y']=_0x514c0a,this[_0x506464(0x6a4)]['y']=this['y']+this[_0x506464(0x96b)],this[_0x506464(0x794)]=0x0;},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0x3cf)]=function(){return BattleManager['isInputting']();},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xa51)]=function(){const _0x45d832=_0x1e608f;this[_0x45d832(0x6a4)][_0x45d832(0x734)]=this[_0x45d832(0x3cf)]();const _0x1d1766=BattleManager[_0x45d832(0x532)](),_0x1d77be=_0x1d1766?_0x1d1766[_0x45d832(0x265)]()||'':'';if(_0x1d1766===this[_0x45d832(0x6a4)][_0x45d832(0x532)]&&_0x1d77be===this[_0x45d832(0x6a4)][_0x45d832(0x48d)])return;this[_0x45d832(0x6a4)][_0x45d832(0x532)]=_0x1d1766||this[_0x45d832(0x6a4)][_0x45d832(0x532)],this[_0x45d832(0x6a4)][_0x45d832(0x48d)]=_0x1d77be;if(!_0x1d1766)return;else{if(_0x1d77be===''){this[_0x45d832(0x6a4)][_0x45d832(0x34b)]=ImageManager[_0x45d832(0x48c)],this['_borderPortraitSprite'][_0x45d832(0x48d)]='';return;}else{const _0x5614a1=ImageManager[_0x45d832(0x17f)](_0x1d77be);this[_0x45d832(0x6a4)][_0x45d832(0xb1b)]=0x0,_0x5614a1[_0x45d832(0x10f)](this[_0x45d832(0xb55)][_0x45d832(0xcdb)](this,_0x5614a1));}}},Window_BattleStatus[_0x1e608f(0xbe1)][_0x1e608f(0xb55)]=function(_0x28e58c){const _0x4beea7=_0x1e608f;this[_0x4beea7(0x794)]=0x14,this[_0x4beea7(0x6a4)]['bitmap']=_0x28e58c;SceneManager[_0x4beea7(0x327)][_0x4beea7(0x357)]()?(this[_0x4beea7(0x6a4)]['x']=0x0,this[_0x4beea7(0x75f)]=Math[_0x4beea7(0x958)](_0x28e58c[_0x4beea7(0x78f)]/0x2)):(this[_0x4beea7(0x6a4)]['x']=this[_0x4beea7(0x78f)],this[_0x4beea7(0x75f)]=this[_0x4beea7(0x78f)]*0x3/0x4);this[_0x4beea7(0x6a4)][_0x4beea7(0xb1b)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x4beea7(0x96b)];const _0x2651bc=BattleManager[_0x4beea7(0x532)]();if(_0x2651bc){if('VOtQL'===_0x4beea7(0x8a9))this[_0x4beea7(0x75f)]+=_0x2651bc[_0x4beea7(0x4e0)](),this[_0x4beea7(0x6a4)]['y']+=_0x2651bc[_0x4beea7(0x204)]();else{if(this[_0x4beea7(0x6ad)]===_0x4beea7(0x3a0))return!![];if(this['_targetBattlerKey']===_0x4beea7(0x18c))return!![];return _0x5dae0c[_0x4beea7(0xce2)][_0x4beea7(0x972)][_0x4beea7(0x2d7)](this);}}},Window_BattleStatus['prototype'][_0x1e608f(0x2b9)]=function(){const _0x1862f2=_0x1e608f;if(this[_0x1862f2(0x794)]>0x0){const _0xec57a1=this[_0x1862f2(0x794)],_0x1d2f4e=this[_0x1862f2(0x6a4)];_0x1d2f4e['x']=(_0x1d2f4e['x']*(_0xec57a1-0x1)+this[_0x1862f2(0x75f)])/_0xec57a1,_0x1d2f4e[_0x1862f2(0xb1b)]=(_0x1d2f4e[_0x1862f2(0xb1b)]*(_0xec57a1-0x1)+0xff)/_0xec57a1,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x1e608f(0xbe1)]['updateEffectContainers']=function(){const _0x2446df=_0x1e608f;return;if(this['_effectsContainer']){if('Nzcga'!==_0x2446df(0x6f2))this[_0x2446df(0x132)]['x']=this['x'],this[_0x2446df(0x132)]['y']=this['y'];else return!![];}if(this[_0x2446df(0x67e)]){if(_0x2446df(0x20d)===_0x2446df(0x20d))this['_damageContainer']['x']=this['x'],this['_damageContainer']['y']=this['y'];else{return;this['_effectsContainer']&&(this[_0x2446df(0x132)]['x']=this['x'],this[_0x2446df(0x132)]['y']=this['y']),this[_0x2446df(0x67e)]&&(this[_0x2446df(0x67e)]['x']=this['x'],this['_damageContainer']['y']=this['y']);}}},Window_BattleStatus['prototype'][_0x1e608f(0x789)]=function(){const _0x456de4=_0x1e608f,_0x238114=VisuMZ['BattleCore'][_0x456de4(0x4a9)][_0x456de4(0x51a)];if(_0x238114[_0x456de4(0xadf)]){const _0x5e9e88=new Sprite();_0x5e9e88[_0x456de4(0x34b)]=ImageManager[_0x456de4(0x5f3)](_0x238114['StatusWindowAttachmentBack']),_0x5e9e88['x']=_0x238114[_0x456de4(0x59b)]||0x0,_0x5e9e88['y']=_0x238114[_0x456de4(0x558)]||0x0,this[_0x456de4(0x718)](_0x5e9e88),this[_0x456de4(0x7a8)]=_0x5e9e88;}if(_0x238114[_0x456de4(0x85b)]){const _0x1f22c3=new Sprite();_0x1f22c3['bitmap']=ImageManager['loadSystem'](_0x238114['StatusWindowAttachmentFront']),_0x1f22c3['x']=_0x238114[_0x456de4(0xa05)]||0x0,_0x1f22c3['y']=_0x238114[_0x456de4(0x5eb)]||0x0,this['addChild'](_0x1f22c3),this[_0x456de4(0x8b8)]=_0x1f22c3;}},Window_BattleStatus['prototype'][_0x1e608f(0x8d2)]=function(){const _0x416c7b=_0x1e608f;if(this[_0x416c7b(0x8b8)]){if(_0x416c7b(0x268)!==_0x416c7b(0x76f))this[_0x416c7b(0x9a5)](this[_0x416c7b(0x8b8)]);else{this[_0x416c7b(0x7c6)]('dead');return;}}this[_0x416c7b(0x7a8)]&&this[_0x416c7b(0x718)](this[_0x416c7b(0x7a8)]);},Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0xb03)]=function(){const _0x5042ad=_0x1e608f;return this[_0x5042ad(0x761)]();},Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x761)]=function(){const _0xd6202e=_0x1e608f,_0x21ebf0=BattleManager[_0xd6202e(0x9cc)]();if(!_0x21ebf0)return!![];if(!_0x21ebf0[_0xd6202e(0xa0b)]())return!![];const _0x16f9f7=this[_0xd6202e(0x532)](this[_0xd6202e(0xcb0)]()),_0x215462=_0x21ebf0['item']()[_0xd6202e(0xb2d)];if(_0x21ebf0[_0xd6202e(0xb42)]()){if(_0x16f9f7===BattleManager[_0xd6202e(0x532)]())return![];}if(_0x21ebf0['isForDeadFriend']()){if(_0xd6202e(0x513)===_0xd6202e(0x513)){if(!_0x16f9f7[_0xd6202e(0xbdc)]())return![];}else{_0x56881c[_0xd6202e(0xce2)][_0xd6202e(0x807)][_0xd6202e(0x2d7)](this);if(this[_0xd6202e(0xa0b)]()[_0xd6202e(0xb2d)][_0xd6202e(0x97b)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0xd6202e(0xb2d)][_0xd6202e(0x97b)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x335c93['_commonEventQueue']=[]),_0x51ec2a[_0xd6202e(0xae4)](this[_0xd6202e(0xa0b)]())&&(_0x23c687[_0xd6202e(0x69b)]=[]);}}if(_0x21ebf0[_0xd6202e(0x218)]()){if(!_0x16f9f7[_0xd6202e(0x205)]())return![];}return!![];},Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x51c)]=function(_0x280413){this['_enemyWindowMode']=_0x280413;},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa98)]=Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x2ff)],Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x2ff)]=function(){const _0x4bdd0c=_0x1e608f;Window_BattleStatus[_0x4bdd0c(0xbe1)][_0x4bdd0c(0x2ff)]['call'](this);if(this['_enemyWindowMode'])this['processEnemyModeTouchBattleCore']();else{if(_0x4bdd0c(0xc12)===_0x4bdd0c(0xc12))VisuMZ['BattleCore']['Window_BattleActor_processTouch']['call'](this);else{let _0x14947d=_0x5c7e69['value'](_0x278e4c[_0x4bdd0c(0x29a)]);_0x2306d8[_0x4bdd0c(0xae9)]<0x0&&(_0x14947d+=_0x2d156c[_0x4bdd0c(0x799)](_0x4f0194['hpDamage'])),_0x164cc1[_0x4bdd0c(0xb83)](_0x5ed49d['VariableHeal'],_0x14947d);}}},Window_BattleActor['prototype']['processEnemyModeTouchBattleCore']=function(){const _0x12e18f=_0x1e608f,_0x271bed=SceneManager[_0x12e18f(0x327)][_0x12e18f(0x5fc)];if(!_0x271bed)return;this[_0x12e18f(0xba1)]=![];const _0x46d6f6=this[_0x12e18f(0x24c)]();if(_0x46d6f6>=0x0){this[_0x12e18f(0x184)](_0x46d6f6);if(TouchInput[_0x12e18f(0xba2)]()){const _0x1ba9b1=$gameParty[_0x12e18f(0xb81)]()[_0x46d6f6],_0x23e5cf=_0x271bed[_0x12e18f(0x374)][_0x12e18f(0x8fc)](_0x1ba9b1);if(_0x23e5cf>=0x0){if(_0x12e18f(0x7aa)!=='qlAlk')_0x271bed[_0x12e18f(0x184)](_0x23e5cf),_0x271bed[_0x12e18f(0xba3)]();else{if(_0x4bfd98[_0x12e18f(0x73b)]())return![];}}}}},Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0xa7b)]=function(){const _0x582d99=_0x1e608f;this[_0x582d99(0xa8c)]&&(_0x582d99(0xd44)!==_0x582d99(0xcae)?(this[_0x582d99(0x26e)]++,this[_0x582d99(0x197)]=!![]):(!this['_svBattlerSprite']&&(this['_svBattlerSprite']=new _0x2fbe23(_0x1d6e02),this[_0x582d99(0x694)]()),this[_0x582d99(0xc7b)][_0x582d99(0x9c8)](_0x27729c)));const _0x4490cc=Window_BattleStatus['prototype'][_0x582d99(0xa7b)]['call'](this);return this[_0x582d99(0xa8c)]&&(this[_0x582d99(0x197)]=![]),_0x4490cc;},VisuMZ['BattleCore'][_0x1e608f(0x9df)]=Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x478)],Window_BattleActor[_0x1e608f(0xbe1)]['show']=function(){const _0x218403=_0x1e608f;VisuMZ[_0x218403(0xce2)][_0x218403(0x9df)][_0x218403(0x2d7)](this);const _0x2bbb46=BattleManager[_0x218403(0x9cc)]();if(_0x2bbb46){const _0x16e2fa=$gameParty['aliveMembers']();_0x2bbb46[_0x218403(0x36f)]()&&_0x16e2fa[_0x218403(0xcaf)]>0x1&&this['setHandler'](_0x218403(0xad3),this[_0x218403(0x683)]['bind'](this));}},VisuMZ['BattleCore'][_0x1e608f(0x62c)]=Window_BattleActor[_0x1e608f(0xbe1)]['hide'],Window_BattleActor[_0x1e608f(0xbe1)][_0x1e608f(0x64e)]=function(){const _0x46d88a=_0x1e608f;VisuMZ[_0x46d88a(0xce2)][_0x46d88a(0x62c)]['call'](this),delete this[_0x46d88a(0x50c)][_0x46d88a(0x659)],delete this['_handlers'][_0x46d88a(0xad3)];},Window_BattleActor[_0x1e608f(0xbe1)]['selectAllActors']=function(){const _0x168afe=_0x1e608f,_0x3a5da7=BattleManager[_0x168afe(0x9cc)]();if(_0x3a5da7)_0x3a5da7[_0x168afe(0x3e2)](_0x168afe(0x3a0));this['processOk']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x1ec)]=Window_BattleEnemy[_0x1e608f(0xbe1)]['initialize'],Window_BattleEnemy[_0x1e608f(0xbe1)]['initialize']=function(_0x541a2c){const _0x229689=_0x1e608f;this[_0x229689(0x64b)]=null,VisuMZ[_0x229689(0xce2)][_0x229689(0x1ec)]['call'](this,_0x541a2c);if(Imported[_0x229689(0x73d)]){if(VisuMZ[_0x229689(0x6e4)]['version']<1.12){let _0xe6405c='';_0xe6405c+=_0x229689(0x140),_0xe6405c+=_0x229689(0x658),_0xe6405c+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0xe6405c),SceneManager['exit']();}}},Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x145)]=function(){const _0x34aa24=_0x1e608f;return this[_0x34aa24(0x3f4)]();},VisuMZ['BattleCore'][_0x1e608f(0xce6)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy['prototype'][_0x1e608f(0x478)]=function(){const _0x247acd=_0x1e608f;VisuMZ[_0x247acd(0xce2)][_0x247acd(0xce6)][_0x247acd(0x2d7)](this),this['y']=Graphics['height']*0xa,this[_0x247acd(0x60e)]()&&(_0x247acd(0xbfc)===_0x247acd(0xbfc)?this[_0x247acd(0x172)]():this[_0x247acd(0xb1b)]-=0x10);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xbfd)]=Window_BattleEnemy[_0x1e608f(0xbe1)]['hide'],Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x64e)]=function(){const _0x46241c=_0x1e608f;VisuMZ[_0x46241c(0xce2)][_0x46241c(0xbfd)][_0x46241c(0x2d7)](this),$gameParty[_0x46241c(0x184)](null),delete this['_handlers'][_0x46241c(0x659)],delete this[_0x46241c(0x50c)][_0x46241c(0xad3)];},Window_BattleEnemy['prototype'][_0x1e608f(0xb70)]=function(){const _0x268789=_0x1e608f;let _0x45c95e=$gameTroop[_0x268789(0x588)]();const _0x3f4a1e=BattleManager['inputtingAction']();if(_0x3f4a1e){if('hILAr'==='fsmdN'){if(!this[_0x268789(0x606)])return![];if(this[_0x268789(0x606)]['isActor']())return!![];if(this['_battler'][_0x268789(0xb69)]())return![];if(this[_0x268789(0xb1b)]<=0x0)return![];const _0x2dc73d=this[_0x268789(0x606)][_0x268789(0x366)]()[_0x268789(0xb2d)];if(_0x2dc73d['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x2dc73d[_0x268789(0x97b)](/<HIDE HP GAUGE>/i))return![];const _0x109917=_0x508671['BattleCore'][_0x268789(0x4a9)]['HpGauge'];if(_0x109917[_0x268789(0x6c3)]){if(_0x109917[_0x268789(0xc5d)]&&_0x51d9be['isBattleTest']())return!![];if(this[_0x268789(0x606)][_0x268789(0xa18)])return![];return this['_battler'][_0x268789(0xb67)]();}return!![];}else{_0x3f4a1e[_0x268789(0x36f)]()&&_0x45c95e[_0x268789(0xcaf)]>0x1&&this[_0x268789(0xb5a)](_0x268789(0x659),this[_0x268789(0x4db)][_0x268789(0xcdb)](this));if(_0x3f4a1e[_0x268789(0x74d)]()){const _0xa04768=$gameParty[_0x268789(0x588)]();_0x45c95e=_0x45c95e[_0x268789(0xbe2)](_0xa04768),_0x3f4a1e[_0x268789(0x36f)]()&&_0xa04768[_0x268789(0xcaf)]>0x1&&(_0x268789(0x946)!=='kToUd'?this[_0x268789(0x852)]():this[_0x268789(0xb5a)](_0x268789(0xad3),this[_0x268789(0x683)][_0x268789(0xcdb)](this)));}}}return _0x45c95e;},Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0xd5d)]=function(){const _0x36ff87=_0x1e608f;this['_enemies']=this[_0x36ff87(0xb70)](),this[_0x36ff87(0x6b7)](),Window_Selectable[_0x36ff87(0xbe1)][_0x36ff87(0xd5d)][_0x36ff87(0x2d7)](this);},Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x6b7)]=function(){const _0x1ebc2e=_0x1e608f;this[_0x1ebc2e(0x374)]['sort']((_0x50886f,_0x56fe65)=>{const _0x5cb341=_0x1ebc2e;if(_0x50886f[_0x5cb341(0x28c)]()!==_0x56fe65['isActor']()){if('uklWD'==='QfstE')this[_0x5cb341(0xb1b)]+=0x10;else{if(_0x50886f['isEnemy']())return-0x1;if(_0x56fe65[_0x5cb341(0xbab)]())return 0x1;}}if(_0x50886f[_0x5cb341(0x28c)]()&&_0x56fe65[_0x5cb341(0x28c)]())return _0x50886f[_0x5cb341(0xcb0)]()-_0x56fe65[_0x5cb341(0xcb0)]();if(_0x50886f[_0x5cb341(0x8dd)]()[_0x5cb341(0x8d8)]===_0x56fe65[_0x5cb341(0x8dd)]()[_0x5cb341(0x8d8)])return _0x50886f['battler']()['_baseY']-_0x56fe65['battler']()['_baseY'];else{if(_0x5cb341(0xca4)!==_0x5cb341(0xc0d))return _0x50886f['battler']()['_baseX']-_0x56fe65[_0x5cb341(0x8dd)]()[_0x5cb341(0x8d8)];else _0x4011a1[_0x5cb341(0xce2)][_0x5cb341(0xd53)](),_0x1c4888[_0x5cb341(0xce2)][_0x5cb341(0x64f)](_0x3f9d27),_0xaec364[_0x5cb341(0xce2)][_0x5cb341(0x64f)](_0x1a6c09);}});if(SceneManager[_0x1ebc2e(0xcff)]()){if(_0x1ebc2e(0x45e)!==_0x1ebc2e(0x45e)){const _0x25a834=_0x2329e8['x']+_0x308f0d[_0x1ebc2e(0x14d)]((_0x383e44[_0x1ebc2e(0x78f)]-_0x51e7ee)/0x2);this[_0x1ebc2e(0x53d)](_0x59a2ad,_0x25a834,_0x349c0e['y'],_0x5abe7b);}else this[_0x1ebc2e(0x374)][_0x1ebc2e(0x53f)]();}},Window_BattleEnemy['prototype'][_0x1e608f(0xb7d)]=function(){const _0x2bd55e=_0x1e608f,_0x219178=VisuMZ[_0x2bd55e(0xce2)][_0x2bd55e(0x4a9)]['Enemy'];_0x219178['LastSelected']?_0x2bd55e(0x7a2)!==_0x2bd55e(0x7a2)?(this[_0x2bd55e(0x98e)]=!this[_0x2bd55e(0x8f6)][_0x2bd55e(0xb69)](),!this['_appeared']&&(this[_0x2bd55e(0xb1b)]=0x0)):this[_0x2bd55e(0x1a4)]():'AphVP'===_0x2bd55e(0x6b9)?this[_0x2bd55e(0xd32)]():this[_0x2bd55e(0x13a)]();},Window_BattleEnemy[_0x1e608f(0xbe1)]['autoSelectLastSelected']=function(){const _0x5f56da=_0x1e608f,_0x39cef4=BattleManager['inputtingAction']();if(_0x39cef4&&_0x39cef4[_0x5f56da(0x74d)]()){if(_0x39cef4[_0x5f56da(0x1fc)]()){if(this[_0x5f56da(0x940)]&&this[_0x5f56da(0x374)][_0x5f56da(0xc3d)](this['_lastActor'])){const _0xc6106f=this[_0x5f56da(0x374)][_0x5f56da(0x8fc)](this[_0x5f56da(0x940)]);return this[_0x5f56da(0xd27)](_0xc6106f);}else return this[_0x5f56da(0xd32)]();}}if(this['_lastEnemy']&&this[_0x5f56da(0x374)][_0x5f56da(0xc3d)](this['_lastEnemy'])){const _0x4fa5d2=this[_0x5f56da(0x374)][_0x5f56da(0x8fc)](this['_lastEnemy']);this[_0x5f56da(0xd27)](_0x4fa5d2);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x1e608f(0xbe1)]['autoSelectPriority']=function(){const _0x3526e4=_0x1e608f,_0x4e5595=BattleManager[_0x3526e4(0x9cc)]();if(_0x4e5595&&_0x4e5595[_0x3526e4(0x74d)]()){const _0xbcf03c=$gameParty[_0x3526e4(0x588)]()[0x0];let _0x1a9820=this['_enemies'][_0x3526e4(0x8fc)](_0xbcf03c);const _0x239bde=_0x4e5595['item']()[_0x3526e4(0x250)];if(_0x239bde[_0x3526e4(0x97b)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){if(_0x3526e4(0x722)===_0x3526e4(0x722)){this['forceSelect'](_0x1a9820);return;}else _0x439b5b*=_0x48fd94[_0x3526e4(0x85c)](_0x574230[_0x3526e4(0x587)]),_0xad734f*=this[_0x3526e4(0x351)](_0x5cc7dc);}else{if(_0x239bde[_0x3526e4(0x97b)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){if(_0x3526e4(0x9d4)!=='xvbpt'){this[_0x3526e4(0xd27)](_0x1a9820-0x1);return;}else this[_0x3526e4(0x6c9)](_0x3526e4(0x380));}}}const _0x5c345f=VisuMZ[_0x3526e4(0xce2)][_0x3526e4(0x4a9)]['Enemy'];let _0x3589bb=![];if($gameSystem[_0x3526e4(0x3e6)]())_0x3526e4(0x28d)!==_0x3526e4(0x7f7)?_0x3589bb=_0x5c345f['SideviewSelect']:_0x32c1f0[_0x3526e4(0xbe1)][_0x3526e4(0x4b4)]['call'](this,_0x4743de,_0x2243ff,_0x4523dc,_0x4ce164);else{if(_0x3526e4(0x2b8)===_0x3526e4(0x2b8))_0x3589bb=_0x5c345f[_0x3526e4(0x3fb)];else return _0x30f046['aliveMembers']()[_0x3526e4(0x9f1)](_0x55014b=>_0x55014b!==_0x44038e);}this['forceSelect'](_0x3589bb?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x598)]=function(){const _0x5bdf16=_0x1e608f;Window_Selectable[_0x5bdf16(0xbe1)][_0x5bdf16(0x598)][_0x5bdf16(0x2d7)](this);if(this['enemy']()['isEnemy']())this[_0x5bdf16(0x64b)]=this['enemy']();if(this[_0x5bdf16(0x366)]()[_0x5bdf16(0x28c)]())this['_lastActor']=this[_0x5bdf16(0x366)]();},Window_BattleEnemy[_0x1e608f(0xbe1)]['select']=function(_0x102fc1){const _0x3dc670=_0x1e608f;Window_Selectable['prototype'][_0x3dc670(0x184)][_0x3dc670(0x2d7)](this,_0x102fc1),$gameTroop[_0x3dc670(0x184)](this[_0x3dc670(0x366)]()),$gameParty[_0x3dc670(0x184)](this[_0x3dc670(0x366)]());if(!this[_0x3dc670(0x366)]())return;if(this[_0x3dc670(0x60e)]()){const _0x2d9fdf=SceneManager['_scene'][_0x3dc670(0x54e)];if(this[_0x3dc670(0x366)]()[_0x3dc670(0x28c)]()){if('VjpGw'!==_0x3dc670(0x7a9)){if(this[_0x3dc670(0xbdc)]()&&this[_0x3dc670(0x1a0)]())return![];}else _0x2d9fdf[_0x3dc670(0x184)](this[_0x3dc670(0x366)]()[_0x3dc670(0xcb0)]());}else _0x2d9fdf[_0x3dc670(0x3cd)]();}},Window_BattleEnemy['prototype'][_0x1e608f(0x60e)]=function(){const _0x48fc8c=_0x1e608f;if(!this[_0x48fc8c(0x734)])return![];if($gameSystem['isSideView']())return![];const _0x121644=SceneManager[_0x48fc8c(0x327)][_0x48fc8c(0x687)](),_0x48e041=[_0x48fc8c(0x702),_0x48fc8c(0x68e),'xp',_0x48fc8c(0x3d5),_0x48fc8c(0xd11)];return _0x48e041[_0x48fc8c(0xc3d)](_0x121644);},Window_BattleEnemy['prototype'][_0x1e608f(0x172)]=function(){const _0x123f43=_0x1e608f,_0x12cd3a=SceneManager[_0x123f43(0x327)][_0x123f43(0x54e)];_0x12cd3a[_0x123f43(0x478)](),_0x12cd3a[_0x123f43(0x51c)](!![]),_0x12cd3a[_0x123f43(0xd5d)](),_0x12cd3a['deselect']();const _0x18f5f6=SceneManager['_scene'][_0x123f43(0x687)](),_0x3978bf=['xp',_0x123f43(0x3d5),_0x123f43(0xd11)];if(_0x3978bf[_0x123f43(0xc3d)](_0x18f5f6)){const _0x4dd764=SceneManager[_0x123f43(0x327)][_0x123f43(0x496)];_0x4dd764[_0x123f43(0x6e9)]['y']=0x0;}},Window_BattleEnemy[_0x1e608f(0xbe1)]['closeBattleActorWindow']=function(){const _0x439018=_0x1e608f,_0xfc26f=SceneManager['_scene'][_0x439018(0x54e)];_0xfc26f[_0x439018(0x64e)](),_0xfc26f[_0x439018(0x51c)](![]),_0xfc26f[_0x439018(0x3cd)]();const _0x16dd2e=SceneManager[_0x439018(0x327)]['_statusWindow'];_0x16dd2e['scale']['y']=0x1;},Window_BattleEnemy['prototype'][_0x1e608f(0x4db)]=function(){const _0x43182c=_0x1e608f,_0x840ad9=BattleManager[_0x43182c(0x9cc)]();if(_0x840ad9)_0x840ad9['setTargetBattlerKey'](_0x43182c(0x18c));this['processOk']();},Window_BattleEnemy[_0x1e608f(0xbe1)][_0x1e608f(0x683)]=function(){const _0x596a81=_0x1e608f,_0x21367f=BattleManager['inputtingAction']();if(_0x21367f)_0x21367f[_0x596a81(0x3e2)]('all\x20actors');this[_0x596a81(0xba3)]();},Window_BattleEnemy[_0x1e608f(0xbe1)]['isCurrentItemEnabled']=function(){const _0x5db407=_0x1e608f;return this[_0x5db407(0x761)]();},Window_BattleEnemy['prototype']['isActionSelectionValid']=function(){const _0x19f66a=_0x1e608f,_0x2ab461=BattleManager['inputtingAction']();if(!_0x2ab461)return!![];if(!_0x2ab461[_0x19f66a(0xa0b)]())return!![];const _0x197423=this[_0x19f66a(0x366)](),_0x4593e2=_0x2ab461[_0x19f66a(0xa0b)]()['note'];if(_0x2ab461[_0x19f66a(0xb42)]()){if(_0x19f66a(0x3fc)===_0x19f66a(0x6d9))_0x48530c=_0x515c7e>=_0x3888a0?_0x3a3a34:_0x2d1e28;else{if(_0x197423===BattleManager[_0x19f66a(0x532)]())return![];}}return!![];},Window_BattleItem['prototype']['includes']=function(_0x1deef9){const _0x24149d=_0x1e608f;if(!_0x1deef9)return![];return _0x1deef9['occasion']===0x0||_0x1deef9[_0x24149d(0xac8)]===0x1;};function _0x1a44(_0x246737,_0x487962){const _0x1999e0=_0x1999();return _0x1a44=function(_0x1a44f2,_0x4d9cbf){_0x1a44f2=_0x1a44f2-0x106;let _0x26bd21=_0x1999e0[_0x1a44f2];return _0x26bd21;},_0x1a44(_0x246737,_0x487962);}function Window_AutoBattleCancel(){const _0x4d9732=_0x1e608f;this[_0x4d9732(0xb89)](...arguments);}Window_AutoBattleCancel[_0x1e608f(0xbe1)]=Object['create'](Window_Base[_0x1e608f(0xbe1)]),Window_AutoBattleCancel[_0x1e608f(0xbe1)][_0x1e608f(0x5c0)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x1e608f(0xb89)]=function(_0x3a176e){const _0x5cd978=_0x1e608f;Window_Base['prototype']['initialize']['call'](this,_0x3a176e),this[_0x5cd978(0x8cd)](this[_0x5cd978(0xb71)]()),this['refresh']();},Window_AutoBattleCancel['prototype']['bgType']=function(){const _0x55a09c=_0x1e608f;return VisuMZ[_0x55a09c(0xce2)][_0x55a09c(0x4a9)][_0x55a09c(0x6b5)][_0x55a09c(0x7f2)];},Window_AutoBattleCancel[_0x1e608f(0xbe1)][_0x1e608f(0xd5d)]=function(){const _0x4f86d4=_0x1e608f;this[_0x4f86d4(0x1c9)][_0x4f86d4(0x639)]();const _0x49da26=VisuMZ[_0x4f86d4(0xce2)][_0x4f86d4(0x4a9)][_0x4f86d4(0x6b5)][_0x4f86d4(0x187)],_0x1bc9cb=_0x49da26[_0x4f86d4(0x92f)](this[_0x4f86d4(0x46c)](),this[_0x4f86d4(0x61b)]()),_0x51d1ed=this[_0x4f86d4(0xa3d)](_0x1bc9cb)[_0x4f86d4(0x78f)],_0x3bfffa=Math[_0x4f86d4(0x14d)]((this['innerWidth']-_0x51d1ed)/0x2);this[_0x4f86d4(0x53d)](_0x1bc9cb,_0x3bfffa,0x0,_0x51d1ed);},Window_AutoBattleCancel['prototype']['okButtonText']=function(){const _0x2fc7b1=_0x1e608f;return Imported[_0x2fc7b1(0x8b3)]?TextManager[_0x2fc7b1(0xcf7)]('ok'):VisuMZ[_0x2fc7b1(0xce2)]['Settings']['AutoBattle'][_0x2fc7b1(0xbed)];},Window_AutoBattleCancel[_0x1e608f(0xbe1)]['cancelButtonText']=function(){const _0x213dc6=_0x1e608f;return Imported[_0x213dc6(0x8b3)]?TextManager['getInputButtonString'](_0x213dc6(0xc6e)):VisuMZ[_0x213dc6(0xce2)][_0x213dc6(0x4a9)][_0x213dc6(0x6b5)][_0x213dc6(0x7c2)];},Window_AutoBattleCancel['prototype'][_0x1e608f(0x593)]=function(){const _0x2fc9aa=_0x1e608f;Window_Base[_0x2fc9aa(0xbe1)][_0x2fc9aa(0x593)][_0x2fc9aa(0x2d7)](this),this[_0x2fc9aa(0x7e5)](),this[_0x2fc9aa(0xd50)]();},Window_AutoBattleCancel[_0x1e608f(0xbe1)]['updateVisibility']=function(){const _0x5cd238=_0x1e608f;this[_0x5cd238(0x734)]=BattleManager[_0x5cd238(0xb82)];},Window_AutoBattleCancel[_0x1e608f(0xbe1)][_0x1e608f(0xd50)]=function(){const _0x30cf0c=_0x1e608f;if(!BattleManager['_autoBattle'])return;(Input[_0x30cf0c(0x616)]('ok')||Input[_0x30cf0c(0x616)](_0x30cf0c(0xc6e))||TouchInput[_0x30cf0c(0xba2)]()||TouchInput['isCancelled']())&&(SoundManager[_0x30cf0c(0x2fa)](),BattleManager[_0x30cf0c(0xb82)]=![],Input['clear'](),TouchInput['clear']());};function Window_EnemyName(){const _0x3d47ae=_0x1e608f;this[_0x3d47ae(0xb89)](...arguments);}function _0x1999(){const _0x88f141=['DPyRW','revertTpbCachedActor','closeBattleActorWindow','Game_Interpreter_updateWaitMode','BattleCore','Game_Action_makeDamageValueDisperse','waitForAnimation','_cursorSprite','Window_BattleEnemy_show','ifakH','ActSeq_Mechanics_StbExploit','_battlerContainer','createSeparateDamagePopups','sleep','setupDamagePopup','Utwwd','ActSeq_Animation_BalloonIcon','_back2Sprite','applyArmorModifiers','qCRgt','WIbpQ','moveBattlerHomeDistance','PreApply%1JS','Window_BattleStatus_drawItemImage','chant','getInputButtonString','startHomeMove','ojlTY','maxBattleMembers','ALL\x20SKILLS','Jhucp','CastMagical','pop','isBattleFlipped','PostApply%1JS','frameCount','Spriteset_Battle_update','shadow','isMagicSkill','find','AutoNotetag','Opacity','WaitForSkew','Window_BattleLog_performCounter','lWnxC','Sprite_Actor_setActorHome','performActionMotions','BattleManager_startBattle','xYRZk','updateUiContainerPosition','CClNy','border','clearBattleCoreData','commandNameWindowDrawText','updateShadowVisibility','useItem','COBWEB','regenerateAllBattleCore','isMeleeSingleTargetAction','LIGHT-BULB','dCHDJ','isNextSceneBattleTransitionable','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','ActSeq_Mechanics_ActiveChainInputDisable','aTGnk','VyiZy','State-%1-%2','Sprite_Battler_setHome','STR','Scene_Battle_startActorCommandSelection','addCombatLogCommand','battleEffect','_commonEventIDs','forceSelect','applyData','terminate','isForRandom','playEnemyAttack','TextColor','NbDtd','ButtonAssist','isBypassDamageCap','callNextMethod','playEnemyDamage','autoSelectPriority','xReXY','_floatWholeDuration','Cmghs','casting','TpGaugeOffsetY','esHdw','BattleVictoryJS','BXrjW','isBattleMember','isStatusAffected','actorCommandAutoBattle','_lineHeight','dMsql','mainFontSize','freezeTime','_dimmerSprite','log','OmNHz','forceWeaponAnimation','SwitchMissEvade','Sprite_Battler_update','cboEa','startSkew','owyYm','DestinationJS','eWLJc','_preBattleCommonEvent','power','ActSeq_ChangeSkew','updateCancel','ActSeq_Mechanics_AddBuffDebuff','_executedValue','CreateCommonEventKeys','expRate','ActSeq_Animation_BalloonIconRange','alignBattleCoreDamageSprite','itemHit','addedBuffs','QDlBe','getColor','finishActionSet','Window_ItemList_maxCols','refresh','invokeAction','AutoBattleRect','GZvQx','Window_BattleLog_performDamage','startMove','ConvertActionSequenceTarget','drawItemImagePortraitStyle','hAevD','adjustWeaponSpriteOffset','gainTp','alterCost','uiMenuStyle','clearResult','shouldDisperseDamage','tbAbi','textWidth','collapse','reserveCommonEvent','gradientFillRect','Window_PartyCommand_initialize','Game_Battler_clearDamagePopup','createPartyCommandWindowBattleCore','setupShockwaveImpactFilter','caTFP','IYKxt','yfZTf','gYqWB','Game_BattlerBase_die','origin','buffRemove','MaxLines','disarmLifeSteal','getDefeatedEnemies','setActionState','updatePointAnimations','canMove','MVoOy','Window_Options_addGeneralOptions','MotionType','YYWcR','refreshRequest','damageRate','Sprite_Actor_initMembers','KzdLw','PreDamage%1JS','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','Sprite_Actor_updateBitmap','wfFcF','lZccJ','createPartyCommandWindow','ActSeq_Mechanics_DeathBreak','BG_TYPE','PreEndActionJS','NdaPv','addLoadListener','wNdNI','_defeatedEnemies','iixaO','_injectAnimationSprite','Game_Battler_performEvasion','iconHeight','Window_BattleLog_performAction','currentValue','surprise','MUSIC-NOTE','All\x20Allies','hzvZy','skewBattler','setupMotionBlurImpactFilter','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','CheckVisibleSwitchNotetags','VisuMZ_3_WeaknessDisplay','_forActor','updateFlip','sePWd','RNztC','isGuardLifeSteal','_targetGrowX','max','yRKzj','getTraitSetKeys','hpDamageFmt','checkShowHideBattleNotetags','removeDamageSprite','shouldHideBattleEndPopups','HNIHt','setupCriticalEffect','SAeqi','updateShadowBattleCore','_effectsContainer','_opacityWholeDuration','WaitForOpacity','isCharging','PostDamageAsTargetJS','iQYIb','Actions','Users','addBattleGridMoveCommand','attackTimesAdd','vIYFZ','jKnjS','onSelectAction','cqxXr','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','mzCTi','launchBattle','addWindow','processDefeat','maxCols','XjImE','getChildIndex','ScaleToFit','drawEnemyName','MAhlF','Window_ActorCommand_initialize','setupHpGaugeSprite','floor','ParseItemNotetags','VisuMZ_3_VisualCutinEffect','DistanceAdjust','ActionSequence','isAnyoneChangingOpacity','mmp','PostStartTurnJS','cmOwb','requestAnimation','MotionSpeed','cancelActorInput','HelpFight','HpGaugeOffsetX','weaponTypes','hSLRW','ActSeq_Cutin_WaitForExit','addCommand','setupBattlebackBattleCore','onEscapeSuccess','requestFauxAnimation','alphabetic','ShowPortraitsBorderStyle','commandRemember','setImmortal','AttachStateOffsetX','ActSeq_Impact_Oversaturate','_angleDuration','BattleManager_makeActionOrders','ActSeq_Movement_HomeMoveBy','RevertAngle','attack','removeAnimationFromContainer','getBattlerKeyTargetReplacement','actor%1-portrait','_enemyId','_baseY','openBattleActorWindow','izedr','gainFullActionsPTB','inHomePosition','hhgEs','KuWoP','CombatLogIcon','Scene_Battle_helpWindowRect','updateShadowPosition','BattleManager_onEscapeSuccess','LGKoS','preparePartyRefresh','Game_Battler_forceAction','loadPicture','eBuFY','mxBpM','floatBattler','UvVoN','select','ActSeq_Animation_CastAnimation','arRedFlat','AutoBattleMsg','mainSprite','addedStateObjects','_weaponImageId','dead\x20enemies','all\x20enemies','FaceDirection','Window_BattleLog_performActionStart','EjDdQ','updateRefresh','splice','findTargetSprite','JEIIT','NcMWp','ChdJx','Post','active','YgJAh','battleInjectAni','dHecA','eraseState','createCommandNameWindow','_showWeapon','drawBackgroundRect','BIDcv','allowCollapse','jsOneForOne','ActSeq_Horror_TVRemove','updateOpacity','autoSelectLastSelected','round','ActSeq_Animation_AttackAnimation','_targetIndex','TpbGaugeOffsetY','aRVtf','playOnceParallelInterpreter','battleOpacity','createMultiTargetWindow','extraPositionX','hEpxm','ActionStart','DngUQ','tAKlW','_animationContainer','changeWeather','Game_BattlerBase_meetsUsableItemConditions','process_VisuMZ_BattleCore_TraitObject_Notetags','EnableDamageCap','portraitType','XGeMr','ApplyImmortal','drawItemImageListStyle','CastPhysical','_phase','setBattlerBattleCore','updateShadow','Game_Map_setupBattleback','HelpAutoBattle','ActSeq_Horror_Clear','ActSeq_Cutin_AddVisualCutinEffect','Pwjqg','PostEndBattleJS','playOnceParallelTroopPage','value','VisuMZ_3_BattleVoices','cancelTargetSelectionVisibility','contents','MUSIC','drawSingleSkillCost','_stateIconSprite','retrieveBattleBalloon','CommandVisible','_itemWindow','StatusWindowSkinFilename','createBattleUIOffsetX','Formula','ConfigManager_applyData','requestPointAnimation','drawItemImage','clearFreezeMotionForWeapons','createActors','DMXpa','singleSkill','target','WaitForScale','applyResultSwitches','%1Damage%2JS','CurrentTurn','ArPenFlat','_targetHomeY','glitch','contains','performJump','getDualWieldTimes','UQMVO','setBattleSkew','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','JS\x20%1START\x20BATTLE','setHue','OverallFormulaJS','createKeyJS','Window_BattleEnemy_initialize','zcVRR','movement','SLEEP','getNextDamagePopup','partyCommandWindowRect','updateSkew','Sprite_Battler_updatePosition','battleVoices','ActorOffsetY','SNTJB','BattleManager_processAbort','xnsld','shgCK','updateActors','Scene_Options_maxCommands','isForAnyoneFocusFriends','basicGaugesY','displayCritical','DPEIg','WKQOK','LUK','iconWidth','CriticalHitRate','getBattlePortraitOffsetY','isAlive','makeActionOrders','ActSeq_Mechanics_CtbSpeed','JS\x20%1END\x20BATTLE','skillItemWindowRectBorderStyle','FlashColor','addExtendedTroopMembers','Window_BattleLog_performMagicEvasion','jIXCA','isIncludedInEnemyWindow','Window_BattleLog_displayTpDamage','HelpSkillType','lifeStealTrait','hpRate','battlerShadowScaleX','Game_Action_isForRandom','SvBattlerSolo-%1-%2','Game_Temp_requestAnimation','PostEndActionJS','isForAliveFriend','gbnVt','WaitForSpin','setBalloonPose','ActSeq_Mechanics_OnceParallel','ActSeq_Mechanics_StateTurnsChangeBy','custom','Parse_Notetags_TraitObjects','mUXSb','yGsTV','_damages','PtwKT','removeCurrentAction','rzabl','setHelpWindowItem','updateShakeFlinch','waitForJump','XDlTm','xcWxm','Scale','alive\x20enemies\x20not\x20target','NtWIs','dWaOP','gainMp','loadBitmap','makeActions','PreEndBattleJS','DFdWz','updatePosition','FocusY','displayType','performAttack','EkGtv','nDmHe','loVil','ActSeq_Mechanics_AnalyzeWeakness','PVvXD','NameOffsetX','setupBlueRedInvertImpactFilter','setFrame','BattleManager_endBattle','ActSeq_Animation_AttackAnimation2','repeatTargets','ShowPortraits','OjYaf','EkShp','clearWeaponAnimation','sideview_ui','calcWindowHeight','LIppK','createActorCommandWindow','ActSeq_Mechanics_StateTurnsChangeTo','hitIndex','code','_executeHpDamage','processForcedAction','scope','ZxFfn','stepFlinch','addedDebuffs','isBTB','Enable','_battleCoreBattleStartEvent','oxZrd','clearDamagePopup','NameLegacy','processEscape','DisablePartyCmd','missle','updateAction','ScaleUp','updateBattlerContainer','\x20to\x20%1\x20midbattle.','_speed','_armorPenetration','SkillsStatesCore','NonZc','getBattlePortraitFilename','ActSeq_Movement_Jump','_back1Sprite','ngCcb','createWeather','ShakeFlinchPower','ActSeq_Impact_ColorBreak','vtlfw','Game_System_initialize','_animationCount','PreStartTurnJS','pause','windowAreaHeight','FwWyC','ActSeq_Horror_NoiseCreate','pointX','ActSeq_Impact_ZoomBlurTargetCenter','oOyLT','_canLose','startActorCommandSelection','MeleeDistance','top','ActSeq_BattleLog_WaitForNewLine','vLqtl','commandOptions','Pre','GRID\x20MOVE','DyRtA','isSkillItemWindowsMiddle','onDatabaseLoaded','ActSeq_Animation_ItemAnimation','Setting','_baseLineStack','VisuMZ_3_BoostAction','USER-DEFINED\x203','clearOnceParallelInterpreters','isAnyoneJumping','setTroopPage','SEUny','isActor','QjQNH','Balloon','ymSTk','Game_Action_isForOne','Scene_Battle_commandEscape','WaitForEffect','Window_BattleLog_performSubstitute','pha','svActorHorzCells','duration','tYaNk','EnemyOffsetX','putActiveBattlerOnTop','VariableHeal','tSDod','isForFriendBattleCore','targetActionSet','autoBattleAtStart','ResetFocus','isLearnedSkill','BWcxa','isBattleSys','WaitCount1','abWnH','createDigits','drawTextTopAligned','_tempBattler','onActorCancel','trim','alive\x20friends\x20not\x20user','VarianceFormulaJS','processPostBattleCommonEvents','backColor','DefeatEvent','rzJLy','_wtypeIDs','WfNmA','drawLineText','SmoothImage','adjustPosition_ScaleDown','MAUBT','NlxIy','Window_BattleLog_performCollapse','NZGYT','updateBorderSprite','ayVie','StartName','isTickBased','PopupShiftX','ActSeq_Movement_MoveBy','dead','guardMpLifeSteal','checkExtendTroopCompatibility','OffsetY','ActSeq_Cutin_EndVisualCutinEffectAll','updateStyleOpacity','_activeWeaponSlot','cLZUd','_angleRevertOnFinish','ClearBattleLog','actionSplicePoint','setupTextPopup','zjtgq','IconStypeNorm','Game_Action_setGuard','_endingBattle','isAnimationPlaying','criticalDmgFlat','addBuff','StateIconOffsetX','command301_PreBattleEvent','actorCommandSingleSkill','AGI','setBattleAngle','call','right','Armor-%1-%2','LeRqQ','Damage','SVbRf','contentsOpacity','PopupShiftY','_statusType','CheckVisibleBattleNotetags','command119','PreEndTurnJS','SGyMP','isGrowing','createBorderStylePortraitSprite','addShowHpGaugeCommand','ActSeq_Movement_MoveToTarget','Skill-%1-%2','ActSeq_Mechanics_PtbAlterCost','WGQrr','QHreG','alterActionCostPTB','svBattlerName','_skillWindow','LQUYM','hue','JlLOj','needsSelectionBattleCore','SxSog','critical','_lastPluginCommandInterpreter','updateTargetPosition','anchor','createEnemyNameContainer','CVTja','playCancel','nzkqc','fXfkj','addSingleSkillCommand','pauseInjectAnimation','processTouch','canUseItemCommand','BattleLogRectJS','isCustomBattleScope','ParseAllNotetags','createStateIconSprite','%1-%2','setHalfActionsPTB','ActSeq_Movement_MoveToJsPoint','battleSpriteSkew','clone','Game_Troop_expTotal','\x5cI[%1]%2','Scene_Battle_onEnemyCancel','WhpTe','setupRgbSplitImpactFilter','setVisibleUI','skillTypes','pJmEY','DistanceY','setCustomDamageFormula','BattleManager_startAction','XcLDf','requestRefresh','makeUniqueNames','NYTlJ','sYfjW','isDrain','lastBattleSkill','gainHalfActionsPTB','adjustPosition_1for1','%1StartActionJS','fQjba','requestBattleBalloon','Sprite_Enemy_updateCollapse','_stypeIDs','ActSeq_Mechanics_BreakShieldReset','isPlaytest','createString','_commandNameWindow','_scene','_dragonbonesSpriteContainer','isPartyTpbInputtable','clearFreezeMotion','ActSeq_Impact_BlueRedInvert','battlerSprites','autoBattleStart','WQXWS','CriticalHitFlat','QlbLy','setSTBExploited','ActSeq_Camera_FocusPoint','checkSubstitute','_drawTextOutline','itemTextAlign','FJNtL','Window_Options_statusText','startEnemySelection','XzxWW','ActSeq_Camera_Reset','YOTnd','fight','updateCommandNameWindow','updateShadowScale','AS\x20USER','Name','Strength','Game_Battler_onBattleStart','SkewY','processBattleCoreJS','createCancelButton','makeDeepCopy','Defeat','svAnchorY','canEscape','canGuard','bitmap','getSpecificBattlerKeyTarget','aKFXh','clearTargetBattlerKey','Window_BattleLog_popBaseLine','isPhysical','lukEffectRate','ChangeOrderBy','ActionCount','XQRxj','SceneManager_push','addCustomCommands','isRightInputMode','ActSeq_Motion_WaitMotionFrame','iconIndex','_frame','TNRHq','undecided','_skewDuration','updateStart','evade','NameOffsetY','EnableSoftCap','rFkne','startJump','BattleManager_processVictory','Game_Action_isForAliveFriend','enemy','ActSeq_Movement_FaceTarget','removeChildFromUiContainer','isFlipped','gVJRe','resizeWindowBorderStyle','refreshMotion','_forcedBattleLayout','Kxpfd','canSingleOrMultipleSelect','endBattle','applyHardDamageCap','itemRect','DEF','_enemies','PMxdB','isPartyCommandWindowDisabled','toLowerCase','registerDefeatedEnemy','AqIte','onEncounter','_homeY','isOptionsCommandEnabled','_opacityDuration','Pzlue','version','wait','waitForEffect','startTpbTurn','FYxHZ','CalcEscapeRatioJS','arPenRate','lifeStealRate','drawItem','_targetSkewX','onBattleStartOnceParallels','Text','gAAax','_tpbSceneChangeCacheActor','TfeOz','_growWholeDuration','TP_Rate','mvJhQ','Game_Actor_makeActionList','isForDeadFriend','startBattle','ItemID','ActSeq_Mechanics_AddState','MP_Rate','bOCgF','AQrYY','isAnyoneFloating','ChKyP','OWyzl','Game_BattlerBase_initMembers','Duration','STRUCT','visualCutinPortraitFilename','all\x20actors','LhpnD','isActiveTpb','onSkewEnd','silentHomeMove','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','updateBattlebackBitmap','isFloating','processAbort','clearActiveWeaponSet','dAMwQ','tYyRX','IconIndex','_buttonKey','VisuMZ_4_BreakShields','Window_BattleLog_performMiss','CalcEscapeRaiseJS','updateOnceParallelInterpreters','createBattleFieldBattleCore','Game_Battler_clearMotion','hFgAY','mainSpriteScaleX','AnchorX','Shadow2','Scene_Battle_createActorCommandWindow','_baseTexture','extendTroopMembers','WIoNm','sQTIM','HOPLm','_lastAction','ZWgnY','setBattlerFacePoint','battleBalloon','ActSeq_DB_DragonbonesTimeScale','stopInjectAnimation','IKOBA','HEART','endIcon','wgfpX','evaded','Mechanics','xLxRv','regionId','BaseTroopIDs','deselect','flipVisualCutinHorz','isBorderPortraitSpriteVisible','QTgCH','not\x20focus','Game_BattlerBase_canAttack','isAtbCastingState','PBlgF','portrait','aepiS','_pattern','createMainSprite','meetsUsableItemConditions','_floatDuration','getAttackWeaponAnimationId','maxTp','dJQGV','removeStatesAuto','ShowCritical','_multipliers','vgQVM','setTargetBattlerKey','drawItemStyleIconText','LVIvv','bXuUn','isSideView','jumpBattler','isDisplayEmergedEnemies','okTargetSelectionVisibility','exit','Window_BattleLog_displayCritical','negativeLifeSteal','spinBattler','updateMotionCount','VisuMZ_1_SkillsStatesCore','_actorMultiTargetWindow','createJS','Scene_Battle_createEnemyWindow','YsiZN','maxItems','hasRZ','animationWait','svAnchorX','Sprite_AnimationMV_updatePosition','FRUSTRATION','SlotID','FrontViewSelect','qlrYM','eAPRp','changeAtbCastTime','moveBattlerHomeToPoint','vUuYi','TqjSb','performWeaponAnimation','JS\x20%1START\x20TURN','collapseType','BravePoints','friendsUnit','battleJump','PartyCmd','BattleLog','ActSeq_Mechanics_StbExtraAction','onTurnEnd','Amp','GUARD','addChildToUiContainer','createAllWindows','setBattlerMotionTrailData','Sprite_Actor_updateShadow','drawItemStyleIcon','isAnyoneInjectAniPrepping','JsJLz','makeData','hitType','removeHorrorEffect','setHorrorEffectSettings','process_VisuMZ_BattleCore_CreateRegExp','jsScaleUp','ext','Sprite_Gauge_smoothness','Scene_Map_initializeAfter','LZXjA','JS\x20ESCAPE\x20FAILURE','hAhVi','gainBravePoints','fontSize','onAllActionsEnd','sEQcy','initVisibility','Scene_Battle_stop','isFrameVisible','CommandWidth','setup','StartTurnShow','ActSeq_Zoom_Scale','arRedRate','JS\x20%1DAMAGE\x20%2','svBattlerData','BattleManager_startInput','Sprite_Enemy_update','Radius','MAXMP','Game_Battler_regenerateAll','svActor','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','ActSeq_Horror_GlitchRemove','mwgsw','Shadow','bitmapHeight','focus','displayBuffs','createMultiTargetWindows','softDamageCap','isCertainHit','command283','tEwMJ','DamageRate','aKbVj','speed','FlinchDuration','ActSeq_Animation_ChangeBattlePortrait','ActSeq_Movement_FaceJsPoint','_immortal','bottom','qYRcj','magicSkills','isDeathStateAffected','updateSpin','resizeWindowXPStyle','frontview_ui','Game_Battler_onTurnEnd','Game_BattlerBase_addNewState','battleCoreResumeLaunchBattle','updateBorderStyle','PbAXE','IluOe','_targetHomeX','ActSeq_Mechanics_BoostPointsChange','rXOEO','disperseDamage','WCDlq','ConfigManager_makeData','HomePosJS','ForceRandom','gainCurrentActionsETB','XAUws','isCTB','setText','updateBitmap','displayChangedStates','forceAction','flashDuration','liAoN','zzQEy','TP_Flat','isOnCurrentMap','addPartyCommand','head','wugFd','okButtonText','process_VisuMZ_BattleCore_Action_Notetags','itemLifeStealRate','IaUbo','isForOne','VisuMZ_1_ElementStatusCore','drawItemStatus','VisuMZ_2_HorrorEffects','_cacheTextWidth','OLoqF','_enemyIDs','MdVdp','show','%1StartTurnJS','PZwMC','PrioritySortActive','ConvertParams','pecbm','Scene_Battle_start','VisuMZ_2_BattleSystemCTB','_drawTextBody','XGUsR','_helpWindow','hNZRC','Sprite_Animation_targetSpritePosition','formula','addGeneralOptions','_targetOffsetX','applyBattleCoreJS','dPXWh','_homeEasing','BindCommonEventKeysForObj','_emptyBitmap','lastFilename','invokeMagicReflection','ANTI_TINT_UI','ActSeq_Mechanics_OtbOrder','inputting','wholeActionSet','jPwZD','isForOpponentBattleCore','battleCommandIcon','_statusWindow','weaponImageId','clearBattleBalloons','Game_Action_itemTargetCandidates','_svBattlerData','Game_Interpreter_terminate','EndBattlePopups','_actions','canAttackBattleCore','selectNextCommand','SkillItemBorderCols','OffsetAdjust','jGPKc','pZhOA','VpVIj','Game_Temp_requestBalloon','displayReflection','lineHeight','IconSet','Settings','swapEnemyIDs','addOnceParallelInterpreter','enemyNames','refreshActorPortrait','IQcTV','skew','HalfActions','_spriteset','_enemySprites','equips','drawSkillCost','Window_BattleStatus_initialize','ALL_ACTORS','updateJump','isBreakStunned','Game_Action_evalDamageFormula','changeCtbChargeTime','forceEscapeSprite','Sprite_Actor_createStateSprite','_shake','Game_Action_itemHit','addMeleeReturnActionSet','fHNSw','switchToWeaponType','vPlJL','performMoveToPoint','HVsJS','applySoftDamageCap','Scene_Battle_itemWindowRect','join','_motion','applyImmortal','AkKkh','Sprite_Weapon_loadBitmap','ShowButton','_forcedBattlers','+%1','AsUser','ShowAddedState','_updateClientArea','isAlwaysVisible','mainSpriteHeight','UStyQ','isAlwaysHidden','kmzRy','_onceParallelInterpreters','statusWindowRect','itemEffectGainTp','addGuardCommand','selectAllEnemies','KZzrf','ParseEnemyNotetags','ActorCmd','OffsetX','getBattlePortraitOffsetX','hidden','evalDamageFormulaBattleCore','process_VisuMZ_BattleCore_CommonEventKeys','PUBcH','updateBattleProcess','makeTargetSelectionMoreVisible','createHpGaugeSprite','refreshCursor','command357','die','LifeStealRegExp','jsScaleDown','MaOIv','ovYll','cYGae','setBattleZoom','deactivate','edLdU','isSkipPartyCommandWindow','hQCxQ','MpGaugeOffsetY','performActionEndMembers','ActSeq_Element_ForceElements','battlerSmoothImage','MYFiA','alive\x20actors\x20not\x20target','bVIQE','TIFrF','isForAliveFriendBattleCore','mTcLM','initMembersBattleCore','textColor','updatePhase','PhIqU','createEnemies','walk','Scene_Battle_onActorCancel','ActSeq_Weapon_NextActiveWeapon','startInput','ActSeq_Movement_FaceDirection','currentAction','deTOD','VisuMZ_1_MainMenuCore','_handlers','Targets2','VQMZk','Scene_Battle_skillWindowRect','eLkxT','IconStypeMagic','type','YDVBT','DamageType%1','qQrfF','UvHmg','lTEVo','selectedBattlers','_actorCommandWindow','BattleLayout','commandFight','setEnemyWindowMode','numRepeats','TrZqh','description','WtypeId','createTargetsJS','2768OrbqaW','nXayi','XAREU','compareBattlerSprites','onBattleEnd','text\x20target','isAutoBattleCommandAdded','sAEPf','hDhBp','Override','Window_BattleLog_popupDamage','displayEvasion','adRnI','CounterPlayback','getDamageStyle','ygtlk','actor','stepForward','_tempEquipCheck','Turns','Scene_Boot_onDatabaseLoaded','UXgaS','registerCommand','DistanceX','qkHPV','HAajj','ParseStateNotetags','drawTextEx','commandNameWindowCenter','reverse','time','drawItemStatusListStyle','parallaxScrollXinvertEnemy','ShowAddedDebuff','PerformAction','attackAnimationId2','CbHqC','ActionSkillMsg1','ActSeq_Movement_WaitForOpacity','CheckActSeqProjectileVersion','dying','updateStateSprite','parameters','isSkewing','_actorWindow','disarmHpLifeSteal','opacityStart','Spriteset_Battle_createLowerLayer','_battleField','battleSpin','HzKFe','DYPiK','applyEasing','changeBattlebacks','StatusWindowAttachmentBackOffsetY','portraitHue','JFbsw','attackAnimationIdSlot','moveToStartPositionBattleCore','displayBattleCoreTransitionErrorMsg','isOpponent','isSceneChanging','_jumpDuration','ACTOR_OFFSET_X','isTurnBased','NVEVu','DkOng','_homeX','isBattlerGrounded','updateCallMenu','SFJRS','remove','cameraDuration','statusWindowRectBorderStyle','parallaxScrollY','regenerateAll','deathStateId','stepBack','Wave','loadBattleback1','setBattleCameraTargets','_skewWholeDuration','_shadowSprite','battleSkew','centerFrontViewSprite','freezeFrame','hasStaticSvBattler','hardDamageCap','Zmsvh','isMoving','PopupOffsetY','ActSeq_Mechanics_EnemyEscape','tLkbx','ActSeq_Movement_HomeReset','_endBattle','Window_BattleLog_displayCurrentState','zmgzW','updateHpGaugePosition','toUseBoostPoints','BattleDefeatJS','AllowCollapse','dataId','aliveMembers','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','uPnLR','ICMOC','criticalHitFlat','Window_BattleLog_refresh','KCAOo','setBattleCameraPoint','setItem','SWEAT','createAnimationSprite','update','battleCamera','Window_BattleLog_performEvasion','Scene_Battle_startPartyCommandSelection','nZAQQ','callOkHandler','CreateActionSequenceTargets','_index','StatusWindowAttachmentBackOffsetX','zWHMo','xJCWq','ActSeq_Mechanics_StbRemoveExcessActions','pIzke','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','PreRegenerateJS','BqEqh','mhp','IPzIU','ENEMY_OFFSET_Y','345079iCtDrS','initMembers','MDF','isBattleCoreTargetScope','escape','USER-DEFINED\x202','performReflection','updateFrame','ATK','checkSceneBattleTransitionable','VXboD','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','result','startTurn','KPcjU','innerWidth','Targets1','WaitForAngle','filterArea','processBattleBalloonRequests','_actionBattlers','addDebuff','ShowHpDmg','_stateSprite','CopyCombatLog','isDying','constructor','PreStartActionJS','createBattleUIOffsetY','setLastPluginCommandInterpreter','_indent','rurIF','tiXZQ','isGuard','removedStateObjects','Window_BattleLog_displayActionResults','currentSymbol','makeActionListAutoAttack','BattleManager_onEscapeFailure','smoothness','anikf','setSkill','battleAngle','updateEffectContainers','showHelpWindow','finalizeScale','Scene_Map_initialize','Scene_Battle_update','isAppeared','sRZnk','LastSelected','FbgaE','_targetOffsetY','ActSeq_Inject_AnimationPauseResume','furBZ','_autoBattleWindow','lTVzU','isFriendly','FlinchDistanceY','ActSeq_Impact_MotionTrailCreate','bYOVj','_enemyID','replace','ActSeq_Mechanics_AtbGauge','ShowSubstitute','BLHnZ','removeOnceParallelInterpreter','ieauG','WaitForProjectile','StatusWindowAttachmentFrontOffsetY','POST-','rIDbb','ActSeq_Mechanics_EmulateAttackEffect','TCnSs','_offsetY','LIGHT\x20BULB','isSceneBattle','loadSystem','onAngleEnd','parseForcedGameTroopSettingsBattleCore','displayMpDamage','NOTE','checkBattleEnd','VariableID','Sprite_Enemy_initVisibility','guardHpLifeSteal','_enemyWindow','_enemyNameContainer','StyleOFF','performFlinch','CommandAddOptions','isSpriteVS8dir','effect','CheckSkillCommandShowSwitches','ActSeq_Mechanics_BoostPointsStoreData','command236','_battler','ParseWeaponNotetags','getCommonEventIdWithName','xdWVT','ActSeq_BattleLog_DisplayAction','attackSkillId','isCommandEnabled','moveBattlerToPoint','meetsSelectFrontviewActorConditions','isImmortal','updateBattleBalloons','turnOrderChangeOTB','FaceAway','animationShouldMirror','createDamageSprite','ubUMC','isTriggered','TimeScale','nRzaa','dVHYJ','ZsoRd','cancelButtonText','VtZpp','isForAnyoneFocusOpponents','WaitForExit','displayTpDamage','BattleManager_initMembers','setupFont','VisuMZ_2_BattleSystemFTB','_motionCount','center','checkShowHideSkillNotetags','battleback1Name','XPSpriteYLocation','Game_BattlerBase_isStateResist','checkCacheKey','unchanged','USER-DEFINED\x204','Window_BattleActor_hide','isValid','_flipScaleX','EXfGt','tBqnh','popupDamage','actorId','SILENCE','paySkillCost','ChargeRate','ActSeqProjectiles','extraPositionScaledY','NsfQb','clear','Frame','ZybOz','lXOyX','setHome','SyncBuffExpire','ScaleDown','JRjpI','command3011','CDsQh','isTpb','message4','findSymbolExt','tkBQo','_updateCursorArea','jxBrz','startGrow','Slot','_lastEnemy','Sprite_SvEnemy','nameY','hide','BindCommonEventKeysForGroup','GuardFormulaJS','VisualCutinEffect','ActSeq_Mechanics_PtbFullHalfAction','setupZoomBlurImpactFilter','<CENTER>%1','TPB','WttuE','battleMove','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','pageup','isAttack','_partyCommandWindow','command339','alterPriority','AddOption','removeBattleBalloon','initBattlePortrait','SVHbC','Enemy','iterateBattler','Scene_Battle_startEnemySelection','applyGuard','battleDisplayText','SvMotionIdleMass-%1-%2','spell','value2','wdakR','extraHeight','BattleSystemBTB','_offsetX','CheckMapBattleEventValid','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','ChantStyle','startPartyCommandSelection','DefaultHardCap','_attackAnimationId','spriteId','_battleLayoutStyle','STB','setActorHome','tpbCommandFight','ActSeq_Impact_MotionBlurTarget','ActSeq_Mechanics_Collapse','itemEffectAddAttackState','MBfBc','mAkjV','_damageContainer','canInput','BattlebackScale','IETPw','emerge','selectAllActors','noSimilarSTypes','autoBattle','message1','battleLayoutStyle','GfDRE','updateEffectsContainer','Scene_Battle_selectPreviousCommand','getLastPluginCommandInterpreter','_targetGrowY','iInKM','list','WIDTH','EmergeText','Actor-%1-%2','Scene_Map_launchBattle','isBattlerFlipped','attachSpritesToDistortionSprite','performAction','iOaUx','_angleWholeDuration','getSkillTypes','isCustomActionSequence','FwDrY','_commonEventQueue','AllowRandomSpeed','isPlaying','changePaintOpacity','oPCni','LvACS','LDlTy','_regionBattleback2','wMVEE','_borderPortraitSprite','UqBFl','reduce','_battleCoreBattleResumeAfter','ActSeq_Skew_WaitForSkew','ActSeq_Impact_ShockwavePoint','name','traitObjects','isNonSubmenuCancel','_targetBattlerKey','tSJZD','chbtr','jLGvj','_forcedHomeX','MOTIONS','aaFib','PreDamageJS','AutoBattle','gDrmD','sortEnemies','STVEF','AphVP','createInnerPortrait','battleCoreTpbMainPhase','moICD','_battleCoreNoElement','huhBE','ActSeq_Mechanics_ArmorPenetration','makeSpeed','Sprite_Battler_isMoving','mpDamage','RequiresDefeat','updateWaitMode','tKVcm','effects','updateMain','Scene_Battle_onActorOk','startMotion','ActSeq_Target_CurrentIndex','Skills','front\x20center','BreakShields','isEffecting','ActSeq_BattleVoice_PlayCommonLine','SkillItemMiddleLayout','StepDistanceX','animationId','portraitIndex','JfHTp','VisuMZ_3_ActSeqCamera','Targets','dimColor2','States','nVYru','startAttackWeaponAnimation','ecnmw','fuVTe','skillWindowRect','isFightCommandEnabled','emulateActionEffect','isPreviousSceneBattleTransitionable','Game_Action_executeHpDamage','ActSeq_Movement_MoveToPoint','_currentActor','AggroControlSystem','getBattlerFromKey','iconText','Parse_Notetags_Targets','autoBattleWindowRect','scale','tnkJT','ActSeq_Movement_Float','IvKlI','Dtwwg','jqpRo','WaitCount','NarlF','popBaseLine','fFONz','NcXoc','VisuMZ_4_IconBalloons','Game_BattlerBase_canGuard','process_VisuMZ_BattleCore_DamageStyles','createAnimationContainer','Exploited','float','ActSeq_Motion_FreezeMotionFrame','IjxrU','qicdH','tpbActorSwitchConditionsMet','addOptionsCommand','AcUnH','ArPenRate','_battleBalloonQueue','default','LIGHT','helpAreaHeight','OcpSV','WZYjW','MessageWait','AJOCp','trrGs','fKxPh','Window_BattleLog_displayFailure','shouldPopupDamage','isArray','drawItemImageXPStyle','getHardDamageCap','GroupDigits','targetSpritePosition','setupBattleCore','ActSeq_Impact_ZoomBlurPoint','HLIRo','currentExt','removeAnimation','HelpEscape','addChildToBack','WwqFC','oMJef','_tpbNeedsPartyCommand','applyForcedGameTroopSettingsBattleCore','Scene_Battle_windowAreaHeight','abnormal','Destination','addFightCommand','faceWidth','hYjwY','isOptionsCommandAdded','redraw','map','SvBattlerMass-%1-%2','setEventCallback','Game_Action_applyGlobal','clearActiveWeaponSlot','targetObject','ActSeq_BattleLog_PushBaseLine','iuVGn','isStateResist','dead\x20battlers','PostDamageJS','BattleEndEvent','fillRect','itemEffectRecoverHp','_duration','visible','OIHFq','YBfFA','fGmcB','_floatEasing','lwJCi','performCollapse','isCommonEventReserved','_lastHpDamage','VisuMZ_2_AggroControlSystem','addEscapeCommand','Scene_Battle_updateStatusWindowPosition','PreApplyJS','vQRGU','cameraOffsetDuration','rowSpacing','nZeLC','trsYB','ActSeq_Animation_ActionAnimation','displayAddedStates','boxWidth','battlerShadowScaleY','destroy','pLwNE','vwicR','isForAnyone','performMoveToTargets','_battlePortrait','slrRN','refreshStatusWindow','WaitForCamera','NTxSn','xsyoz','TpGaugeOffsetX','clearHorrorEffects','Game_Action_apply','PgkOm','motionIdle','repositionEnemiesByResolution','ActSeq_Cutin_EndVisualCutinEffectType','destroyDamageSprite','PTRAJ','ArRedFlat','_borderPortraitTargetX','ActSeq_Movement_BattleStep','isActionSelectionValid','isDisarmLifeSteal','statusWindowRectXPStyle','daaHo','StepDuration','YnIlT','updateBattlebackBitmap1','PreApplyAsTargetJS','SkillID','drain','zOOFc','ParseClassNotetags','children','isItemCommandEnabled','rqdmx','create','parse','compareEnemySprite','TpbGaugeOffsetX','ShowFacesListStyle','growBattler','Sprite_Actor_moveToStartPosition','HkODl','allowRandomSpeed','isAnyoneMoving','startWeaponAnimation','SkipPartyCmd','Class-%1-%2','Game_Party_addActor','MANUAL','Window_BattleLog_pushBaseLine','createEnemyWindow','bWhpf','IhTHT','split','weapons','ActSeq_Set_SetupAction','isEscapeCommandEnabled','magicReflection','_item','createAttachmentSprites','_createDamageContainer','ABPaj','setMoveEasingType','CommonEventID','_colorType','width','BOdwE','LqOgG','drYAj','805320sZJltO','_borderPortraitDuration','motionType','sDaGn','_buttonText','endAnimation','abs','finishActorInput','ahlzu','deadMembers','Weapon-%1-%2','OmFtU','_waitCount','hcGTs','_skewY','uJgAs','setupBattleback','ActSeq_BattleVoice_PlaySpecialLine','isHiddenSkill','faceRect','csvPf','_backAttachmentSprite','VjpGw','IszxH','NameFontSize','GetActionSequenceSpecialTargetWithFlags','updateInterpreter','_requestRefresh','getSkillIdWithName','Sprite_StateIcon_updateFrame','loadSvActor','setWaitMode','setLastBattleSkill','_createClientArea','zRhZU','damageFlat','_currentAngle','bvFXO','isOTB','globalAlpha','EscapeFailureJS','isBattleTest','Scene_Battle_initialize','isMeleeMultiTargetAction','windowPadding','_waitMode','_commonEventKey','AutoBattleCancel','vPrXP','DisplayAction','bHAFI','requestMotion','jvBLC','Index','battleUIOffsetY','CqfqA','_subject','Sprite_Battleback_adjustPosition','canAlterActionCostPTB','addAnimationSpriteToContainer','eyMqI','refreshDimmerBitmap','isAutoBattle','ParseArmorNotetags','ShakeFlinch','isForOneBattleCore','refreshBattlerMotions','MIN_SAFE_INTEGER','ARRAYJSON','logWindowRect','AutoMeleeAoE','message2','GqdPO','ShakeFlinchDuration','hasSvBattler','WFSDn','battleZoom','expTotal','createMiss','alive\x20battlers\x20not\x20user','performAttackSlot','dkkAy','updateVisibility','Spriteset_Battle_updateActors','pushBaseLine','ARRAYSTR','BgType','StyleName','Height','WindowWidth','VoiceLine','processAnimationRequests','performTpbActiveCheckSwitch','virtualClick','makeEscapeRatio','AutoBattleBgType','fnordAddedStates','sort','xkaJd','OQOuh','qCwQn','onJumpEnd','isAtbChargingState','offsetY','IGPFY','turn','sliceMin','alive\x20friends','_shadowScaleX','getEnemyIdWithName','PostRegenerateJS','ShowCounter','multiTargetWindowRect','muvXY','qurrC','wFjiq','Scene_ItemBase_applyItem','JS\x20%1END\x20TURN','Apamd','playBattleVoice','ActSeq_Projectile_Picture','addAutoBattleCommands','ShowMissEvasion','HbhVM','addDamageSprite','TLdMw','_battlerName','doRAZ','getItemDamageAmountLabelOriginal','angleDuration','_performActionEnd','angle','callOptions','ActSeq_Animation_SkillAnimation','makeDamageValue','fSKgE','clearElementChanges','PostApplyJS','Game_Action_itemEffectAddAttackState','portraitFlipHorz','_actionInputIndex','_reflectionTarget','sWvey','GguLB','isAnyoneGrowing','hpAffected','VariableDmg','startSpin','Vwajy','ActSeq_Movement_WaitForSpin','Sprite_Enemy_updateBossCollapse','StatusWindowSelectableBackHide','ShowCurrentState','trlXh','BTB','Sprite_Enemy_setBattler','clearBattleRefreshRequest','sdQcT','isFastForward','frontviewSpriteY','Game_Actor_setup','performActionStart','CmdStyle','gaugeLineHeight','endVisualCutin','AttachStateOffsetY','blockWidth','Window_BattleLog_displayMpDamage','AnchorY','ScjgP','oMkPc','waitForMovement','xmPxl','_cancelButton','getNextSubject','EscapeSuccessJS','resetFontSettings','checkShowHideSwitchNotetags','isWaiting','Scene_Battle_terminate','EBYJy','damage','addAutoBattleCommand','pDPuy','isOpen','removedBuffs','onEscapeFailure','battleCameraData','EnemyOffsetY','ActSeq_Impact_ShockwaveCenterTargets','coreEngineRepositionEnemies','recoverAll','createCommandVisibleJS','isMagical','DamageStyles','_growY','onEnemyCancel','displayRemovedStates','ReflectPlayback','padding','StatusWindowAttachmentFront','stateRate','isBattleRefreshRequested','OTJIP','bJJQt','ActSeq_Mechanics_HpMpTp','LEUjk','QPzHI','YlYpw','performDamage','boxHeight','displayChangedBuffs','selectNextCommandTpb','updateAttachedSprites','_battleCoreAddedElements','MultiTarget','BattleManager_checkBattleEnd','skill','jsScaleToFit','COMBATLOG','_callSceneOptions','updateHomeMove','wcvFu','isTpbCharged','addNewState','noise','VisuMZ_3_ActSeqImpact','QYsUt','Game_Action_isForDeadFriend','alterChange','isTpbMainPhase','NameAttachStateIcon','itemTargetCandidates','yCZQY','Game_Party_removeActor','_targetOpacity','_character','_animation','attackAnimationId1','TrExU','Game_Action_executeMpDamage','showNormalAnimation','setSubject','isInputting','uFYLD','battleCommands','setupNegativeImpactFilter','ICnCk','dead\x20opponents','Game_Action_setItem','ZKzIG','Intensity','eLyuG','fDrug','NEgJZ','damageStyle','animationBaseDelay','parallaxHue','displayCounter','ActSeq_Mechanics_BtbGain','Window_BattleLog_performActionEnd','_preemptive','roFro','SHOW_BUTTON','enemyId','RPhop','OHBLQ','NicWI','PuEeR','isDebuffAffected','_fauxAnimationSprites','anchorX','adjustPosition_ScaleToFit','opponentsUnit','SkewX','ActSeq_Weapon_ClearActiveWeapon','pages','sInLg','VOtQL','eDxbZ','pow','checkTpbInputOpen','activate','WeaponTypeID','JS\x20%1APPLY\x20%2','commandStyleCheck','linkSprite','HP_Flat','VisuMZ_0_CoreEngine','subject','visualCutinPortraitType','changeInputWindow','_allTargets','_frontAttachmentSprite','cutinExit','QwkYE','offsetX','rYYDn','startFloat','HpGauge','clearRect','JS\x20%1REGENERATE','BattleManager_endAction','weatherType','BattleStartEvent','Window_BattleLog_clear','rec','BnWWD','placeTimeGauge','srVrI','displayMiss','setupIconTextPopup','BattleAI','piumW','setBackgroundType','priority','bitmapWidth','gainCurrentActionsFTB','Game_Action_testApply','updateAttachmentSprites','battleback2Name','forceMotion','ActSeq_Mechanics_ActionEffect','canAddSkillCommand','battleCommandName','_baseX','FBrbN','ARRAYEVAL','CmdTextAlign','ActSeq_Impact_Desaturate','battler','atbInterrupt','HP_Rate','FocusX','_battleBalloonSprites','anchorY','return\x200','rhVOK','_skewX','_motionType','addSingleSkillCommands','_distortionSprite','process_VisuMZ_BattleCore_PluginParams','WmpUQ','addSkillTypeCommand','TvHDd','evalDamageFormula','PostDamage%1JS','RRyML','svActorVertCells','changeAtbChargeTime','Letter','updatePositionBattleCore','FcWWp','commandName','_enemy','getBattlePortrait','helpWindowRectBorderStyle','698163KHHgqP','setFullActionsPTB','isSkill','indexOf','VisuMZ_3_ActSeqProjectiles','ActSeq_Mechanics_EmulateSkillCost','Scene_Battle_onEnemyOk','yROcJ','ShowEnemyGauge','YWYGd','updateGrow','%1EndTurnJS','DualWield','dHCLB','AniDuration','Item-%1-%2','PostEndTurnJS','VisuMZ_2_WeaponSwapSystem','sBCAZ','HgRau','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','battlerName','PDFSk','rLSvr','ActionEnd','startActorSelection','applyAngleChange','targetDistortionSpritePosition','AlphaFilter','partyCommandWindowRectDefaultStyle','HitFlat','displayCurrentState','selectPreviousCommand','performRecovery','symbol','performCastAnimation','processActorCommandCancelTPB','xLRzI','setBattleCameraOffset','svBattlerAnchorX','onFloatEnd','gainStoredBoostPoints','timeScale','Game_Battler_makeSpeed','EMkwT','charging','CommandAddAutoBattle','PrioritySortActors','CEaNO','close','ActSeq_ChangeAngle','_tpbState','partyCommandWindowRectBorderStyle','onEncounterBattleCore','format','eSYtt','hVWPj','waitForNewLine','kkxEo','_customDamageFormula','MHNCh','CheckVisibleSkillNotetags','swing','-%1','#ffffff','some','filters','canGuardBattleCore','showEnemyAttackAnimation','-%1\x20MP','SkillItemStandardCols','_lastActor','autoMeleeMultiTargetActionSet','ScaleX','createEffectActionSet','EBptI','skillItemWindowRectMiddle','kToUd','commandStyle','isDamagePopupRequested','NextTurn','UNTITLED','Game_Troop_setup','semlL','prepareCustomActionSequence','frameDelay','isAnimationShownOnBattlePortrait','guard','_opacityEasing','PreDamageAsTargetJS','_battleCoreForcedElements','ActSeq_Animation_PlayAtCoordinate','Wrvge','updateStateSpriteBattleCore','Game_Map_encounterList','ceil','_tempActor','ShowPopup','makeTargetSprites','lgmFK','cxLxp','addTextToCombatLog','displayStartMessages','updateStaticSvBattlerFrames','performCounter','visibilityState','missile','battleGrow','iRqnU','zoomDuration','apply','VoBXM','attackMotions','GgZFI','height','Scene_Battle_updateBattleProcess','stypeId','_shakeFlinchDuration','isJumping','_skewEasing','1040VtJHbl','Game_Action_isForAll','CastAnimation','JumpToLabel','cutinEnter','WaitComplete','<CUSTOM\x20ACTION\x20SEQUENCE>','BoostPoints','SideviewSelect','JYWxu','match','applyGlobal','shift','XGCme','%1Event','Game_Action_setSubject','battleFloat','getLastHpDamage','_escapeRatio','commandNameWindowDrawBackground','targetObjects','ActSeq_Mechanics_EmulateItemEffect','ActSeq_Angle_WaitForAngle','Scene_Battle_createCancelButton','isItem','targetBattlerContainerOpacity','loadBattleback2','DefaultStyle','NameAlwaysSelectOnly','_appeared','aEJhn','ParseSkillNotetags','isActing','BattleManager_startTurn','wyMqE','JS\x20%1START\x20ACTION','myxFC','isNegativeLifeSteal','_createCursorArea','TargetLocation','PostStartActionJS','tPKsk','startOpacity','Scene_Battle_partyCommandWindowRect','BattleManager_checkSubstitute','performShakeFlinch','Wbccb','executeHpDamage','measureTextWidth','onBattleStart','exVGj','VisuMZ_2_BattleSystemOTB','addChild','_createCursorSprite','addChildAt','EasingType','setGuard','SceneManager_isSceneChanging','createAutoBattleWindow','Game_Action_itemEffectAddNormalState','applyVariance','xOVji','Mirror','_cursorArea','_methods','dimColor1','onStaticEnemyBitmapLoad','KcgWZ','makeBattleCommand','negativeMpLifeSteal','ActSeq_Movement_Spin','_regionBattleback1','updateKeyboardKeys','attackStatesRate','needsSelection','BattleManager_onEncounter','Window_SkillList_maxCols','mXTCX','onMoveEnd','updateLink','itemLineRect','DSRMz','SKILLS','icons','stateMotionIndex','ActSeq_Horror_NoiseRemove','updateStateIconSprite','setBattler','isVisualHpGaugeDisplayed','fnordRemovedStates','disarmMpLifeSteal','inputtingAction','ExtraSettings','VtfOv','SFllt','ctYPz','smooth','ActSeq_Target_PrevTarget','ANGER','yykGT','ShowWeapon','setupBattleCoreData','LuKYH','processVictory','DefaultSoftScaler','oqHVu','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','createDistortionSprite','MTDZJ','_floatHeight','Window_BattleActor_show','Game_Action_needsSelection','skewDuration','IpfPL','vertCells','helpWindowRect','kFLtV','applyFreezeMotionFrames','StateIconOffsetY','executeMpDamage','BattleManager_inputtingAction','param','parallaxHueEnemyModifier','alive\x20enemies','setBlendColor','Spriteset_Battle_createBattleField','nHiAB','BattleManager_setup','filter','Game_Enemy_transform','nVnnt','setSvBattlerSprite','resetResultSwitches','5293544yJqate','Elements','EscapeFail','resetTextColor','isSpriteVisible','cjzKd','becomeSTBExploited','createHelpWindowBattleCore','cFbSN','open','changeBattlerOpacity','oaOHt','isAnyoneInjectAnimating','ShowTpDmg','ActSeqImpact','StatusWindowAttachmentFrontOffsetX','duBap','_targetSkewY','_lines','onBattleStartBattleCore','zWEDT','item','svBattlerShadowVisible','setCommonEvent','applyCritical','onEnemyOk','Sprite_Battler_initMembers','WTkhV','_motionSpeed','DamageFlat','attackStates','position','prepare','isAnyoneSkewing','_visualHpGauge_JustDied','setBattleImpactTimeScale','PKDqu','BARE\x20HANDS','Game_Action_setAttack','ActSeq_BattleLog_WaitForBattleLog','TpbActiveChangeEnabled','isShownOnBattlePortrait','_forcedHomeY','RosOV','displayAction','uauVy','lineRect','9YfluJj','LOVE','slices','ARRAYFUNC','ActSeq_Animation_BalloonIconSpecific','lGIEA','uiqIV','trueRandomTarget','CmdIconAutoBattle','setupActionSet','auto','createHelpWindow','removeImmortal','addBattleCoreAutoBattleStyleCommand','GarAA','createUIContainer','lastCommandSymbol','SxUzF','%1EndActionJS','_growEasing','StatusWindowSkinHide','ActSeq_BattleLog_Clear','fnUGf','portraitFilename','textSizeEx','getMenuImage','SyZYK','_target','StartTurnWait','selectLast','IQPgQ','Scene_Battle_commandFight','hitFlat','createShadowSprite','XPActorDefaultHeight','initElementStatusCore','Window_BattleLog_performRecovery','Reveal','processTurn','animationNextDelay','_action','jhcUj','font','performSubstitute','prepareBorderActor','ActSeq_Projectile_Icon','_active','makeTargets','vVdwB','EscapeSuccess','animation','placeStateIcon','Variable','JS\x20BATTLE\x20VICTORY','Sprite_Enemy_setHue','ShuffleArray','_actor','bKdlf','removeChild','AllEnemiesText','wASax','setAttack','clearMotion','performLifeSteal','VisuMZ_2_BattleSystemETB','_logWindow','zvhRe','requestBalloon','thrust','Actor','traitSet','startDamagePopup','stop','fplXn','#%1','COMBAT\x20LOG','Rnmwp','removeActor','Linear','damageContainer','MUSIC\x20NOTE','DefaultDamageStyle','ActSeq_Zoom_Reset','ActSeq_Horror_TVCreate','1410689XzobNa','visualCutinPortraitHue','_makeCursorAlpha','Scene_Battle_createAllWindows','YGKIN','missed','commandSymbol','_cache','skills','executeDamage','startVisualCutin','alive\x20actors\x20not\x20user','vfCyq','endAction','createBattleField','isSTB','DefaultSoftCap','placeGauge','JTQep','_enemyWindowMode','_jumpHeight','argWW','uPNqV','canAttack','MqqCx','_forceAction','Angle','PARTY','visualCutinPortraitIndex','ActSeq_Mechanics_SwapWeapon','parallaxScrollYinvertEnemy','Window_BattleActor_processTouch','TlwcW','gainHp','processExtendTroopMembers','_windowLayer','XyJxr','_effectDuration','playReflection','displayItemMessage','AsTarget','_battlerKeyCache','dCshl','Buffs','updateBattlebackBitmap2','flashColor','getHalfActionsPTB','setActiveWeaponSet','targetsForOpponents','Parse_Notetags_Action','motionSpeed','process_VisuMZ_BattleCore_PreBattleCommonEvent','Window_BattleLog_update','createActorCommandWindowBattleCore','lifeSteaItem','battleInjectPrep','atVsP','onDisabledPartyCommandSelection','HNdNR','randomInt','itemWindowRect','PreStartBattleJS','dZcNx','command301','svShadow','skIpb','_shakeFlinchPower','chantStyle','vnltE','ANNOYED','extraPositionY','DigitGroupingDamageSprites','selectNextActor','freezeMotion','battleStatusWindowAnimationContainer','performActionEnd','addText','createActionSequenceProjectile','performSTBExploiter','occasion','autoBattleStyle','applyGlobalCommonEventNotetags','isSpinning','Game_Interpreter_command283','innerHeight','uYgsH','BFvRO','icon','waitCount','ZIGSU','pagedown','EVAL','BattleManager_processDefeat','trvTE','%1EndBattleJS','PZzWX','AdjustRect','stbGainInstant','callUpdateHelp','drawActorFace','kiesa','guardSkillId','StatusWindowAttachmentBack','wJQql','Scwpt','Sprite_Enemy_updateStateSprite','actorCommandCancelTPB','checkAutoCustomActionSequenceNotetagEffect','rbmZb','ActSeq_Mechanics_EmulateSkillEffect','_isBattlerFlipped','process_VisuMZ_BattleCore_Notetags','hpDamage','removeBuff','targetsForFriends','save','Iyopg','_inputting','isForOpponent','ttbCK','pattern','setupOversaturateImpactFilter','isStateAffected','BattleManager_cancelActorInput','weatherPower','_homeWholeDuration','ActSeq_Impact_Negative','itemHeight','ActSeq_Element_Clear','KRXlT','debuffAdd','Window_BattleLog_performReflection','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ShowMpDmg','QTCrH','maxCommands','FullActions','_targets','isCurrentItemEnabled','isSubjectValidForAnyoneSelect','OSEkZ','Scene_Battle_selectNextCommand','string','VisuMZ_2_PartySystem','gtZIJ','_damagePopupArray','vzJix','currentClass','Game_Enemy_setup','_growX','_jumpWholeDuration','startShakeFlinch','toUpperCase','MAT','isGuardWaiting','OSwXT','initBattleCore','vrigf','unshift','JMfae','CreateCutinSettings','IqaPN','opacity','rbhVe','clamp','updateEventMain','Sprite_Actor_updateFrame','loadWindowskin','_list','ESCAPE','Scene_Battle_createHelpWindow','addImmortal','Sprite_Battler_damageOffsetY','uiInputPosition','min','ujXfR','createEnemyNames','isNextScene','SiQyI','xHfjd','note','Game_BattlerBase_refresh','troop','beZnC','BattleManager_selectNextCommand','SwitchCritical','_shadowScaleY','yHNow','isForAll','isQueueOptionsMenu','Exploiter','OIpSZ','Game_Battler_performMiss','VoiceLineType','DTB','drawItemStatusXPStyle','gupVz','adjustPosition','addSkillCommands','setActiveWeaponSlot','random','isForNotUser','ALL_ENEMIES','createContents','woHca','battleMembers','makeTargetsBattleCore','ShowRemovedBuff','VisuMZ_3_SideviewBattleUI','NUM','sortDamageSprites','equipSlots','repositionCancelButtonBorderStyle','Game_Interpreter_command301','_jumpMaxHeight','ndFQt','isAnyoneSpinning','VisuMZ_3_BattleAI','addItemCommand','createBattleBalloon','processBorderActor','PaZCq','_displayBattleCoreTransitionErrorMsg','ActSeq_BattleLog_PopBaseLine','Game_Action_numRepeats','setHandler','transform','messageSpeed','VisuMZ_3_FrontviewBattleUI','Direction','options','_padding','updateCollapse','ivjBh','createLowerLayer','AddHpGaugeOption','BdWke','isPreviousScene','hasBeenDefeatedBefore','text','isHidden','zdAxc','actionBattleCoreJS','battlerKey','VisuMZ_4_CombatLog','balloonId','PgQZi','validTargets','bgType','cOnNd','VisuMZ_2_BattleSystemBTB','_text','yBDpp','_flinched','FWdaS','nbjqo','push','process_VisuMZ_BattleCore_BaseTroops','LEGlM','battleStatusSprite','autoSelect','adjustPosition_ScaleUp','WaitForMovement','744208DTPYpT','members','_autoBattle','setValue','updateScale','ActSeq_Element_NullElements','victory','makeActionList','AnimationID','initialize','addStateTurns','getWtypeIdWithName','StepDistanceY','battlelog','isDTB','ActSeq_Movement_WaitForMovement','_angleEasing','getItemDamageAmountTextOriginal','gynUY','emulateAction','MXcLu','process_VisuMZ_BattleCore_Failsafes','drawText','numTargets','_linkedSprite','PJtTk','ltOWE','applyTargetFilters','wtypeId','applyItem','start','rtppK','_forcing','_doubleTouch','isClicked','processOk','worldTransform','PointJS','WHujT','displayFailure','PostStartBattleJS','kGPdc','cPHuV','isEnemy','bYKBh','clearForcedGameTroopSettingsBattleCore','WaitForAnimation','clmOP','updateFloat','_flashDuration','updateCustomActionSequence','STYPES','OxCBY','parent','StateID','CmdIconEscape','setBattlePortrait','PostApplyAsTargetJS','azrih','Point','BanCg','%1StartBattleJS','ActSeq_Movement_Opacity','setupMotion','_iconIndex','Rate','showAnimation','displayReflectionPlayBack','YkwRO','Sprite_Battler_setBattler','addAttackCommand','action','TDWDJ','BattleSystemCTB','_updateCursorFilterArea','isConfused','BMsWF','CriticalDmgFlat','JSON','isAutoBattleCommandEnabled','ElementStatusCore','ActSeq_Movement_Scale','Game_Action_executeDamage','isPTB','changeCtbCastTime','_targetAngle','nkgTV','isSelected','showPortraits','value1','makeSuccess','isForFriend','isDead','portraitFlipVert','MP_Flat','Sprite_Enemy_createStateIconSprite','getStypeIdWithName','prototype','concat','performMagicEvasion','CTPSm','Game_Action_clear','usePremadeActionSequence','Game_Battler_performActionStart','lTArV','onHomeMoveEnd','BattleManager_updatePhase','battleCorePreBattleCommonEvent','customDamageFormula','AutoBattleOK','CkhHH','mFWJG','needsActorInputCancel','isDuringNonLoopingMotion','Qofoo','JS\x20%1END\x20ACTION','toString','addBattleCoreAutoBattleStartupCommand','context','ukhQZ','battleSys','ActionSkillMsg2','createStateSprite','moveToStartPosition','jhPUc','Window_BattleEnemy_hide','maxLines','CriticalDuration','mainSpriteScaleY','preemptive','ForceExploited','BattleCmdList','displayHpDamage','Game_Interpreter_PluginCommand','slice','RzXSo','loadEnemy','CoreEngine','CriticalColor','performEvasion','optDisplayTp','PNAID','Game_Action_isForOpponent','turnCount','_freezeMotionData','HpGaugeOffsetY','fKtjd','RegExp','TciOK','CYtir','mAywp','alive\x20battlers','AAdnY','updateBossCollapse','ForceExploiter','PcxbA','VisuMZ_2_DragonbonesUnion','PXwlh','Game_Action_isForFriend','_deathStateApplied','ActSeq_Mechanics_PtbConvert','ARRAYSTRUCT','autoMeleeSingleTargetActionSet','Filename','ActSeq_Mechanics_TextPopup','autoBattleUseSkills','emxAc','_mainSprite','wULpD','battleUIOffsetX','battleAnimation','VisuMZ_2_BattleSystemATB','ActorOffsetX','HelpOptions','uocVa','isChangingOpacity','SMHFC','jump','_effectType','setBattlerFlip','MUSICNOTE','move','fJClV','Game_Map_battleback2Name','canBattlerMove','ActSeq_Skew_Reset','PopupPosition','EoJqp','ActSeq_Mechanics_FtbAction','includes','doesPageHaveOnceParallelStart','ActSeq_Mechanics_Multipliers','Game_Map_battleback1Name','CTB','onOpacityEnd','damageOffsetX','rOxpe','forActor','_ptbActionCost','hitRate','Scene_Battle_createPartyCommandWindow','visualHpGauge','JwMGx','_targetFloatHeight','snapForBackground','isAnyBattleBalloonPlaying','Sprite_Battler_startMove','createTroopNote','mefgz','getBattlerKeyTargets','drawIcon','GetActionSequenceSpecialTarget','dUifD','_selectionEffectCount','alive\x20enemies\x20not\x20user','Game_BattlerBase_eraseState','DosgS','CalcActionSpeedJS','statusText','damageOffsetY','revealNewWeaknesses','BTestBypass','commandEscape','_homeDuration','isUndecided','itemCri','Eqwtx','actionEffect','softDamageCapRate','Vprdd','applyDamageCaps','_weather','ActSeq_Impact_MotionBlurScreen','Game_Action_makeTargets','svBattlerAnchorY','_uiContainer','_totalValue','performMiss','cancel','ZaMjX','createAttachedSprites','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','isBorderStylePortraitShown','ZAbBP','ActSeq_Movement_Skew','requestMotionRefresh','ShowCosts','FlashDuration','Scene_Battle_startActorSelection','VisuMZ_2_BattleSystemSTB','kpBCi','_svBattlerSprite','isCancelLifeSteal','oBfCK','startIcon','placeActorName','getAttackMotionSlot','isMVAnimation','_skillIDs','PostApplyAsUserJS','ActSeq_Camera_WaitForCamera','cancelLifeSteal','Sprite_Battler_damageOffsetX','setHelpWindow','Scene_Map_updateCallMenu','inBattle','processRandomizedData','nbGPC','ActSeq_Movement_HomeMoveToTarget','CmdIconItem','frameVisible','DamageDisplay','rlwjH','windowskin','tkRPl','getAttackMotion','ParseActorNotetags','ActSeq_Movement_WaitForSkew','getItemDamageAmountTextBattleCore','ZZZ','_updateFilterArea','battleProjectiles','_lastRegenFrameCount','Sprite_Battler_updateMain','isAnyProjectilePresent','setStateTurns','Enemy-%1-%2','_hpGaugeSprite','UKgcQ','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','actorCommandEscape','addWeaponSwapCommand','ykvfM','WaitForEntrance','Game_Temp_initialize','_growDuration','alive\x20friends\x20not\x20target','PreDamageAsUserJS','ActSeq_Animation_GuardAnimation','wdFCu','_flashColor','DamageStyleList','uCwDK','length','index','VisuMZ_2_BattleSystemPTB','ActionEffect','_eventId','NQuiR','MDkjo','PopupDuration','ALStR','hasSkill','updateStatusWindowPosition','CmdIconOptions','_weaponSprite','pWwmu','TextFmt','makeCommandList','ShowRemovedState','startAction','InsrD','removeBuffsAuto','retreat','mainSpriteWidth','ActSeq_Set_WholeActionSet','parallaxScrollX','loop','eSdfa','ActSeq_Mechanics_DamagePopup','allBattleMembers','displayActionResults','getNextSubjectFromPool','addState','sliceMax','WZRlk','changeTurnOrderByCTB','_surprise','makeTargetsBattleCoreJS','isChanting','ActSeq_Angle_Reset','cancelHpLifeSteal','fittingHeight','DTkZl','updateAngleCalculations','createChildSprite','Scene_Battle_logWindowRect','bind','alive\x20actors','isBusy'];_0x1999=function(){return _0x88f141;};return _0x1999();}Window_EnemyName[_0x1e608f(0xbe1)]=Object[_0x1e608f(0x770)](Window_StatusBase['prototype']),Window_EnemyName['prototype']['constructor']=Window_EnemyName,Window_EnemyName['prototype'][_0x1e608f(0xb89)]=function(_0x4f7967){const _0x4da407=_0x1e608f;this[_0x4da407(0x5e3)]=_0x4f7967,this['_text']='';const _0x114db7=new Rectangle(0x0,0x0,Graphics[_0x4da407(0x748)],this[_0x4da407(0x4a7)]()*0x4);Window_StatusBase['prototype'][_0x4da407(0xb89)][_0x4da407(0x2d7)](this,_0x114db7),this[_0x4da407(0x8cd)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x34ce03=_0x1e608f;this[_0x34ce03(0x85a)]=0x0;},Window_EnemyName['prototype'][_0x1e608f(0x366)]=function(){return $gameTroop['members']()[this['_enemyID']];},Window_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x5eba0f=_0x1e608f;Window_StatusBase[_0x5eba0f(0xbe1)][_0x5eba0f(0x593)][_0x5eba0f(0x2d7)](this);if(this[_0x5eba0f(0x366)]()&&this['enemy']()[_0x5eba0f(0x6aa)]()!==this[_0x5eba0f(0xb74)]){if(_0x5eba0f(0x34d)==='zVfTf')return _0xa01483['isActiveTpb']();else this['_text']=this[_0x5eba0f(0x366)]()['name'](),this[_0x5eba0f(0xd5d)]();}this[_0x5eba0f(0x1a3)](),this['updatePosition']();},Window_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x1a3)]=function(){const _0x376d8b=_0x1e608f;if(!this['enemy']()){if(this[_0x376d8b(0x2dd)]>0x0)this[_0x376d8b(0x2dd)]-=0x10;}else{if(this[_0x376d8b(0x366)]()['isDead']()){if(this[_0x376d8b(0x2dd)]>0x0)this[_0x376d8b(0x2dd)]-=0x10;}else{if(SceneManager['_scene'][_0x376d8b(0x5fc)]&&SceneManager[_0x376d8b(0x327)][_0x376d8b(0x5fc)][_0x376d8b(0x197)]&&SceneManager[_0x376d8b(0x327)][_0x376d8b(0x5fc)]['_enemies'][_0x376d8b(0xc3d)](this['enemy']())){if(this[_0x376d8b(0x2dd)]<0xff)this[_0x376d8b(0x2dd)]+=0x10;}else this['contentsOpacity']>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x1e608f(0xbe1)]['updatePosition']=function(){const _0xae0282=_0x1e608f;if(!this[_0xae0282(0x366)]())return;SceneManager[_0xae0282(0xcff)]()?this['x']=Graphics['boxWidth']-this[_0xae0282(0x366)]()['battler']()['_baseX']:this['x']=this[_0xae0282(0x366)]()[_0xae0282(0x8dd)]()[_0xae0282(0x8d8)];this['x']-=Math[_0xae0282(0x1a5)](this[_0xae0282(0x78f)]/0x2),this['y']=this[_0xae0282(0x366)]()[_0xae0282(0x8dd)]()[_0xae0282(0x171)]-Math['round'](this[_0xae0282(0x4a7)]()*1.5);const _0x43b078=VisuMZ['BattleCore'][_0xae0282(0x4a9)][_0xae0282(0x662)];this['x']+=_0x43b078[_0xae0282(0x23d)]||0x0,this['y']+=_0x43b078[_0xae0282(0x360)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x3f17d8=_0x1e608f;Window_Base[_0x3f17d8(0xbe1)][_0x3f17d8(0x843)]['call'](this),this[_0x3f17d8(0x1c9)][_0x3f17d8(0x422)]=VisuMZ['BattleCore']['Settings'][_0x3f17d8(0x662)][_0x3f17d8(0x7ab)];},Window_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0xd5d)]=function(){const _0x5378a8=_0x1e608f;Window_StatusBase[_0x5378a8(0xbe1)][_0x5378a8(0xd5d)][_0x5378a8(0x2d7)](this),this[_0x5378a8(0x1c9)]['clear']();if(!this['enemy']())return;this['drawEnemyName']();},Window_EnemyName[_0x1e608f(0xbe1)][_0x1e608f(0x149)]=function(){const _0x13f395=_0x1e608f;this[_0x13f395(0xb74)]=this[_0x13f395(0x366)]()[_0x13f395(0x6aa)]();const _0x4d31ae=this[_0x13f395(0xa3d)](this[_0x13f395(0xb74)])[_0x13f395(0x78f)],_0x8493a4=Math[_0x13f395(0x1a5)]((this[_0x13f395(0x5b5)]-_0x4d31ae)/0x2);this[_0x13f395(0x53d)](this['_text'],_0x8493a4,0x0,_0x4d31ae+0x8);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xbfe)]=function(){const _0x37fc14=_0x1e608f;return VisuMZ[_0x37fc14(0xce2)][_0x37fc14(0x4a9)][_0x37fc14(0x409)][_0x37fc14(0xd7c)];},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xb5c)]=function(){const _0x45d457=_0x1e608f;return VisuMZ[_0x45d457(0xce2)][_0x45d457(0x4a9)][_0x45d457(0x409)][_0x45d457(0x707)];},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x2ad)]=function(){const _0x5ceede=_0x1e608f;return VisuMZ[_0x5ceede(0xce2)][_0x5ceede(0x4a9)]['BattleLog']['BackColor'];},Window_BattleLog['prototype'][_0x1e608f(0x831)]=function(){return![];},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xc63)]=function(_0x3d785a,_0xae814c){const _0x97eb1d=_0x1e608f;this[_0x97eb1d(0xb17)](_0x97eb1d(0x2c9)),BattleManager[_0x97eb1d(0xd5e)](_0x3d785a,_0xae814c),this[_0x97eb1d(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x6df)]=function(_0x541303,_0x5a915,_0x36cecd){const _0x5c2307=_0x1e608f;this[_0x5c2307(0xb17)](_0x5c2307(0x2c9)),BattleManager['emulateAction'](_0x541303,_0x5a915,_0x36cecd),this[_0x5c2307(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)]['actionSplicePoint']=function(){const _0x197dc6=_0x1e608f;this[_0x197dc6(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xb79)]=function(_0x3ce8a8){const _0x460214=_0x1e608f,_0x597eb6=Array[_0x460214(0xbe1)][_0x460214(0xc06)]['call'](arguments,0x1),_0x2dff0a={'name':_0x3ce8a8,'params':_0x597eb6},_0xa7eb53=this[_0x460214(0x9b1)][_0x460214(0x725)](_0x96674e=>_0x96674e[_0x460214(0x6aa)])[_0x460214(0x8fc)](_0x460214(0x2c9));if(_0xa7eb53>=0x0)this[_0x460214(0x9b1)][_0x460214(0x191)](_0xa7eb53,0x0,_0x2dff0a);else{if(_0x460214(0x902)===_0x460214(0x6ff)){if(!this['visible'])return![];if(_0x143d13['isSideView']())return![];const _0x4383e7=_0x22d8be[_0x460214(0x327)]['battleLayoutStyle'](),_0x2ace90=['default',_0x460214(0x68e),'xp',_0x460214(0x3d5),_0x460214(0xd11)];return _0x2ace90[_0x460214(0xc3d)](_0x4383e7);}else this[_0x460214(0x9b1)][_0x460214(0xb79)](_0x2dff0a);}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xb17)]=function(_0x46a679){const _0x134bc6=_0x1e608f,_0x5ec22d=Array[_0x134bc6(0xbe1)][_0x134bc6(0xc06)]['call'](arguments,0x1);this[_0x134bc6(0x9b1)]['unshift']({'name':_0x46a679,'params':_0x5ec22d});},Window_BattleLog[_0x1e608f(0xbe1)]['logActionList']=function(){const _0x4788e9=_0x1e608f;if(!$gameTemp[_0x4788e9(0x324)]())return;console['log'](this['_methods']['map'](_0x1ebba5=>_0x1ebba5[_0x4788e9(0x6aa)])['join']('\x0a'));},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x58d)]=Window_BattleLog['prototype'][_0x1e608f(0xd5d)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xd5d)]=function(){const _0x54de92=_0x1e608f;this[_0x54de92(0x7ae)]=!![];},VisuMZ[_0x1e608f(0xce2)]['Window_BattleLog_update']=Window_BattleLog['prototype']['update'],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x593)]=function(){const _0x303a66=_0x1e608f;VisuMZ[_0x303a66(0xce2)][_0x303a66(0xaad)][_0x303a66(0x2d7)](this);if(this[_0x303a66(0x7ae)])this['processRefresh']();},Window_BattleLog['prototype']['processRefresh']=function(){const _0x5cbaaa=_0x1e608f;this[_0x5cbaaa(0x7ae)]=![],VisuMZ[_0x5cbaaa(0xce2)][_0x5cbaaa(0x58d)][_0x5cbaaa(0x2d7)](this);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x2b2)]=function(_0x26b11f){const _0x1ce7a8=_0x1e608f;let _0x52159c=VisuMZ[_0x1ce7a8(0xce2)][_0x1ce7a8(0x4a9)][_0x1ce7a8(0x409)]['TextAlign']['toLowerCase']()[_0x1ce7a8(0x2a9)](),_0x1cc779=this[_0x1ce7a8(0xa08)][_0x26b11f];if(_0x1cc779[_0x1ce7a8(0x97b)](/<LEFT>/i))_0x52159c='left';else{if(_0x1cc779[_0x1ce7a8(0x97b)](/<CENTER>/i))_0x52159c='center';else _0x1cc779[_0x1ce7a8(0x97b)](/<RIGHT>/i)&&(_0x52159c=_0x1ce7a8(0x2d8));}_0x1cc779=_0x1cc779['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1cc779=_0x1cc779['replace'](/\\I\[0\]/gi,'');const _0x4fb3ea=this[_0x1ce7a8(0xa24)](_0x26b11f);this[_0x1ce7a8(0x1c9)][_0x1ce7a8(0x8bf)](_0x4fb3ea['x'],_0x4fb3ea['y'],_0x4fb3ea[_0x1ce7a8(0x78f)],_0x4fb3ea[_0x1ce7a8(0x96b)]);const _0x52fc9b=this[_0x1ce7a8(0xa3d)](_0x1cc779)[_0x1ce7a8(0x78f)];let _0x4f41f2=_0x4fb3ea['x'];if(_0x52159c==='center'){if(_0x1ce7a8(0x796)!==_0x1ce7a8(0x796))return _0x3ea3b3[_0x1ce7a8(0xb81)]()[this['_enemyID']];else _0x4f41f2+=(_0x4fb3ea[_0x1ce7a8(0x78f)]-_0x52fc9b)/0x2;}else _0x52159c==='right'&&(_0x4f41f2+=_0x4fb3ea[_0x1ce7a8(0x78f)]-_0x52fc9b);this['drawTextEx'](_0x1cc779,_0x4f41f2,_0x4fb3ea['y'],_0x52fc9b+0x8);},Window_BattleLog[_0x1e608f(0xbe1)]['addText']=function(_0x5241ad){const _0x3c0783=_0x1e608f;this[_0x3c0783(0xa08)][_0x3c0783(0xb79)](_0x5241ad),this['refresh'](),this[_0x3c0783(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x6c4)]=function(){const _0x44857d=_0x1e608f;let _0x71706b=![];switch(this['_waitMode']){case _0x44857d(0x602):_0x71706b=this['_spriteset'][_0x44857d(0x6ce)]();break;case _0x44857d(0x1ee):_0x71706b=this[_0x44857d(0x4b1)][_0x44857d(0x779)]();break;case _0x44857d(0xa57):_0x71706b=this['_spriteset'][_0x44857d(0x2cf)]();break;case _0x44857d(0x6f9):_0x71706b=this['_spriteset']['isAnyoneFloating']();break;case _0x44857d(0xc31):_0x71706b=this[_0x44857d(0x4b1)][_0x44857d(0x289)]();break;case _0x44857d(0xb1b):_0x71706b=this[_0x44857d(0x4b1)][_0x44857d(0x152)]();break;}return!_0x71706b&&(_0x44857d(0x812)!==_0x44857d(0xb72)?this['_waitMode']='':(_0x358462['BattleCore'][_0x44857d(0x114)][_0x44857d(0x2d7)](this),this['performFlinch']())),_0x71706b;},Window_BattleLog[_0x1e608f(0xbe1)]['waitForAnimation']=function(){const _0xdb63c2=_0x1e608f;this['setWaitMode'](_0xdb63c2(0xa57));},Window_BattleLog[_0x1e608f(0xbe1)]['waitForFloat']=function(){const _0x3aac0b=_0x1e608f;this[_0x3aac0b(0x7b2)]('float');},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x228)]=function(){const _0x41e730=_0x1e608f;this['setWaitMode'](_0x41e730(0xc31));},Window_BattleLog[_0x1e608f(0xbe1)]['waitForOpacity']=function(){const _0x50824f=_0x1e608f;this['setWaitMode'](_0x50824f(0xb1b));},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x5b3)]=function(){const _0x44852d=_0x1e608f,_0x336002=VisuMZ[_0x44852d(0xce2)][_0x44852d(0x4a9)][_0x44852d(0x409)];if(!_0x336002[_0x44852d(0x42a)])return;this['push'](_0x44852d(0xac5),_0x336002['StartTurnMsg'][_0x44852d(0x92f)]($gameTroop[_0x44852d(0xc0f)]())),this[_0x44852d(0xb79)](_0x44852d(0xad1),_0x336002[_0x44852d(0xa41)]),this[_0x44852d(0xb79)]('clear');},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xcc0)]=function(_0x51b717,_0x90d0d6,_0x35fb23){const _0x44efb1=_0x1e608f;this[_0x44efb1(0x699)](_0x90d0d6)?BattleManager[_0x44efb1(0x94d)]():this[_0x44efb1(0xbe6)](_0x51b717,_0x90d0d6,_0x35fb23);},Window_BattleLog[_0x1e608f(0xbe1)]['isCustomActionSequence']=function(_0x580580){const _0x472112=_0x1e608f;if(!SceneManager[_0x472112(0x5f2)]())return![];if(!_0x580580)return![];if(!_0x580580[_0x472112(0xa0b)]())return![];if(_0x580580[_0x472112(0xa0b)]()[_0x472112(0xb2d)][_0x472112(0x97b)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x472112(0xae4)](_0x580580[_0x472112(0xa0b)]())){if(_0x472112(0xd48)==='cboEa')return!![];else for(const _0x187ddc of _0x353950){for(const _0xbf6030 of _0xbeeafe){const _0x331414=_0x1f703a[0x0][_0x472112(0x92f)](_0xbf6030[0x0],_0x187ddc[0x0]),_0x3e46a4=_0x14588b[0x1]['format'](_0xbf6030[0x1],_0x187ddc[0x1])[_0x472112(0x2a9)](),_0x3dad9f=new _0x1649e9(_0xf037a3[_0x472112(0x92f)](_0x3e46a4),'i');_0x4f3a0b[_0x331414]=_0x3dad9f;}}}return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0x454fa1,_0x2be65c,_0xed8b12){const _0x558446=_0x1e608f;this[_0x558446(0xa2e)](_0x454fa1,_0x2be65c,_0xed8b12),this[_0x558446(0x943)](_0x454fa1,_0x2be65c,_0xed8b12),this[_0x558446(0xd5b)](_0x454fa1,_0x2be65c,_0xed8b12);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xa22)]=function(_0x34cfc5,_0x432786){const _0x3953a1=_0x1e608f,_0x4341f0=VisuMZ[_0x3953a1(0xce2)][_0x3953a1(0x4a9)][_0x3953a1(0x409)];if(_0x4341f0['ActionCenteredName']){if('XviOS'==='iPgHR')return _0x31d118[_0x3953a1(0xa40)];else this[_0x3953a1(0xb79)](_0x3953a1(0xac5),_0x3953a1(0x654)['format'](DataManager['battleDisplayText'](_0x432786)));}if(DataManager[_0x3953a1(0x8fb)](_0x432786)){if(_0x4341f0[_0x3953a1(0x547)])this[_0x3953a1(0xaa0)](_0x432786[_0x3953a1(0x686)],_0x34cfc5,_0x432786);if(_0x4341f0[_0x3953a1(0xbf9)])this[_0x3953a1(0xaa0)](_0x432786[_0x3953a1(0x7da)],_0x34cfc5,_0x432786);}else{if(_0x4341f0['ActionItemMsg'])this[_0x3953a1(0xaa0)](TextManager[_0x3953a1(0xd15)],_0x34cfc5,_0x432786);}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xa2e)]=function(_0x9167ae,_0x6a79da,_0x24b25e){const _0x13abb2=_0x1e608f,_0x89a632=_0x6a79da[_0x13abb2(0xa0b)]();this[_0x13abb2(0xa22)](_0x9167ae,_0x89a632),this[_0x13abb2(0xb79)](_0x13abb2(0x4c9),_0x9167ae,_0x24b25e,!![]),this[_0x13abb2(0xb79)](_0x13abb2(0x834),_0x9167ae,_0x6a79da),this[_0x13abb2(0xb79)](_0x13abb2(0x83e)),this[_0x13abb2(0xb79)](_0x13abb2(0x91c),_0x9167ae,_0x6a79da),this[_0x13abb2(0xb79)](_0x13abb2(0xce4));},Window_BattleLog['prototype'][_0x1e608f(0x943)]=function(_0x439121,_0x2d148e,_0x32b472){const _0xe6c555=_0x1e608f;if(this[_0xe6c555(0xd18)](_0x2d148e))this[_0xe6c555(0xc22)](_0x439121,_0x2d148e,_0x32b472);else{if(this[_0xe6c555(0x7be)](_0x2d148e))this[_0xe6c555(0x941)](_0x439121,_0x2d148e,_0x32b472);else _0x2d148e['isForRandom']()?_0xe6c555(0x502)!==_0xe6c555(0x502)?this[_0xe6c555(0x4d7)]=[]:this[_0xe6c555(0x29d)](_0x439121,_0x2d148e,_0x32b472):_0xe6c555(0x397)===_0xe6c555(0x397)?this['wholeActionSet'](_0x439121,_0x2d148e,_0x32b472):(_0x585fc8[_0xe6c555(0xbe1)][_0xe6c555(0x864)][_0xe6c555(0x2d7)](this),this[_0xe6c555(0x9fa)]()&&this[_0xe6c555(0x7dd)]()&&this[_0xe6c555(0x7c6)]('damage'),_0x378882[_0xe6c555(0xd31)]());}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x4bf)]=function(_0x216694,_0xc2bb65,_0x4c023d,_0x234394){const _0x9b1f8d=_0x1e608f;if(_0xc2bb65){const _0x45db5f=_0x216694[_0x9b1f8d(0x8dd)]();this[_0x9b1f8d(0xb79)](_0x9b1f8d(0x1e3),[_0x216694],_0x4c023d,_0x234394),this[_0x9b1f8d(0xb79)](_0x9b1f8d(0x4c3),_0x216694,_0x45db5f[_0x9b1f8d(0x565)],_0x45db5f[_0x9b1f8d(0x37b)],_0x234394,![],'Linear'),this[_0x9b1f8d(0xb79)](_0x9b1f8d(0x7c6),[_0x216694],_0x9b1f8d(0x35f)),this[_0x9b1f8d(0xb79)]('waitForMovement'),this[_0x9b1f8d(0xb79)]('requestMotion',[_0x216694],'walk');}},Window_BattleLog['prototype'][_0x1e608f(0xd18)]=function(_0x18ee75){const _0x292b83=_0x1e608f;if(!_0x18ee75['isPhysical']())return![];if(!_0x18ee75['isForOne']())return![];if(!_0x18ee75[_0x292b83(0xaef)]())return![];return VisuMZ[_0x292b83(0xce2)][_0x292b83(0x4a9)]['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xc22)]=function(_0x16e7e0,_0x557b0a,_0x55f7bd){const _0x5c860e=_0x1e608f,_0x35b400=_0x16e7e0['getAttackMotion']()[_0x5c860e(0x512)]<0x2,_0x4ce441=0x14,_0x5d64b7=0x30;let _0x4c19a9=!![];_0x55f7bd[_0x5c860e(0xcaf)]>0x0&&_0x16e7e0['isActor']()===_0x55f7bd[0x0][_0x5c860e(0x28c)]()&&(_0x5c860e(0x661)===_0x5c860e(0x661)?_0x4c19a9=![]:_0x33da37['addStateTurns'](_0xe84fa7,_0x26efc9));_0x35b400&&_0x4c19a9&&(this[_0x5c860e(0xb79)](_0x5c860e(0x1e3),[_0x16e7e0],_0x5d64b7,_0x4ce441),this['push'](_0x5c860e(0x74e),_0x16e7e0,_0x55f7bd,'front\x20base',_0x4ce441,!![],_0x5c860e(0xa73),!![]),this[_0x5c860e(0xb79)]('requestMotion',[_0x16e7e0],'walk'),this['push'](_0x5c860e(0x83e)));let _0x23b1cd=_0x557b0a[_0x5c860e(0x65a)]()?this[_0x5c860e(0x1e4)](_0x16e7e0):0x1;for(let _0x25099d=0x0;_0x25099d<_0x23b1cd;_0x25099d++){_0x557b0a[_0x5c860e(0x65a)]()&&_0x16e7e0[_0x5c860e(0x28c)]()&&this[_0x5c860e(0xb79)](_0x5c860e(0xaa8),_0x16e7e0,_0x25099d),_0x557b0a[_0x5c860e(0xa0b)]()['animationId']<0x0?this[_0x5c860e(0x29d)](_0x16e7e0,_0x557b0a,_0x55f7bd):this[_0x5c860e(0x492)](_0x16e7e0,_0x557b0a,_0x55f7bd);}_0x557b0a['isAttack']()&&_0x16e7e0[_0x5c860e(0x28c)]()&&this['push']('clearActiveWeaponSet',_0x16e7e0),this[_0x5c860e(0xb79)]('applyImmortal',_0x16e7e0,_0x55f7bd,![]),this[_0x5c860e(0x4bf)](_0x16e7e0,_0x35b400,_0x5d64b7,_0x4ce441);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x7be)]=function(_0x51a9ba){const _0x5d94d8=_0x1e608f;if(!_0x51a9ba[_0x5d94d8(0x350)]())return![];if(!_0x51a9ba[_0x5d94d8(0xb35)]())return![];if(!_0x51a9ba[_0x5d94d8(0xaef)]())return![];return VisuMZ[_0x5d94d8(0xce2)][_0x5d94d8(0x4a9)][_0x5d94d8(0x151)][_0x5d94d8(0x7d9)];},Window_BattleLog[_0x1e608f(0xbe1)]['autoMeleeMultiTargetActionSet']=function(_0x4bc81e,_0x38c8a4,_0x27b12b){const _0x795eef=_0x1e608f,_0x4c79ab=_0x4bc81e['getAttackMotion']()['type']<0x2,_0x31c9ba=0x14,_0x185741=0x30;if(_0x4c79ab){if('aMtNm'===_0x795eef(0x8bc))_0x548d17=_0x499b6c[_0x795eef(0x1bb)];else{this['push'](_0x795eef(0x1e3),[_0x4bc81e],_0x185741,_0x31c9ba);const _0x3fff49=_0x27b12b[_0x795eef(0xcaf)]>0x1?_0x795eef(0x6cc):'front\x20base';this['push'](_0x795eef(0x74e),_0x4bc81e,_0x27b12b,_0x3fff49,_0x31c9ba,!![],_0x795eef(0xa73),!![]),this[_0x795eef(0xb79)]('requestMotion',[_0x4bc81e],_0x795eef(0x504)),this[_0x795eef(0xb79)](_0x795eef(0x83e));}}let _0x38e063=_0x38c8a4[_0x795eef(0x65a)]()?this[_0x795eef(0x1e4)](_0x4bc81e):0x1;for(let _0x4cd63e=0x0;_0x4cd63e<_0x38e063;_0x4cd63e++){if(_0x795eef(0x4fb)!==_0x795eef(0x280)){if(_0x38c8a4[_0x795eef(0x65a)]()&&_0x4bc81e[_0x795eef(0x28c)]()){if(_0x795eef(0x965)===_0x795eef(0x965))this[_0x795eef(0xb79)](_0x795eef(0xaa8),_0x4bc81e,_0x4cd63e);else return _0x3429c5[_0x795eef(0x79c)]();}this[_0x795eef(0x492)](_0x4bc81e,_0x38c8a4,_0x27b12b);}else{if(_0xdd99b2[_0x795eef(0x256)])return;_0x517111[_0x795eef(0xce2)][_0x795eef(0xc88)][_0x795eef(0x2d7)](this);}}_0x38c8a4[_0x795eef(0x65a)]()&&_0x4bc81e[_0x795eef(0x28c)]()&&(_0x795eef(0x88d)!==_0x795eef(0x88d)?this['wholeActionSet'](_0x55108c,_0x26e993,_0x3304a7):this[_0x795eef(0xb79)](_0x795eef(0x3a9),_0x4bc81e)),this[_0x795eef(0xb79)](_0x795eef(0x4c9),_0x4bc81e,_0x27b12b,![]),this[_0x795eef(0x4bf)](_0x4bc81e,_0x4c79ab,_0x185741,_0x31c9ba);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x29d)]=function(_0x5995ef,_0x1fb8a3,_0x468339){const _0x32526d=_0x1e608f,_0x2203c6=_0x1fb8a3[_0x32526d(0xa0b)]();for(const _0x585806 of _0x468339){if(_0x32526d(0x27c)!==_0x32526d(0x27c))return this['_opacityDuration']>0x0;else{if(!_0x585806)continue;this[_0x32526d(0xb79)](_0x32526d(0x695),_0x5995ef,_0x1fb8a3),this['push'](_0x32526d(0xad1),Sprite_Battler[_0x32526d(0xa12)]),this['push']('showAnimation',_0x5995ef,[_0x585806],_0x2203c6[_0x32526d(0x6d2)]),this['push'](_0x32526d(0xad1),0x18),this['push'](_0x32526d(0xc63),_0x5995ef,_0x585806);}}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x492)]=function(_0x6805d2,_0x366bb0,_0x45519c){const _0x25b43f=_0x1e608f,_0x56164e=_0x366bb0['item']();let _0x131d9d=_0x366bb0[_0x25b43f(0x65a)]()?0x1+_0x6805d2[_0x25b43f(0x13b)]():0x1;while(_0x131d9d--){this[_0x25b43f(0xb79)](_0x25b43f(0x695),_0x6805d2,_0x366bb0),this[_0x25b43f(0xb79)](_0x25b43f(0xad1),Sprite_Battler[_0x25b43f(0xa12)]),this['push'](_0x25b43f(0xbc2),_0x6805d2,_0x45519c[_0x25b43f(0x309)](),_0x56164e[_0x25b43f(0x6d2)]),this[_0x25b43f(0xb79)](_0x25b43f(0xce4));}for(const _0x2970b9 of _0x45519c){if(!_0x2970b9)continue;this['push'](_0x25b43f(0xc63),_0x6805d2,_0x2970b9);}},Window_BattleLog['prototype'][_0x1e608f(0xd5b)]=function(_0x79aff6,_0x55c704,_0x16a857){const _0x3f3587=_0x1e608f,_0x21e245=_0x55c704[_0x3f3587(0xa0b)]();this['push'](_0x3f3587(0x4c9),_0x79aff6,_0x16a857,![]),this[_0x3f3587(0xb79)](_0x3f3587(0x932)),this['push'](_0x3f3587(0x381)),this['push'](_0x3f3587(0x639)),this[_0x3f3587(0xb79)](_0x3f3587(0xac4),_0x79aff6),this['push']('waitForMovement');},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xa86)]=function(_0x384943){},VisuMZ[_0x1e608f(0xce2)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x918)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x918)]=function(_0x2bf7fb){const _0xef3e74=_0x1e608f;if(!VisuMZ[_0xef3e74(0xce2)][_0xef3e74(0x4a9)][_0xef3e74(0x409)][_0xef3e74(0x82b)])return;VisuMZ[_0xef3e74(0xce2)][_0xef3e74(0x581)][_0xef3e74(0x2d7)](this,_0x2bf7fb);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x895)]=function(_0x3d752c){const _0xea908c=_0x1e608f;this[_0xea908c(0xb79)](_0xea908c(0x961),_0x3d752c);VisuMZ['BattleCore']['Settings'][_0xea908c(0x151)][_0xea908c(0x52f)]&&this[_0xea908c(0xb79)]('showAnimation',_0x3d752c,[BattleManager[_0xea908c(0x7cb)]],-0x1);if(!VisuMZ['BattleCore'][_0xea908c(0x4a9)][_0xea908c(0x409)]['ShowCounter'])return;this['push']('addText',TextManager['counterAttack'][_0xea908c(0x92f)](_0x3d752c[_0xea908c(0x6aa)]()));},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x4a6)]=function(_0x21bd66){const _0x2079c9=_0x1e608f;this[_0x2079c9(0xb79)]('performReflection',_0x21bd66);if(!VisuMZ[_0x2079c9(0xce2)][_0x2079c9(0x4a9)]['BattleLog']['ShowReflect'])return;this[_0x2079c9(0xb79)](_0x2079c9(0xac5),TextManager[_0x2079c9(0x787)][_0x2079c9(0x92f)](_0x21bd66[_0x2079c9(0x6aa)]()));},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xbc3)]=function(_0x2c748b,_0x2cb6c5){const _0xd3e681=_0x1e608f;if(VisuMZ[_0xd3e681(0xce2)][_0xd3e681(0x4a9)][_0xd3e681(0x151)][_0xd3e681(0x859)]){const _0x381088=_0x2cb6c5['item']();this['push'](_0xd3e681(0xbc2),_0x2c748b,[_0x2c748b],_0x381088[_0xd3e681(0x6d2)]);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x58c400,_0x20b00b){const _0x5ae6a5=_0x1e608f;this[_0x5ae6a5(0xb79)]('performSubstitute',_0x58c400,_0x20b00b);if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x5ae6a5(0x5e6)])return;const _0x554229=_0x58c400['name'](),_0x598cdd=TextManager['substitute'][_0x5ae6a5(0x92f)](_0x554229,_0x20b00b[_0x5ae6a5(0x6aa)]());this[_0x5ae6a5(0xb79)]('addText',_0x598cdd);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x5c9)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xccb)],Window_BattleLog['prototype'][_0x1e608f(0xccb)]=function(_0xdee830,_0x2566a2){const _0x3d3cb5=_0x1e608f;VisuMZ[_0x3d3cb5(0xce2)][_0x3d3cb5(0x5c9)][_0x3d3cb5(0x2d7)](this,_0xdee830,_0x2566a2);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x70b)]=Window_BattleLog['prototype'][_0x1e608f(0xba7)],Window_BattleLog['prototype'][_0x1e608f(0xba7)]=function(_0x2ea2cd){const _0x462b94=_0x1e608f;if(!VisuMZ[_0x462b94(0xce2)][_0x462b94(0x4a9)]['BattleLog']['ShowFailure'])return;VisuMZ['BattleCore'][_0x462b94(0x70b)][_0x462b94(0x2d7)](this,_0x2ea2cd);},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3eb)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x1fe)],Window_BattleLog['prototype'][_0x1e608f(0x1fe)]=function(_0x50afb7){const _0x2500f1=_0x1e608f;if(!VisuMZ[_0x2500f1(0xce2)][_0x2500f1(0x4a9)]['BattleLog'][_0x2500f1(0x3df)])return;VisuMZ[_0x2500f1(0xce2)][_0x2500f1(0x3eb)]['call'](this,_0x50afb7);},VisuMZ['BattleCore']['Window_BattleLog_displayMiss']=Window_BattleLog['prototype'][_0x1e608f(0x8c9)],Window_BattleLog['prototype'][_0x1e608f(0x8c9)]=function(_0x4c96d1){const _0x38b340=_0x1e608f;if(!VisuMZ[_0x38b340(0xce2)][_0x38b340(0x4a9)]['BattleLog']['ShowMissEvasion'])this[_0x38b340(0xb79)]('performMiss',_0x4c96d1);else{if(_0x38b340(0x564)===_0x38b340(0x890)){let _0x2d6118=_0x38b340(0xc29);if(this[_0x38b340(0x629)](_0x2d6118))return this[_0x38b340(0xa80)][_0x2d6118];return this['_cache'][_0x2d6118]=this['createBattleUIOffsetX'](this[_0x38b340(0x366)]()),this['_cache'][_0x2d6118];}else VisuMZ[_0x38b340(0xce2)]['Window_BattleLog_displayMiss'][_0x38b340(0x2d7)](this,_0x4c96d1);}},VisuMZ[_0x1e608f(0xce2)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x52d)],Window_BattleLog[_0x1e608f(0xbe1)]['displayEvasion']=function(_0x380dd9){const _0x4c11b0=_0x1e608f;if(!VisuMZ['BattleCore']['Settings'][_0x4c11b0(0x409)][_0x4c11b0(0x80d)]){if('NcXoN'===_0x4c11b0(0x4c0)){let _0x4deed9=_0x2b23fb(_0x57047b['$1']);while(_0x4deed9--){const _0x2a5bb3=_0x74a9ca['randomInt'](0x2)===0x0?this[_0x4c11b0(0x8a4)]():this[_0x4c11b0(0x406)]();_0x57480a[_0x4c11b0(0xb79)](_0x2a5bb3[_0x4c11b0(0xa2c)]());}return this[_0x4c11b0(0x242)](_0x186200);}else _0x380dd9[_0x4c11b0(0x5b2)]()['physical']?this[_0x4c11b0(0xb79)]('performEvasion',_0x380dd9):this['push']('performMagicEvasion',_0x380dd9);}else VisuMZ[_0x4c11b0(0xce2)]['Window_BattleLog_displayEvasion'][_0x4c11b0(0x2d7)](this,_0x380dd9);},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xc04)]=function(_0x1405e5){const _0x1042f2=_0x1e608f;if(_0x1405e5[_0x1042f2(0x5b2)]()[_0x1042f2(0x824)]){if(_0x1042f2(0x225)===_0x1042f2(0x225)){_0x1405e5[_0x1042f2(0x73c)]=0x0;_0x1405e5[_0x1042f2(0x5b2)]()[_0x1042f2(0xae9)]>0x0&&!_0x1405e5['result']()[_0x1042f2(0x76a)]&&(_0x1405e5[_0x1042f2(0x73c)]=_0x1405e5['result']()[_0x1042f2(0xae9)],this[_0x1042f2(0xb79)]('performDamage',_0x1405e5));_0x1405e5[_0x1042f2(0x5b2)]()[_0x1042f2(0xae9)]<0x0&&this[_0x1042f2(0xb79)]('performRecovery',_0x1405e5);if(VisuMZ[_0x1042f2(0xce2)][_0x1042f2(0x4a9)][_0x1042f2(0x409)][_0x1042f2(0x5bc)]){if(_0x1042f2(0x930)==='XugFS')return _0x9d5c82['jsScaleDown'][_0x1042f2(0x2d7)](this);else this[_0x1042f2(0xb79)](_0x1042f2(0xac5),this['makeHpDamageText'](_0x1405e5));}}else _0x40721f[_0x1042f2(0xce2)][_0x1042f2(0x17e)][_0x1042f2(0x2d7)](this,_0x162d5,_0x1cbd6b),this[_0x1042f2(0x49d)][this['_actions'][_0x1042f2(0xcaf)]-0x1]['_forceAction']=!![];}},VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x1e608f(0xbe1)]['displayMpDamage'],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x5f6)]=function(_0x498ac5){const _0x3654f8=_0x1e608f;if(!VisuMZ[_0x3654f8(0xce2)][_0x3654f8(0x4a9)]['BattleLog'][_0x3654f8(0xafe)])return;VisuMZ[_0x3654f8(0xce2)]['Window_BattleLog_displayMpDamage'][_0x3654f8(0x2d7)](this,_0x498ac5);},VisuMZ[_0x1e608f(0xce2)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x61f)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x61f)]=function(_0x518588){const _0x32d83d=_0x1e608f;if(!VisuMZ[_0x32d83d(0xce2)][_0x32d83d(0x4a9)][_0x32d83d(0x409)]['ShowTpDmg'])return;VisuMZ[_0x32d83d(0xce2)]['Window_BattleLog_displayTpDamage'][_0x32d83d(0x2d7)](this,_0x518588);},Window_BattleLog[_0x1e608f(0xbe1)]['displayAffectedStatus']=function(_0x4d3e01){const _0x187cee=_0x1e608f;if(_0x4d3e01['result']()[_0x187cee(0xd3c)]()){if(_0x187cee(0xc36)===_0x187cee(0xc36))this['push'](_0x187cee(0x7e7)),this[_0x187cee(0x462)](_0x4d3e01),this[_0x187cee(0x866)](_0x4d3e01),this[_0x187cee(0xb79)]('waitForNewLine');else return _0x556ac5[_0x187cee(0x327)]['_spriteset']['_damageContainer'];}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x747)]=function(_0x2b28ab){const _0x132e4e=_0x1e608f,_0x29640d=_0x2b28ab[_0x132e4e(0x5b2)](),_0x5f37b0=_0x29640d[_0x132e4e(0x189)]();for(const _0x735b2a of _0x5f37b0){const _0x5f3cc8=_0x2b28ab[_0x132e4e(0x28c)]()?_0x735b2a[_0x132e4e(0x686)]:_0x735b2a[_0x132e4e(0x7da)];_0x5f3cc8&&VisuMZ[_0x132e4e(0xce2)][_0x132e4e(0x4a9)][_0x132e4e(0x409)][_0x132e4e(0x4d0)]&&(this[_0x132e4e(0xb79)](_0x132e4e(0x7f3)),this[_0x132e4e(0xb79)](_0x132e4e(0x6f1)),this[_0x132e4e(0xb79)](_0x132e4e(0x7e7)),this[_0x132e4e(0xb79)](_0x132e4e(0xac5),_0x5f3cc8[_0x132e4e(0x92f)](_0x2b28ab[_0x132e4e(0x6aa)]())),this[_0x132e4e(0xb79)](_0x132e4e(0x380))),_0x735b2a['id']===_0x2b28ab['deathStateId']()&&(_0x132e4e(0xd65)===_0x132e4e(0xd65)?this[_0x132e4e(0xb79)](_0x132e4e(0x73a),_0x2b28ab):(this['_visualHpGauge_JustDied']=!this[_0x132e4e(0xb67)](),_0xdd4aa[_0x132e4e(0x378)](this[_0x132e4e(0x89b)]())));}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x7f3)]=function(){},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x858)]=function(_0x424c82){const _0x1ac855=_0x1e608f;if(!VisuMZ[_0x1ac855(0xce2)][_0x1ac855(0x4a9)]['BattleLog'][_0x1ac855(0xcbf)])return;const _0x3f06b6=_0x424c82[_0x1ac855(0x5b2)](),_0x438b5c=_0x3f06b6['removedStateObjects']();for(const _0xcc70f9 of _0x438b5c){_0xcc70f9['message4']&&(this[_0x1ac855(0xb79)]('fnordRemovedStates'),this[_0x1ac855(0xb79)](_0x1ac855(0x6f1)),this['push'](_0x1ac855(0x7e7)),this['push'](_0x1ac855(0xac5),_0xcc70f9[_0x1ac855(0x644)][_0x1ac855(0x92f)](_0x424c82['name']())),this[_0x1ac855(0xb79)](_0x1ac855(0x380)));}},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x9ca)]=function(){},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x866)]=function(_0x492f44){const _0x57c3a8=_0x1e608f,_0x3af536=VisuMZ[_0x57c3a8(0xce2)][_0x57c3a8(0x4a9)][_0x57c3a8(0x409)],_0x342657=_0x492f44[_0x57c3a8(0x5b2)]();if(_0x3af536['ShowAddedBuff'])this[_0x57c3a8(0x43b)](_0x492f44,_0x342657[_0x57c3a8(0xd58)],TextManager['buffAdd']);if(_0x3af536[_0x57c3a8(0x543)])this['displayBuffs'](_0x492f44,_0x342657[_0x57c3a8(0x253)],TextManager[_0x57c3a8(0xafb)]);if(_0x3af536[_0x57c3a8(0xb48)])this['displayBuffs'](_0x492f44,_0x342657[_0x57c3a8(0x84c)],TextManager[_0x57c3a8(0xd7b)]);},Window_BattleLog['prototype'][_0x1e608f(0x43b)]=function(_0x9479df,_0x33c732,_0x2bb0a6){const _0x1133e1=_0x1e608f;for(const _0x3e9633 of _0x33c732){const _0x47269f=_0x2bb0a6['format'](_0x9479df['name'](),TextManager[_0x1133e1(0x9ea)](_0x3e9633));this[_0x1133e1(0xb79)]('popBaseLine'),this[_0x1133e1(0xb79)](_0x1133e1(0x7e7)),this[_0x1133e1(0xb79)]('addText',_0x47269f),this['push']('wait');}},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x8c4)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x639)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x639)]=function(){const _0xf43b2a=_0x1e608f;VisuMZ[_0xf43b2a(0xce2)][_0xf43b2a(0x8c4)][_0xf43b2a(0x2d7)](this),this['callNextMethod']();},VisuMZ[_0x1e608f(0xce2)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x7e7)],Window_BattleLog[_0x1e608f(0xbe1)]['pushBaseLine']=function(){const _0x560043=_0x1e608f;VisuMZ[_0x560043(0xce2)][_0x560043(0x77f)]['call'](this),this[_0x560043(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0x34f)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x6f1)],Window_BattleLog['prototype'][_0x1e608f(0x6f1)]=function(){const _0x4e48fb=_0x1e608f;VisuMZ[_0x4e48fb(0xce2)][_0x4e48fb(0x34f)][_0x4e48fb(0x2d7)](this),this['processRefresh'](),this['callNextMethod']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x52c)]=Window_BattleLog['prototype'][_0x1e608f(0x631)],Window_BattleLog['prototype'][_0x1e608f(0x631)]=function(_0x35cd08){const _0xd2f2c6=_0x1e608f;VisuMZ[_0xd2f2c6(0xce2)][_0xd2f2c6(0x52c)][_0xd2f2c6(0x2d7)](this,_0x35cd08),this[_0xd2f2c6(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)]['waitForNewLine']=function(){const _0x212f8d=_0x1e608f;let _0x43f051=0x0;this['_baseLineStack']['length']>0x0&&('ZlHoP'!=='NsFkA'?_0x43f051=this[_0x212f8d(0x285)][this['_baseLineStack'][_0x212f8d(0xcaf)]-0x1]:this[_0x212f8d(0xa8a)](_0x4be8e9,'tp',_0x47aefb+(_0x14c789['TpGaugeOffsetX']||0x0),_0x46b63a+this[_0x212f8d(0x836)]()*0x2+(_0x3fda93[_0x212f8d(0xd37)]||0x0))),this[_0x212f8d(0xa08)][_0x212f8d(0xcaf)]>_0x43f051?this[_0x212f8d(0x380)]():this[_0x212f8d(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0x18e)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x834)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x834)]=function(_0x56d769,_0x1a7806){const _0x17feff=_0x1e608f;VisuMZ[_0x17feff(0xce2)]['Window_BattleLog_performActionStart'][_0x17feff(0x2d7)](this,_0x56d769,_0x1a7806),this['callNextMethod']();},VisuMZ['BattleCore'][_0x1e608f(0x116)]=Window_BattleLog[_0x1e608f(0xbe1)]['performAction'],Window_BattleLog[_0x1e608f(0xbe1)]['performAction']=function(_0x4be6ed,_0x1ac043){const _0x1ec170=_0x1e608f;VisuMZ[_0x1ec170(0xce2)][_0x1ec170(0x116)]['call'](this,_0x4be6ed,_0x1ac043),this[_0x1ec170(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0x897)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xac4)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xac4)]=function(_0x5b2948){const _0x90c7c7=_0x1e608f;VisuMZ['BattleCore'][_0x90c7c7(0x897)]['call'](this,_0x5b2948);for(const _0x429f8d of BattleManager['allBattleMembers']()){if('yaqLU'===_0x90c7c7(0x23a))return this['isForRandomBattleCore']();else{if(!_0x429f8d)continue;if(_0x429f8d[_0x90c7c7(0xbdc)]())continue;_0x429f8d[_0x90c7c7(0x4f6)]();}}this[_0x90c7c7(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0xd61)]=Window_BattleLog['prototype'][_0x1e608f(0x864)],Window_BattleLog['prototype']['performDamage']=function(_0x23c09b){const _0x365490=_0x1e608f;VisuMZ[_0x365490(0xce2)]['Window_BattleLog_performDamage'][_0x365490(0x2d7)](this,_0x23c09b),this[_0x365490(0xd30)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x3af)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xc6d)],Window_BattleLog[_0x1e608f(0xbe1)]['performMiss']=function(_0x45d2e7){const _0x2655a3=_0x1e608f;VisuMZ['BattleCore'][_0x2655a3(0x3af)]['call'](this,_0x45d2e7),this['callNextMethod']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xa49)]=Window_BattleLog['prototype'][_0x1e608f(0x91a)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x91a)]=function(_0xac6b28){const _0x4fd777=_0x1e608f;VisuMZ[_0x4fd777(0xce2)][_0x4fd777(0xa49)][_0x4fd777(0x2d7)](this,_0xac6b28),this[_0x4fd777(0xd30)]();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x595)]=Window_BattleLog['prototype'][_0x1e608f(0xc0b)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xc0b)]=function(_0xcd15c5){const _0x1893ce=_0x1e608f;VisuMZ[_0x1893ce(0xce2)][_0x1893ce(0x595)][_0x1893ce(0x2d7)](this,_0xcd15c5),this[_0x1893ce(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0x20c)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xbe3)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xbe3)]=function(_0x55f37f){const _0x29dbf0=_0x1e608f;VisuMZ['BattleCore'][_0x29dbf0(0x20c)][_0x29dbf0(0x2d7)](this,_0x55f37f),this['callNextMethod']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xd09)]=Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x961)],Window_BattleLog[_0x1e608f(0xbe1)]['performCounter']=function(_0x4fff1d){const _0x2626d2=_0x1e608f;VisuMZ['BattleCore']['Window_BattleLog_performCounter'][_0x2626d2(0x2d7)](this,_0x4fff1d),this['callNextMethod']();},VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0xafc)]=Window_BattleLog[_0x1e608f(0xbe1)]['performReflection'],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x5ac)]=function(_0x92ba70){const _0xece6cc=_0x1e608f;VisuMZ[_0xece6cc(0xce2)][_0xece6cc(0xafc)][_0xece6cc(0x2d7)](this,_0x92ba70),this[_0xece6cc(0xd30)]();},VisuMZ['BattleCore'][_0x1e608f(0x293)]=Window_BattleLog['prototype'][_0x1e608f(0xa50)],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xa50)]=function(_0x2d81ea,_0x24a70d){const _0x156866=_0x1e608f;VisuMZ['BattleCore'][_0x156866(0x293)][_0x156866(0x2d7)](this,_0x2d81ea,_0x24a70d),this['callNextMethod']();},VisuMZ['BattleCore'][_0x1e608f(0x2b7)]=Window_BattleLog[_0x1e608f(0xbe1)]['performCollapse'],Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x73a)]=function(_0x3c7a58){const _0x3b71cb=_0x1e608f;VisuMZ[_0x3b71cb(0xce2)][_0x3b71cb(0x2b7)][_0x3b71cb(0x2d7)](this,_0x3c7a58),this['callNextMethod']();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x91c)]=function(_0x3fc1d9,_0x4523d3){const _0x717eba=_0x1e608f;_0x3fc1d9[_0x717eba(0x91c)](_0x4523d3),this[_0x717eba(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x93d)]=function(_0x5acdc0,_0x26d647){const _0x46ad67=_0x1e608f,_0x37aff7=_0x5acdc0['attackAnimationId1']();if(_0x37aff7<=0x0){if(_0x46ad67(0x6c5)===_0x46ad67(0x6c5))SoundManager[_0x46ad67(0xd2b)]();else{const _0x500048=_0x9cbca7[_0x46ad67(0xb2d)];if(_0x500048[_0x46ad67(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x365f3e(_0x53a3a9['$1'])*0.01;else{if(_0x500048[_0x46ad67(0x97b)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x400c83(_0x4432d7['$1'])||0x0;}}}else{if(_0x46ad67(0x22e)===_0x46ad67(0x22e))this[_0x46ad67(0x884)](_0x26d647,_0x37aff7);else return _0x9180de[_0x46ad67(0xce2)][_0x46ad67(0x4a9)]['Mechanics'][_0x46ad67(0x69c)];}},Window_BattleLog[_0x1e608f(0xbe1)]['applyImmortal']=function(_0x510ffe,_0x4db70b,_0x13195e){const _0x4b5599=_0x1e608f,_0x1fcedf=[_0x510ffe]['concat'](_0x4db70b);for(const _0x365952 of _0x1fcedf){if('qOXlP'==='qOXlP'){if(!_0x365952)continue;_0x365952[_0x4b5599(0x165)](_0x13195e);}else this[_0x4b5599(0x580)]=![],this[_0x4b5599(0xb82)]=_0x640cde[_0x4b5599(0x29e)],this[_0x4b5599(0x2ce)]=![],this[_0x4b5599(0x344)]('PreStartBattleJS'),_0x4d07d1[_0x4b5599(0xce2)][_0x4b5599(0xd0d)][_0x4b5599(0x2d7)](this),this['processBattleCoreJS'](_0x4b5599(0xba8));}this[_0x4b5599(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0xad1)]=function(_0xa2406c){const _0x116776=_0x1e608f;this[_0x116776(0x79f)]=_0xa2406c;},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x7c6)]=function(_0x56b83d,_0x2777ea){const _0x326193=_0x1e608f;for(const _0x558499 of _0x56b83d){if(!_0x558499)continue;_0x558499[_0x326193(0x7c6)](_0x2777ea);}this[_0x326193(0xd30)]();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x4c3)]=function(_0x5b49da,_0x2e792f,_0x31456,_0x5591bd,_0x463e4e,_0x2e4530){const _0x4f1c08=_0x1e608f;_0x5b49da[_0x4f1c08(0x60d)](_0x2e792f,_0x31456,_0x5591bd,_0x463e4e,_0x2e4530,-0x1),this['callNextMethod']();},Window_BattleLog[_0x1e608f(0xbe1)][_0x1e608f(0x74e)]=function(_0x143b42,_0x269b31,_0x4af8a6,_0x955652,_0x1e5019,_0xf6a374,_0xc12860){const _0x500604=_0x1e608f,_0x496b05=Math[_0x500604(0xb27)](..._0x269b31[_0x500604(0x725)](_0x3e3c4d=>_0x3e3c4d[_0x500604(0x8dd)]()[_0x500604(0x8d8)]-_0x3e3c4d[_0x500604(0x8dd)]()['mainSpriteWidth']()/0x2)),_0x11e55e=Math['max'](..._0x269b31[_0x500604(0x725)](_0x1d3e31=>_0x1d3e31[_0x500604(0x8dd)]()[_0x500604(0x8d8)]+_0x1d3e31['battler']()[_0x500604(0xcc4)]()/0x2)),_0x3318a4=Math[_0x500604(0xb27)](..._0x269b31[_0x500604(0x725)](_0x3adceb=>_0x3adceb['battler']()[_0x500604(0x171)]-_0x3adceb[_0x500604(0x8dd)]()[_0x500604(0x4d3)]())),_0x4de824=Math[_0x500604(0x127)](..._0x269b31[_0x500604(0x725)](_0xd87f28=>_0xd87f28['battler']()['_baseY'])),_0x3355bf=_0x269b31[_0x500604(0x9f1)](_0x25ea3c=>_0x25ea3c['isActor']())['length'],_0x52caa2=_0x269b31[_0x500604(0x9f1)](_0x55ec3a=>_0x55ec3a['isEnemy']())[_0x500604(0xcaf)];let _0x203205=0x0,_0x1bff59=0x0;if(_0x4af8a6[_0x500604(0x97b)](/front/i))_0x203205=_0x3355bf>=_0x52caa2?_0x496b05:_0x11e55e;else{if(_0x4af8a6[_0x500604(0x97b)](/middle/i)){if(_0x500604(0x63c)===_0x500604(0x63c))_0x203205=(_0x496b05+_0x11e55e)/0x2,_0xc12860=-0x1;else return this[_0x500604(0x28c)]&&this[_0x500604(0x28c)]()?_0x30ddcd[_0x500604(0xce2)][_0x500604(0x4a9)]['Actor'][_0x500604(0x438)]:_0x39aea5['BattleCore'][_0x500604(0x4a9)][_0x500604(0x662)][_0x500604(0x438)];}else _0x4af8a6['match'](/back/i)&&(_0x500604(0x47d)!=='pecbm'?this[_0x500604(0x7b7)]=this[_0x500604(0x556)](this[_0x500604(0x7b7)],this[_0x500604(0xbd5)],_0x770bfe,_0x2b94bf,_0x248260):_0x203205=_0x3355bf>=_0x52caa2?_0x11e55e:_0x496b05);}if(_0x4af8a6[_0x500604(0x97b)](/head/i))_0x1bff59=_0x3318a4;else{if(_0x4af8a6[_0x500604(0x97b)](/center/i)){_0x1bff59=(_0x3318a4+_0x4de824)/0x2;if(_0x143b42[_0x500604(0x8dd)]())_0x1bff59+=_0x143b42[_0x500604(0x8dd)]()[_0x500604(0x96b)]/0x2;}else _0x4af8a6[_0x500604(0x97b)](/base/i)&&('axrdB'===_0x500604(0x1f6)?this[_0x500604(0x1b2)]['removeChild'](_0x175a6b):_0x1bff59=_0x4de824);}_0x143b42['moveBattlerToPoint'](_0x203205,_0x1bff59,_0x955652,_0x1e5019,_0xf6a374,_0xc12860),this[_0x500604(0xd30)]();},Window_BattleLog['prototype']['performJump']=function(_0x446784,_0x2283a3,_0x4fa8f2){const _0x1249b0=_0x1e608f;for(const _0x3eaeaf of _0x446784){if(!_0x3eaeaf)continue;_0x3eaeaf[_0x1249b0(0x3e7)](_0x2283a3,_0x4fa8f2);}this[_0x1249b0(0xd30)]();};function Window_BattleMultiTarget(){const _0x306f37=_0x1e608f;this[_0x306f37(0xb89)](...arguments);}Window_BattleMultiTarget[_0x1e608f(0xbe1)]=Object[_0x1e608f(0x770)](Window_Command[_0x1e608f(0xbe1)]),Window_BattleMultiTarget[_0x1e608f(0xbe1)]['constructor']=Window_BattleMultiTarget,VisuMZ['BattleCore'][_0x1e608f(0x4a9)][_0x1e608f(0x86a)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)]||{},Window_BattleMultiTarget[_0x1e608f(0x68f)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0x7ec)]??0x118,Window_BattleMultiTarget[_0x1e608f(0x10c)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0x7e9)]??0x2,Window_BattleMultiTarget[_0x1e608f(0x89a)]=VisuMZ['BattleCore'][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0x4cc)]??!![],Window_BattleMultiTarget[_0x1e608f(0x4b6)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)]['AllActorsText']??_0x1e608f(0x11a),Window_BattleMultiTarget[_0x1e608f(0xb43)]=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0xa60)]??'All\x20Enemies',Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0xc2c)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0x1e608f(0xce2)][_0x1e608f(0x4a9)][_0x1e608f(0x86a)][_0x1e608f(0x1f5)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x1e608f(0xce2)]['Settings'][_0x1e608f(0x86a)][_0x1e608f(0x298)]??0x0,Window_BattleMultiTarget[_0x1e608f(0x5a5)]=VisuMZ[_0x1e608f(0xce2)]['Settings']['MultiTarget'][_0x1e608f(0x84f)]??0x0,Window_BattleMultiTarget[_0x1e608f(0xbe1)]['initialize']=function(_0x4052db,_0x34a9ca){const _0x3fef6a=_0x1e608f;this[_0x3fef6a(0x121)]=_0x34a9ca,Window_Command[_0x3fef6a(0xbe1)]['initialize'][_0x3fef6a(0x2d7)](this,_0x4052db),this['setBackgroundType'](Window_BattleMultiTarget[_0x3fef6a(0x10c)]),this[_0x3fef6a(0x4f1)](),this[_0x3fef6a(0x64e)](),this[_0x3fef6a(0x3cd)]();},Window_BattleMultiTarget[_0x1e608f(0xbe1)]['forActor']=function(){const _0x4acdcb=_0x1e608f;return this[_0x4acdcb(0x121)];},Window_BattleMultiTarget[_0x1e608f(0xbe1)]['makeCommandList']=function(){const _0x2979f9=_0x1e608f;let _0x461170=this[_0x2979f9(0xc45)]()?Window_BattleMultiTarget[_0x2979f9(0x4b6)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x2979f9(0x89a)]){if(_0x2979f9(0x99a)!==_0x2979f9(0x8aa)){this[_0x2979f9(0x3ad)]=this[_0x2979f9(0xc45)]()?_0x2979f9(0xad3):'pageup',this[_0x2979f9(0x797)]=TextManager[_0x2979f9(0xcf7)](this[_0x2979f9(0x3ad)]);const _0x13b995=VisuMZ['CoreEngine']['Settings'][_0x2979f9(0xd2e)][_0x2979f9(0xcbd)];_0x461170=_0x13b995['format'](this[_0x2979f9(0x797)],_0x461170);}else return this[_0x2979f9(0x945)]();}this['addCommand'](_0x461170,'selectAll');},Window_BattleMultiTarget['prototype'][_0x1e608f(0x387)]=function(_0x5b353e){const _0x3d24e1=_0x1e608f,_0x572550=this[_0x3d24e1(0x9c1)](_0x5b353e);this[_0x3d24e1(0x9f9)](),this['changePaintOpacity'](this['isCommandEnabled'](_0x5b353e));const _0x4f384d=this[_0x3d24e1(0x8f5)](_0x5b353e),_0x5baa67=this[_0x3d24e1(0xa3d)](_0x4f384d)[_0x3d24e1(0x78f)],_0x4b6c73=_0x572550['x']+Math[_0x3d24e1(0x14d)]((_0x572550[_0x3d24e1(0x78f)]-_0x5baa67)/0x2);this[_0x3d24e1(0x53d)](_0x4f384d,_0x4b6c73,_0x572550['y'],_0x572550['width']);},Window_BattleMultiTarget[_0x1e608f(0xbe1)]['update']=function(){const _0x2aa992=_0x1e608f;Window_Command[_0x2aa992(0xbe1)][_0x2aa992(0x593)][_0x2aa992(0x2d7)](this),this[_0x2aa992(0x7e5)](),this[_0x2aa992(0x9b9)]();},Window_BattleMultiTarget[_0x1e608f(0xbe1)][_0x1e608f(0x7e5)]=function(){const _0x2cda84=_0x1e608f;this[_0x2cda84(0x734)]=this[_0x2cda84(0x962)]();},Window_BattleMultiTarget['prototype']['visibilityState']=function(){const _0x103db1=_0x1e608f,_0xbe364c=BattleManager[_0x103db1(0x9cc)](),_0x4c03eb=_0xbe364c&&_0xbe364c['canSingleOrMultipleSelect']();if(!_0x4c03eb)return![];const _0x37425d=SceneManager[_0x103db1(0x327)];if(this['forActor']()){if(_0x37425d[_0x103db1(0x54e)][_0x103db1(0x197)]&&_0x37425d[_0x103db1(0x54e)]['_handlers']['pagedown'])return!![];if(_0x37425d[_0x103db1(0x5fc)]['active']&&_0x37425d['_enemyWindow']['_handlers'][_0x103db1(0xad3)])return!![];}else{if(_0x103db1(0x3b4)===_0x103db1(0x3b4)){if(_0x37425d[_0x103db1(0x5fc)][_0x103db1(0x197)]&&_0x37425d[_0x103db1(0x5fc)]['_handlers'][_0x103db1(0x659)])return!![];}else return this[_0x103db1(0x209)]();}return![];},Window_BattleMultiTarget[_0x1e608f(0xbe1)][_0x1e608f(0x9b9)]=function(){const _0x1f9746=_0x1e608f;if(!Imported[_0x1f9746(0x8b3)])return;this[_0x1f9746(0x797)]!==TextManager[_0x1f9746(0xcf7)](this[_0x1f9746(0x3ad)])&&(_0x1f9746(0x5a2)===_0x1f9746(0x809)?_0x156e29['BattleCore'][_0x1f9746(0x3f1)](_0x322207,_0x4f21e4):this[_0x1f9746(0xd5d)]());},Window_BattleMultiTarget[_0x1e608f(0xbe1)]['processTouch']=function(){const _0x10e240=_0x1e608f;if(this[_0x10e240(0x734)]&&TouchInput[_0x10e240(0xba2)]()){const _0x1f98f1=this[_0x10e240(0x24c)]();if(_0x1f98f1>=0x0){if(_0x10e240(0x515)!==_0x10e240(0xc58)){const _0x5551d5=this[_0x10e240(0xc45)]()?_0x10e240(0xad3):'pageup';Input[_0x10e240(0x7f0)](_0x5551d5);}else{if(!_0x15dac4[_0x10e240(0x5f2)]())return;if(_0x31e801['shouldHideBattleEndPopups']())return;if(!this[_0x10e240(0x8dd)]())return;if(_0x4193cb[_0x10e240(0xcaf)]<=0x0)return;_0x4bfcf3=_0x2723a0||{},_0x2433cd['textColor']=_0x4f52a1[_0x10e240(0x500)]||_0x10e240(0x939),_0x106b0d[_0x10e240(0xaa6)]=_0x5b0155[_0x10e240(0xaa6)]||[0x0,0x0,0x0,0x0],_0x3cef36[_0x10e240(0x464)]=_0x5e2cd3[_0x10e240(0x464)]||0x0,this['battler']()['setupIconTextPopup'](_0xe9bdbc,_0x56f558,_0x144690);}}}};